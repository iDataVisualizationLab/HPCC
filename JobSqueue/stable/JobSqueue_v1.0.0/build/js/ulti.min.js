(function () {
    'use strict';

    //
    let barScale = d3.scaleLinear();

    const collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});
    Array.prototype.naturalSort= function(_){
        if (arguments.length) {
            return this.sort(function (as, bs) {
                return collator.compare(as[_],bs[_]);
            });
        }else {
            return this.sort(collator.compare);
        }
    };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
