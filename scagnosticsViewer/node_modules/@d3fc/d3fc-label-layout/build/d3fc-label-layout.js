(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-selection'), require('d3-scale'), require('@d3fc/d3fc-data-join'), require('@d3fc/d3fc-rebind'), require('d3-array')) :
    typeof define === 'function' && define.amd ? define(['exports', 'd3-selection', 'd3-scale', '@d3fc/d3fc-data-join', '@d3fc/d3fc-rebind', 'd3-array'], factory) :
    (global = global || self, factory(global.fc = global.fc || {}, global.d3, global.d3, global.fc, global.fc, global.d3));
}(this, function (exports, d3Selection, d3Scale, d3fcDataJoin, d3fcRebind, d3Array) { 'use strict';

    var functor = (function (d) {
      return typeof d === 'function' ? d : function () {
        return d;
      };
    });

    var label = (function (layoutStrategy) {
      var decorate = function decorate() {};

      var size = function size() {
        return [0, 0];
      };

      var position = function position(d, i) {
        return [d.x, d.y];
      };

      var strategy = layoutStrategy || function (x) {
        return x;
      };

      var component = function component() {};

      var xScale = d3Scale.scaleIdentity();
      var yScale = d3Scale.scaleIdentity();
      var dataJoin = d3fcDataJoin.dataJoin('g', 'label');

      var label = function label(selection) {
        selection.each(function (data, index, group) {
          var g = dataJoin(d3Selection.select(group[index]), data).call(component); // obtain the rectangular bounding boxes for each child

          var nodes = g.nodes();
          var childRects = nodes.map(function (node, i) {
            var d = d3Selection.select(node).datum();
            var pos = position(d, i, nodes);
            var childPos = [xScale(pos[0]), yScale(pos[1])];
            var childSize = size(d, i, nodes);
            return {
              hidden: false,
              x: childPos[0],
              y: childPos[1],
              width: childSize[0],
              height: childSize[1]
            };
          }); // apply the strategy to derive the layout. The strategy does not change the order
          // or number of label.

          var layout = strategy(childRects);
          g.attr('style', function (_, i) {
            return 'display:' + (layout[i].hidden ? 'none' : 'inherit');
          }).attr('transform', function (_, i) {
            return 'translate(' + layout[i].x + ', ' + layout[i].y + ')';
          }) // set the layout width / height so that children can use SVG layout if required
          .attr('layout-width', function (_, i) {
            return layout[i].width;
          }).attr('layout-height', function (_, i) {
            return layout[i].height;
          }).attr('anchor-x', function (d, i, g) {
            return childRects[i].x - layout[i].x;
          }).attr('anchor-y', function (d, i, g) {
            return childRects[i].y - layout[i].y;
          });
          g.call(component);
          decorate(g, data, index);
        });
      };

      d3fcRebind.rebindAll(label, dataJoin, d3fcRebind.include('key'));
      d3fcRebind.rebindAll(label, strategy);

      label.size = function () {
        if (!arguments.length) {
          return size;
        }

        size = functor(arguments.length <= 0 ? undefined : arguments[0]);
        return label;
      };

      label.position = function () {
        if (!arguments.length) {
          return position;
        }

        position = functor(arguments.length <= 0 ? undefined : arguments[0]);
        return label;
      };

      label.component = function () {
        if (!arguments.length) {
          return component;
        }

        component = arguments.length <= 0 ? undefined : arguments[0];
        return label;
      };

      label.decorate = function () {
        if (!arguments.length) {
          return decorate;
        }

        decorate = arguments.length <= 0 ? undefined : arguments[0];
        return label;
      };

      label.xScale = function () {
        if (!arguments.length) {
          return xScale;
        }

        xScale = arguments.length <= 0 ? undefined : arguments[0];
        return label;
      };

      label.yScale = function () {
        if (!arguments.length) {
          return yScale;
        }

        yScale = arguments.length <= 0 ? undefined : arguments[0];
        return label;
      };

      return label;
    });

    var textLabel = (function (layoutStrategy) {
      var padding = 2;

      var value = function value(x) {
        return x;
      };

      var textJoin = d3fcDataJoin.dataJoin('text');
      var rectJoin = d3fcDataJoin.dataJoin('rect');
      var pointJoin = d3fcDataJoin.dataJoin('circle');

      var textLabel = function textLabel(selection) {
        selection.each(function (data, index, group) {
          var node = group[index];
          var nodeSelection = d3Selection.select(node);
          var width = Number(node.getAttribute('layout-width'));
          var height = Number(node.getAttribute('layout-height'));
          var rect = rectJoin(nodeSelection, [data]);
          rect.attr('width', width).attr('height', height);
          var anchorX = Number(node.getAttribute('anchor-x'));
          var anchorY = Number(node.getAttribute('anchor-y'));
          var circle = pointJoin(nodeSelection, [data]);
          circle.attr('r', 2).attr('cx', anchorX).attr('cy', anchorY);
          var text = textJoin(nodeSelection, [data]);
          text.enter().attr('dy', '0.9em').attr('transform', "translate(".concat(padding, ", ").concat(padding, ")"));
          text.text(value);
        });
      };

      textLabel.padding = function () {
        if (!arguments.length) {
          return padding;
        }

        padding = arguments.length <= 0 ? undefined : arguments[0];
        return textLabel;
      };

      textLabel.value = function () {
        if (!arguments.length) {
          return value;
        }

        value = functor(arguments.length <= 0 ? undefined : arguments[0]);
        return textLabel;
      };

      return textLabel;
    });

    var isIntersecting = function isIntersecting(a, b) {
      return !(a.x >= b.x + b.width || a.x + a.width <= b.x || a.y >= b.y + b.height || a.y + a.height <= b.y);
    };

    var intersect = (function (a, b) {
      if (isIntersecting(a, b)) {
        var left = Math.max(a.x, b.x);
        var right = Math.min(a.x + a.width, b.x + b.width);
        var top = Math.max(a.y, b.y);
        var bottom = Math.min(a.y + a.height, b.y + b.height);
        return (right - left) * (bottom - top);
      } else {
        return 0;
      }
    });

    // rectangles in the array

    var collisionArea = function collisionArea(rectangles, index) {
      return d3Array.sum(rectangles.map(function (d, i) {
        return index === i ? 0 : intersect(rectangles[index], d);
      }));
    }; // computes the total overlapping area of all of the rectangles in the given array

    var getPlacement = function getPlacement(x, y, width, height, location) {
      return {
        x: x,
        y: y,
        width: width,
        height: height,
        location: location
      };
    }; // returns all the potential placements of the given label


    var placements = (function (label) {
      var x = label.x;
      var y = label.y;
      var width = label.width;
      var height = label.height;
      return [getPlacement(x, y, width, height, 'bottom-right'), getPlacement(x - width, y, width, height, 'bottom-left'), getPlacement(x - width, y - height, width, height, 'top-left'), getPlacement(x, y - height, width, height, 'top-right'), getPlacement(x, y - height / 2, width, height, 'middle-right'), getPlacement(x - width / 2, y, width, height, 'bottom-center'), getPlacement(x - width, y - height / 2, width, height, 'middle-left'), getPlacement(x - width / 2, y - height, width, height, 'top-center')];
    });

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

        return arr2;
      }
    }

    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }

    var substitute = function substitute(array, index, substitution) {
      return [].concat(_toConsumableArray(array.slice(0, index)), [substitution], _toConsumableArray(array.slice(index + 1)));
    };

    var lessThan = function lessThan(a, b) {
      return a < b;
    }; // a layout takes an array of rectangles and allows their locations to be optimised.
    // it is constructed using two functions, locationScore, which score the placement of and
    // individual rectangle, and winningScore which takes the scores for a rectangle
    // at two different locations and assigns a winningScore.


    var layoutComponent = function layoutComponent() {
      var score = null;
      var winningScore = lessThan;

      var locationScore = function locationScore() {
        return 0;
      };

      var rectangles;

      var evaluatePlacement = function evaluatePlacement(placement, index) {
        return score - locationScore(rectangles[index], index, rectangles) + locationScore(placement, index, substitute(rectangles, index, placement));
      };

      var layout = function layout(placement, index) {
        if (!score) {
          score = d3Array.sum(rectangles.map(function (r, i) {
            return locationScore(r, i, rectangles);
          }));
        }

        var newScore = evaluatePlacement(placement, index);

        if (winningScore(newScore, score)) {
          return layoutComponent().locationScore(locationScore).winningScore(winningScore).score(newScore).rectangles(substitute(rectangles, index, placement));
        } else {
          return layout;
        }
      };

      layout.rectangles = function () {
        if (!arguments.length) {
          return rectangles;
        }

        rectangles = arguments.length <= 0 ? undefined : arguments[0];
        return layout;
      };

      layout.score = function () {
        if (!arguments.length) {
          return score;
        }

        score = arguments.length <= 0 ? undefined : arguments[0];
        return layout;
      };

      layout.winningScore = function () {
        if (!arguments.length) {
          return winningScore;
        }

        winningScore = arguments.length <= 0 ? undefined : arguments[0];
        return layout;
      };

      layout.locationScore = function () {
        if (!arguments.length) {
          return locationScore;
        }

        locationScore = arguments.length <= 0 ? undefined : arguments[0];
        return layout;
      };

      return layout;
    };

    var greedy = (function () {
      var bounds;

      var containerPenalty = function containerPenalty(rectangle) {
        return bounds ? rectangle.width * rectangle.height - intersect(rectangle, bounds) : 0;
      };

      var penaltyForRectangle = function penaltyForRectangle(rectangle, index, rectangles) {
        return collisionArea(rectangles, index) + containerPenalty(rectangle);
      };

      var strategy = function strategy(data) {
        var rectangles = layoutComponent().locationScore(penaltyForRectangle).rectangles(data);
        data.forEach(function (rectangle, index) {
          placements(rectangle).forEach(function (placement, placementIndex) {
            rectangles = rectangles(placement, index);
          });
        });
        return rectangles.rectangles();
      };

      strategy.bounds = function () {
        if (!arguments.length) {
          return bounds;
        }

        bounds = arguments.length <= 0 ? undefined : arguments[0];
        return strategy;
      };

      return strategy;
    });

    var randomItem = function randomItem(array) {
      return array[randomIndex(array)];
    };

    var randomIndex = function randomIndex(array) {
      return Math.floor(Math.random() * array.length);
    };

    var annealing = (function () {
      var temperature = 1000;
      var cooling = 1;
      var bounds;

      var orientationPenalty = function orientationPenalty(rectangle) {
        switch (rectangle.location) {
          case 'bottom-right':
            return 0;

          case 'middle-right':
          case 'bottom-center':
            return rectangle.width * rectangle.height / 8;
        }

        return rectangle.width * rectangle.height / 4;
      };

      var containerPenalty = function containerPenalty(rectangle) {
        return bounds ? rectangle.width * rectangle.height - intersect(rectangle, bounds) : 0;
      };

      var penaltyForRectangle = function penaltyForRectangle(rectangle, index, rectangles) {
        return collisionArea(rectangles, index) + containerPenalty(rectangle) + orientationPenalty(rectangle);
      };

      var strategy = function strategy(data) {
        var currentTemperature = temperature; // use annealing to allow a new score to be picked even if it is worse than the old

        var winningScore = function winningScore(newScore, oldScore) {
          return Math.exp((oldScore - newScore) / currentTemperature) > Math.random();
        };

        var rectangles = layoutComponent().locationScore(penaltyForRectangle).winningScore(winningScore).rectangles(data);

        while (currentTemperature > 0) {
          var index = randomIndex(data);
          var randomNewPlacement = randomItem(placements(data[index]));
          rectangles = rectangles(randomNewPlacement, index);
          currentTemperature -= cooling;
        }

        return rectangles.rectangles();
      };

      strategy.temperature = function () {
        if (!arguments.length) {
          return temperature;
        }

        temperature = arguments.length <= 0 ? undefined : arguments[0];
        return strategy;
      };

      strategy.cooling = function () {
        if (!arguments.length) {
          return cooling;
        }

        cooling = arguments.length <= 0 ? undefined : arguments[0];
        return strategy;
      };

      strategy.bounds = function () {
        if (!arguments.length) {
          return bounds;
        }

        bounds = arguments.length <= 0 ? undefined : arguments[0];
        return strategy;
      };

      return strategy;
    });

    var scanForObject = function scanForObject(array, comparator) {
      return array[d3Array.scan(array, comparator)];
    };

    var removeOverlaps = (function (adaptedStrategy) {
      adaptedStrategy = adaptedStrategy || function (x) {
        return x;
      };

      var removeOverlaps = function removeOverlaps(layout) {
        layout = adaptedStrategy(layout); // eslint-disable-next-line no-constant-condition

        var _loop = function _loop() {
          // find the collision area for all overlapping rectangles, hiding the one
          // with the greatest overlap
          var visible = layout.filter(function (d) {
            return !d.hidden;
          });
          var collisions = visible.map(function (d, i) {
            return [d, collisionArea(visible, i)];
          });
          var maximumCollision = scanForObject(collisions, function (a, b) {
            return b[1] - a[1];
          });

          if (maximumCollision[1] > 0) {
            maximumCollision[0].hidden = true;
          } else {
            return "break";
          }
        };

        while (true) {
          var _ret = _loop();

          if (_ret === "break") break;
        }

        return layout;
      };

      d3fcRebind.rebindAll(removeOverlaps, adaptedStrategy);
      return removeOverlaps;
    });

    var boundingBox = (function () {
      var bounds = [0, 0];

      var strategy = function strategy(data) {
        return data.map(function (d, i) {
          var tx = d.x;
          var ty = d.y;

          if (tx + d.width > bounds[0]) {
            tx -= d.width;
          }

          if (ty + d.height > bounds[1]) {
            ty -= d.height;
          }

          return {
            height: d.height,
            width: d.width,
            x: tx,
            y: ty
          };
        });
      };

      strategy.bounds = function () {
        if (!arguments.length) {
          return bounds;
        }

        bounds = arguments.length <= 0 ? undefined : arguments[0];
        return strategy;
      };

      return strategy;
    });

    exports.layoutAnnealing = annealing;
    exports.layoutBoundingBox = boundingBox;
    exports.layoutGreedy = greedy;
    exports.layoutLabel = label;
    exports.layoutRemoveOverlaps = removeOverlaps;
    exports.layoutTextLabel = textLabel;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
