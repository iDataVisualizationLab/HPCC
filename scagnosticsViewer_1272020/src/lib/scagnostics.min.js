this['build/js/scagnostics'] = this['build/js/scagnostics'] || {};
this['build/js/scagnostics'].min = this['build/js/scagnostics'].min || {};
(function () {
    'use strict';

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var underscore = createCommonjsModule(function (module, exports) {
        //     Underscore.js 1.9.1
        //     http://underscorejs.org
        //     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
        //     Underscore may be freely distributed under the MIT license.

        (function() {

            // Baseline setup
            // --------------

            // Establish the root object, `window` (`self`) in the browser, `global`
            // on the server, or `this` in some virtual machines. We use `self`
            // instead of `window` for `WebWorker` support.
            var root = typeof self == 'object' && self.self === self && self ||
                typeof commonjsGlobal == 'object' && commonjsGlobal.global === commonjsGlobal && commonjsGlobal ||
                this ||
                {};

            // Save the previous value of the `_` variable.
            var previousUnderscore = root._;

            // Save bytes in the minified (but not gzipped) version:
            var ArrayProto = Array.prototype, ObjProto = Object.prototype;
            var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

            // Create quick reference variables for speed access to core prototypes.
            var push = ArrayProto.push,
                slice = ArrayProto.slice,
                toString = ObjProto.toString,
                hasOwnProperty = ObjProto.hasOwnProperty;

            // All **ECMAScript 5** native function implementations that we hope to use
            // are declared here.
            var nativeIsArray = Array.isArray,
                nativeKeys = Object.keys,
                nativeCreate = Object.create;

            // Naked function reference for surrogate-prototype-swapping.
            var Ctor = function(){};

            // Create a safe reference to the Underscore object for use below.
            var _ = function(obj) {
                if (obj instanceof _) return obj;
                if (!(this instanceof _)) return new _(obj);
                this._wrapped = obj;
            };

            // Export the Underscore object for **Node.js**, with
            // backwards-compatibility for their old module API. If we're in
            // the browser, add `_` as a global object.
            // (`nodeType` is checked to ensure that `module`
            // and `exports` are not HTML elements.)
            if (!exports.nodeType) {
                if (!module.nodeType && module.exports) {
                    exports = module.exports = _;
                }
                exports._ = _;
            } else {
                root._ = _;
            }

            // Current version.
            _.VERSION = '1.9.1';

            // Internal function that returns an efficient (for current engines) version
            // of the passed-in callback, to be repeatedly applied in other Underscore
            // functions.
            var optimizeCb = function(func, context, argCount) {
                if (context === void 0) return func;
                switch (argCount == null ? 3 : argCount) {
                    case 1: return function(value) {
                        return func.call(context, value);
                    };
                    // The 2-argument case is omitted because we’re not using it.
                    case 3: return function(value, index, collection) {
                        return func.call(context, value, index, collection);
                    };
                    case 4: return function(accumulator, value, index, collection) {
                        return func.call(context, accumulator, value, index, collection);
                    };
                }
                return function() {
                    return func.apply(context, arguments);
                };
            };

            var builtinIteratee;

            // An internal function to generate callbacks that can be applied to each
            // element in a collection, returning the desired result — either `identity`,
            // an arbitrary callback, a property matcher, or a property accessor.
            var cb = function(value, context, argCount) {
                if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
                if (value == null) return _.identity;
                if (_.isFunction(value)) return optimizeCb(value, context, argCount);
                if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
                return _.property(value);
            };

            // External wrapper for our callback generator. Users may customize
            // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
            // This abstraction hides the internal-only argCount argument.
            _.iteratee = builtinIteratee = function(value, context) {
                return cb(value, context, Infinity);
            };

            // Some functions take a variable number of arguments, or a few expected
            // arguments at the beginning and then a variable number of values to operate
            // on. This helper accumulates all remaining arguments past the function’s
            // argument length (or an explicit `startIndex`), into an array that becomes
            // the last argument. Similar to ES6’s "rest parameter".
            var restArguments = function(func, startIndex) {
                startIndex = startIndex == null ? func.length - 1 : +startIndex;
                return function() {
                    var length = Math.max(arguments.length - startIndex, 0),
                        rest = Array(length),
                        index = 0;
                    for (; index < length; index++) {
                        rest[index] = arguments[index + startIndex];
                    }
                    switch (startIndex) {
                        case 0: return func.call(this, rest);
                        case 1: return func.call(this, arguments[0], rest);
                        case 2: return func.call(this, arguments[0], arguments[1], rest);
                    }
                    var args = Array(startIndex + 1);
                    for (index = 0; index < startIndex; index++) {
                        args[index] = arguments[index];
                    }
                    args[startIndex] = rest;
                    return func.apply(this, args);
                };
            };

            // An internal function for creating a new object that inherits from another.
            var baseCreate = function(prototype) {
                if (!_.isObject(prototype)) return {};
                if (nativeCreate) return nativeCreate(prototype);
                Ctor.prototype = prototype;
                var result = new Ctor;
                Ctor.prototype = null;
                return result;
            };

            var shallowProperty = function(key) {
                return function(obj) {
                    return obj == null ? void 0 : obj[key];
                };
            };

            var has = function(obj, path) {
                return obj != null && hasOwnProperty.call(obj, path);
            };

            var deepGet = function(obj, path) {
                var length = path.length;
                for (var i = 0; i < length; i++) {
                    if (obj == null) return void 0;
                    obj = obj[path[i]];
                }
                return length ? obj : void 0;
            };

            // Helper for collection methods to determine whether a collection
            // should be iterated as an array or as an object.
            // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
            // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
            var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
            var getLength = shallowProperty('length');
            var isArrayLike = function(collection) {
                var length = getLength(collection);
                return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
            };

            // Collection Functions
            // --------------------

            // The cornerstone, an `each` implementation, aka `forEach`.
            // Handles raw objects in addition to array-likes. Treats all
            // sparse array-likes as if they were dense.
            _.each = _.forEach = function(obj, iteratee, context) {
                iteratee = optimizeCb(iteratee, context);
                var i, length;
                if (isArrayLike(obj)) {
                    for (i = 0, length = obj.length; i < length; i++) {
                        iteratee(obj[i], i, obj);
                    }
                } else {
                    var keys = _.keys(obj);
                    for (i = 0, length = keys.length; i < length; i++) {
                        iteratee(obj[keys[i]], keys[i], obj);
                    }
                }
                return obj;
            };

            // Return the results of applying the iteratee to each element.
            _.map = _.collect = function(obj, iteratee, context) {
                iteratee = cb(iteratee, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length,
                    results = Array(length);
                for (var index = 0; index < length; index++) {
                    var currentKey = keys ? keys[index] : index;
                    results[index] = iteratee(obj[currentKey], currentKey, obj);
                }
                return results;
            };

            // Create a reducing function iterating left or right.
            var createReduce = function(dir) {
                // Wrap code that reassigns argument variables in a separate function than
                // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
                var reducer = function(obj, iteratee, memo, initial) {
                    var keys = !isArrayLike(obj) && _.keys(obj),
                        length = (keys || obj).length,
                        index = dir > 0 ? 0 : length - 1;
                    if (!initial) {
                        memo = obj[keys ? keys[index] : index];
                        index += dir;
                    }
                    for (; index >= 0 && index < length; index += dir) {
                        var currentKey = keys ? keys[index] : index;
                        memo = iteratee(memo, obj[currentKey], currentKey, obj);
                    }
                    return memo;
                };

                return function(obj, iteratee, memo, context) {
                    var initial = arguments.length >= 3;
                    return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
                };
            };

            // **Reduce** builds up a single result from a list of values, aka `inject`,
            // or `foldl`.
            _.reduce = _.foldl = _.inject = createReduce(1);

            // The right-associative version of reduce, also known as `foldr`.
            _.reduceRight = _.foldr = createReduce(-1);

            // Return the first value which passes a truth test. Aliased as `detect`.
            _.find = _.detect = function(obj, predicate, context) {
                var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
                var key = keyFinder(obj, predicate, context);
                if (key !== void 0 && key !== -1) return obj[key];
            };

            // Return all the elements that pass a truth test.
            // Aliased as `select`.
            _.filter = _.select = function(obj, predicate, context) {
                var results = [];
                predicate = cb(predicate, context);
                _.each(obj, function(value, index, list) {
                    if (predicate(value, index, list)) results.push(value);
                });
                return results;
            };

            // Return all the elements for which a truth test fails.
            _.reject = function(obj, predicate, context) {
                return _.filter(obj, _.negate(cb(predicate)), context);
            };

            // Determine whether all of the elements match a truth test.
            // Aliased as `all`.
            _.every = _.all = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length;
                for (var index = 0; index < length; index++) {
                    var currentKey = keys ? keys[index] : index;
                    if (!predicate(obj[currentKey], currentKey, obj)) return false;
                }
                return true;
            };

            // Determine if at least one element in the object matches a truth test.
            // Aliased as `any`.
            _.some = _.any = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length;
                for (var index = 0; index < length; index++) {
                    var currentKey = keys ? keys[index] : index;
                    if (predicate(obj[currentKey], currentKey, obj)) return true;
                }
                return false;
            };

            // Determine if the array or object contains a given item (using `===`).
            // Aliased as `includes` and `include`.
            _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
                if (!isArrayLike(obj)) obj = _.values(obj);
                if (typeof fromIndex != 'number' || guard) fromIndex = 0;
                return _.indexOf(obj, item, fromIndex) >= 0;
            };

            // Invoke a method (with arguments) on every item in a collection.
            _.invoke = restArguments(function(obj, path, args) {
                var contextPath, func;
                if (_.isFunction(path)) {
                    func = path;
                } else if (_.isArray(path)) {
                    contextPath = path.slice(0, -1);
                    path = path[path.length - 1];
                }
                return _.map(obj, function(context) {
                    var method = func;
                    if (!method) {
                        if (contextPath && contextPath.length) {
                            context = deepGet(context, contextPath);
                        }
                        if (context == null) return void 0;
                        method = context[path];
                    }
                    return method == null ? method : method.apply(context, args);
                });
            });

            // Convenience version of a common use case of `map`: fetching a property.
            _.pluck = function(obj, key) {
                return _.map(obj, _.property(key));
            };

            // Convenience version of a common use case of `filter`: selecting only objects
            // containing specific `key:value` pairs.
            _.where = function(obj, attrs) {
                return _.filter(obj, _.matcher(attrs));
            };

            // Convenience version of a common use case of `find`: getting the first object
            // containing specific `key:value` pairs.
            _.findWhere = function(obj, attrs) {
                return _.find(obj, _.matcher(attrs));
            };

            // Return the maximum element (or element-based computation).
            _.max = function(obj, iteratee, context) {
                var result = -Infinity, lastComputed = -Infinity,
                    value, computed;
                if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
                    obj = isArrayLike(obj) ? obj : _.values(obj);
                    for (var i = 0, length = obj.length; i < length; i++) {
                        value = obj[i];
                        if (value != null && value > result) {
                            result = value;
                        }
                    }
                } else {
                    iteratee = cb(iteratee, context);
                    _.each(obj, function(v, index, list) {
                        computed = iteratee(v, index, list);
                        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                            result = v;
                            lastComputed = computed;
                        }
                    });
                }
                return result;
            };

            // Return the minimum element (or element-based computation).
            _.min = function(obj, iteratee, context) {
                var result = Infinity, lastComputed = Infinity,
                    value, computed;
                if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
                    obj = isArrayLike(obj) ? obj : _.values(obj);
                    for (var i = 0, length = obj.length; i < length; i++) {
                        value = obj[i];
                        if (value != null && value < result) {
                            result = value;
                        }
                    }
                } else {
                    iteratee = cb(iteratee, context);
                    _.each(obj, function(v, index, list) {
                        computed = iteratee(v, index, list);
                        if (computed < lastComputed || computed === Infinity && result === Infinity) {
                            result = v;
                            lastComputed = computed;
                        }
                    });
                }
                return result;
            };

            // Shuffle a collection.
            _.shuffle = function(obj) {
                return _.sample(obj, Infinity);
            };

            // Sample **n** random values from a collection using the modern version of the
            // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
            // If **n** is not specified, returns a single random element.
            // The internal `guard` argument allows it to work with `map`.
            _.sample = function(obj, n, guard) {
                if (n == null || guard) {
                    if (!isArrayLike(obj)) obj = _.values(obj);
                    return obj[_.random(obj.length - 1)];
                }
                var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
                var length = getLength(sample);
                n = Math.max(Math.min(n, length), 0);
                var last = length - 1;
                for (var index = 0; index < n; index++) {
                    var rand = _.random(index, last);
                    var temp = sample[index];
                    sample[index] = sample[rand];
                    sample[rand] = temp;
                }
                return sample.slice(0, n);
            };

            // Sort the object's values by a criterion produced by an iteratee.
            _.sortBy = function(obj, iteratee, context) {
                var index = 0;
                iteratee = cb(iteratee, context);
                return _.pluck(_.map(obj, function(value, key, list) {
                    return {
                        value: value,
                        index: index++,
                        criteria: iteratee(value, key, list)
                    };
                }).sort(function(left, right) {
                    var a = left.criteria;
                    var b = right.criteria;
                    if (a !== b) {
                        if (a > b || a === void 0) return 1;
                        if (a < b || b === void 0) return -1;
                    }
                    return left.index - right.index;
                }), 'value');
            };

            // An internal function used for aggregate "group by" operations.
            var group = function(behavior, partition) {
                return function(obj, iteratee, context) {
                    var result = partition ? [[], []] : {};
                    iteratee = cb(iteratee, context);
                    _.each(obj, function(value, index) {
                        var key = iteratee(value, index, obj);
                        behavior(result, value, key);
                    });
                    return result;
                };
            };

            // Groups the object's values by a criterion. Pass either a string attribute
            // to group by, or a function that returns the criterion.
            _.groupBy = group(function(result, value, key) {
                if (has(result, key)) result[key].push(value); else result[key] = [value];
            });

            // Indexes the object's values by a criterion, similar to `groupBy`, but for
            // when you know that your index values will be unique.
            _.indexBy = group(function(result, value, key) {
                result[key] = value;
            });

            // Counts instances of an object that group by a certain criterion. Pass
            // either a string attribute to count by, or a function that returns the
            // criterion.
            _.countBy = group(function(result, value, key) {
                if (has(result, key)) result[key]++; else result[key] = 1;
            });

            var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
            // Safely create a real, live array from anything iterable.
            _.toArray = function(obj) {
                if (!obj) return [];
                if (_.isArray(obj)) return slice.call(obj);
                if (_.isString(obj)) {
                    // Keep surrogate pair characters together
                    return obj.match(reStrSymbol);
                }
                if (isArrayLike(obj)) return _.map(obj, _.identity);
                return _.values(obj);
            };

            // Return the number of elements in an object.
            _.size = function(obj) {
                if (obj == null) return 0;
                return isArrayLike(obj) ? obj.length : _.keys(obj).length;
            };

            // Split a collection into two arrays: one whose elements all satisfy the given
            // predicate, and one whose elements all do not satisfy the predicate.
            _.partition = group(function(result, value, pass) {
                result[pass ? 0 : 1].push(value);
            }, true);

            // Array Functions
            // ---------------

            // Get the first element of an array. Passing **n** will return the first N
            // values in the array. Aliased as `head` and `take`. The **guard** check
            // allows it to work with `_.map`.
            _.first = _.head = _.take = function(array, n, guard) {
                if (array == null || array.length < 1) return n == null ? void 0 : [];
                if (n == null || guard) return array[0];
                return _.initial(array, array.length - n);
            };

            // Returns everything but the last entry of the array. Especially useful on
            // the arguments object. Passing **n** will return all the values in
            // the array, excluding the last N.
            _.initial = function(array, n, guard) {
                return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
            };

            // Get the last element of an array. Passing **n** will return the last N
            // values in the array.
            _.last = function(array, n, guard) {
                if (array == null || array.length < 1) return n == null ? void 0 : [];
                if (n == null || guard) return array[array.length - 1];
                return _.rest(array, Math.max(0, array.length - n));
            };

            // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
            // Especially useful on the arguments object. Passing an **n** will return
            // the rest N values in the array.
            _.rest = _.tail = _.drop = function(array, n, guard) {
                return slice.call(array, n == null || guard ? 1 : n);
            };

            // Trim out all falsy values from an array.
            _.compact = function(array) {
                return _.filter(array, Boolean);
            };

            // Internal implementation of a recursive `flatten` function.
            var flatten = function(input, shallow, strict, output) {
                output = output || [];
                var idx = output.length;
                for (var i = 0, length = getLength(input); i < length; i++) {
                    var value = input[i];
                    if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                        // Flatten current level of array or arguments object.
                        if (shallow) {
                            var j = 0, len = value.length;
                            while (j < len) output[idx++] = value[j++];
                        } else {
                            flatten(value, shallow, strict, output);
                            idx = output.length;
                        }
                    } else if (!strict) {
                        output[idx++] = value;
                    }
                }
                return output;
            };

            // Flatten out an array, either recursively (by default), or just one level.
            _.flatten = function(array, shallow) {
                return flatten(array, shallow, false);
            };

            // Return a version of the array that does not contain the specified value(s).
            _.without = restArguments(function(array, otherArrays) {
                return _.difference(array, otherArrays);
            });

            // Produce a duplicate-free version of the array. If the array has already
            // been sorted, you have the option of using a faster algorithm.
            // The faster algorithm will not work with an iteratee if the iteratee
            // is not a one-to-one function, so providing an iteratee will disable
            // the faster algorithm.
            // Aliased as `unique`.
            _.uniq = _.unique = function(array, isSorted, iteratee, context) {
                if (!_.isBoolean(isSorted)) {
                    context = iteratee;
                    iteratee = isSorted;
                    isSorted = false;
                }
                if (iteratee != null) iteratee = cb(iteratee, context);
                var result = [];
                var seen = [];
                for (var i = 0, length = getLength(array); i < length; i++) {
                    var value = array[i],
                        computed = iteratee ? iteratee(value, i, array) : value;
                    if (isSorted && !iteratee) {
                        if (!i || seen !== computed) result.push(value);
                        seen = computed;
                    } else if (iteratee) {
                        if (!_.contains(seen, computed)) {
                            seen.push(computed);
                            result.push(value);
                        }
                    } else if (!_.contains(result, value)) {
                        result.push(value);
                    }
                }
                return result;
            };

            // Produce an array that contains the union: each distinct element from all of
            // the passed-in arrays.
            _.union = restArguments(function(arrays) {
                return _.uniq(flatten(arrays, true, true));
            });

            // Produce an array that contains every item shared between all the
            // passed-in arrays.
            _.intersection = function(array) {
                var result = [];
                var argsLength = arguments.length;
                for (var i = 0, length = getLength(array); i < length; i++) {
                    var item = array[i];
                    if (_.contains(result, item)) continue;
                    var j;
                    for (j = 1; j < argsLength; j++) {
                        if (!_.contains(arguments[j], item)) break;
                    }
                    if (j === argsLength) result.push(item);
                }
                return result;
            };

            // Take the difference between one array and a number of other arrays.
            // Only the elements present in just the first array will remain.
            _.difference = restArguments(function(array, rest) {
                rest = flatten(rest, true, true);
                return _.filter(array, function(value){
                    return !_.contains(rest, value);
                });
            });

            // Complement of _.zip. Unzip accepts an array of arrays and groups
            // each array's elements on shared indices.
            _.unzip = function(array) {
                var length = array && _.max(array, getLength).length || 0;
                var result = Array(length);

                for (var index = 0; index < length; index++) {
                    result[index] = _.pluck(array, index);
                }
                return result;
            };

            // Zip together multiple lists into a single array -- elements that share
            // an index go together.
            _.zip = restArguments(_.unzip);

            // Converts lists into objects. Pass either a single array of `[key, value]`
            // pairs, or two parallel arrays of the same length -- one of keys, and one of
            // the corresponding values. Passing by pairs is the reverse of _.pairs.
            _.object = function(list, values) {
                var result = {};
                for (var i = 0, length = getLength(list); i < length; i++) {
                    if (values) {
                        result[list[i]] = values[i];
                    } else {
                        result[list[i][0]] = list[i][1];
                    }
                }
                return result;
            };

            // Generator function to create the findIndex and findLastIndex functions.
            var createPredicateIndexFinder = function(dir) {
                return function(array, predicate, context) {
                    predicate = cb(predicate, context);
                    var length = getLength(array);
                    var index = dir > 0 ? 0 : length - 1;
                    for (; index >= 0 && index < length; index += dir) {
                        if (predicate(array[index], index, array)) return index;
                    }
                    return -1;
                };
            };

            // Returns the first index on an array-like that passes a predicate test.
            _.findIndex = createPredicateIndexFinder(1);
            _.findLastIndex = createPredicateIndexFinder(-1);

            // Use a comparator function to figure out the smallest index at which
            // an object should be inserted so as to maintain order. Uses binary search.
            _.sortedIndex = function(array, obj, iteratee, context) {
                iteratee = cb(iteratee, context, 1);
                var value = iteratee(obj);
                var low = 0, high = getLength(array);
                while (low < high) {
                    var mid = Math.floor((low + high) / 2);
                    if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
                }
                return low;
            };

            // Generator function to create the indexOf and lastIndexOf functions.
            var createIndexFinder = function(dir, predicateFind, sortedIndex) {
                return function(array, item, idx) {
                    var i = 0, length = getLength(array);
                    if (typeof idx == 'number') {
                        if (dir > 0) {
                            i = idx >= 0 ? idx : Math.max(idx + length, i);
                        } else {
                            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
                        }
                    } else if (sortedIndex && idx && length) {
                        idx = sortedIndex(array, item);
                        return array[idx] === item ? idx : -1;
                    }
                    if (item !== item) {
                        idx = predicateFind(slice.call(array, i, length), _.isNaN);
                        return idx >= 0 ? idx + i : -1;
                    }
                    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
                        if (array[idx] === item) return idx;
                    }
                    return -1;
                };
            };

            // Return the position of the first occurrence of an item in an array,
            // or -1 if the item is not included in the array.
            // If the array is large and already in sort order, pass `true`
            // for **isSorted** to use binary search.
            _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
            _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

            // Generate an integer Array containing an arithmetic progression. A port of
            // the native Python `range()` function. See
            // [the Python documentation](http://docs.python.org/library/functions.html#range).
            _.range = function(start, stop, step) {
                if (stop == null) {
                    stop = start || 0;
                    start = 0;
                }
                if (!step) {
                    step = stop < start ? -1 : 1;
                }

                var length = Math.max(Math.ceil((stop - start) / step), 0);
                var range = Array(length);

                for (var idx = 0; idx < length; idx++, start += step) {
                    range[idx] = start;
                }

                return range;
            };

            // Chunk a single array into multiple arrays, each containing `count` or fewer
            // items.
            _.chunk = function(array, count) {
                if (count == null || count < 1) return [];
                var result = [];
                var i = 0, length = array.length;
                while (i < length) {
                    result.push(slice.call(array, i, i += count));
                }
                return result;
            };

            // Function (ahem) Functions
            // ------------------

            // Determines whether to execute a function as a constructor
            // or a normal function with the provided arguments.
            var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
                if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
                var self = baseCreate(sourceFunc.prototype);
                var result = sourceFunc.apply(self, args);
                if (_.isObject(result)) return result;
                return self;
            };

            // Create a function bound to a given object (assigning `this`, and arguments,
            // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
            // available.
            _.bind = restArguments(function(func, context, args) {
                if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
                var bound = restArguments(function(callArgs) {
                    return executeBound(func, bound, context, this, args.concat(callArgs));
                });
                return bound;
            });

            // Partially apply a function by creating a version that has had some of its
            // arguments pre-filled, without changing its dynamic `this` context. _ acts
            // as a placeholder by default, allowing any combination of arguments to be
            // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
            _.partial = restArguments(function(func, boundArgs) {
                var placeholder = _.partial.placeholder;
                var bound = function() {
                    var position = 0, length = boundArgs.length;
                    var args = Array(length);
                    for (var i = 0; i < length; i++) {
                        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
                    }
                    while (position < arguments.length) args.push(arguments[position++]);
                    return executeBound(func, bound, this, this, args);
                };
                return bound;
            });

            _.partial.placeholder = _;

            // Bind a number of an object's methods to that object. Remaining arguments
            // are the method names to be bound. Useful for ensuring that all callbacks
            // defined on an object belong to it.
            _.bindAll = restArguments(function(obj, keys) {
                keys = flatten(keys, false, false);
                var index = keys.length;
                if (index < 1) throw new Error('bindAll must be passed function names');
                while (index--) {
                    var key = keys[index];
                    obj[key] = _.bind(obj[key], obj);
                }
            });

            // Memoize an expensive function by storing its results.
            _.memoize = function(func, hasher) {
                var memoize = function(key) {
                    var cache = memoize.cache;
                    var address = '' + (hasher ? hasher.apply(this, arguments) : key);
                    if (!has(cache, address)) cache[address] = func.apply(this, arguments);
                    return cache[address];
                };
                memoize.cache = {};
                return memoize;
            };

            // Delays a function for the given number of milliseconds, and then calls
            // it with the arguments supplied.
            _.delay = restArguments(function(func, wait, args) {
                return setTimeout(function() {
                    return func.apply(null, args);
                }, wait);
            });

            // Defers a function, scheduling it to run after the current call stack has
            // cleared.
            _.defer = _.partial(_.delay, _, 1);

            // Returns a function, that, when invoked, will only be triggered at most once
            // during a given window of time. Normally, the throttled function will run
            // as much as it can, without ever going more than once per `wait` duration;
            // but if you'd like to disable the execution on the leading edge, pass
            // `{leading: false}`. To disable execution on the trailing edge, ditto.
            _.throttle = function(func, wait, options) {
                var timeout, context, args, result;
                var previous = 0;
                if (!options) options = {};

                var later = function() {
                    previous = options.leading === false ? 0 : _.now();
                    timeout = null;
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                };

                var throttled = function() {
                    var now = _.now();
                    if (!previous && options.leading === false) previous = now;
                    var remaining = wait - (now - previous);
                    context = this;
                    args = arguments;
                    if (remaining <= 0 || remaining > wait) {
                        if (timeout) {
                            clearTimeout(timeout);
                            timeout = null;
                        }
                        previous = now;
                        result = func.apply(context, args);
                        if (!timeout) context = args = null;
                    } else if (!timeout && options.trailing !== false) {
                        timeout = setTimeout(later, remaining);
                    }
                    return result;
                };

                throttled.cancel = function() {
                    clearTimeout(timeout);
                    previous = 0;
                    timeout = context = args = null;
                };

                return throttled;
            };

            // Returns a function, that, as long as it continues to be invoked, will not
            // be triggered. The function will be called after it stops being called for
            // N milliseconds. If `immediate` is passed, trigger the function on the
            // leading edge, instead of the trailing.
            _.debounce = function(func, wait, immediate) {
                var timeout, result;

                var later = function(context, args) {
                    timeout = null;
                    if (args) result = func.apply(context, args);
                };

                var debounced = restArguments(function(args) {
                    if (timeout) clearTimeout(timeout);
                    if (immediate) {
                        var callNow = !timeout;
                        timeout = setTimeout(later, wait);
                        if (callNow) result = func.apply(this, args);
                    } else {
                        timeout = _.delay(later, wait, this, args);
                    }

                    return result;
                });

                debounced.cancel = function() {
                    clearTimeout(timeout);
                    timeout = null;
                };

                return debounced;
            };

            // Returns the first function passed as an argument to the second,
            // allowing you to adjust arguments, run code before and after, and
            // conditionally execute the original function.
            _.wrap = function(func, wrapper) {
                return _.partial(wrapper, func);
            };

            // Returns a negated version of the passed-in predicate.
            _.negate = function(predicate) {
                return function() {
                    return !predicate.apply(this, arguments);
                };
            };

            // Returns a function that is the composition of a list of functions, each
            // consuming the return value of the function that follows.
            _.compose = function() {
                var args = arguments;
                var start = args.length - 1;
                return function() {
                    var i = start;
                    var result = args[start].apply(this, arguments);
                    while (i--) result = args[i].call(this, result);
                    return result;
                };
            };

            // Returns a function that will only be executed on and after the Nth call.
            _.after = function(times, func) {
                return function() {
                    if (--times < 1) {
                        return func.apply(this, arguments);
                    }
                };
            };

            // Returns a function that will only be executed up to (but not including) the Nth call.
            _.before = function(times, func) {
                var memo;
                return function() {
                    if (--times > 0) {
                        memo = func.apply(this, arguments);
                    }
                    if (times <= 1) func = null;
                    return memo;
                };
            };

            // Returns a function that will be executed at most one time, no matter how
            // often you call it. Useful for lazy initialization.
            _.once = _.partial(_.before, 2);

            _.restArguments = restArguments;

            // Object Functions
            // ----------------

            // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
            var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
            var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

            var collectNonEnumProps = function(obj, keys) {
                var nonEnumIdx = nonEnumerableProps.length;
                var constructor = obj.constructor;
                var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

                // Constructor is a special case.
                var prop = 'constructor';
                if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

                while (nonEnumIdx--) {
                    prop = nonEnumerableProps[nonEnumIdx];
                    if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
                        keys.push(prop);
                    }
                }
            };

            // Retrieve the names of an object's own properties.
            // Delegates to **ECMAScript 5**'s native `Object.keys`.
            _.keys = function(obj) {
                if (!_.isObject(obj)) return [];
                if (nativeKeys) return nativeKeys(obj);
                var keys = [];
                for (var key in obj) if (has(obj, key)) keys.push(key);
                // Ahem, IE < 9.
                if (hasEnumBug) collectNonEnumProps(obj, keys);
                return keys;
            };

            // Retrieve all the property names of an object.
            _.allKeys = function(obj) {
                if (!_.isObject(obj)) return [];
                var keys = [];
                for (var key in obj) keys.push(key);
                // Ahem, IE < 9.
                if (hasEnumBug) collectNonEnumProps(obj, keys);
                return keys;
            };

            // Retrieve the values of an object's properties.
            _.values = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var values = Array(length);
                for (var i = 0; i < length; i++) {
                    values[i] = obj[keys[i]];
                }
                return values;
            };

            // Returns the results of applying the iteratee to each element of the object.
            // In contrast to _.map it returns an object.
            _.mapObject = function(obj, iteratee, context) {
                iteratee = cb(iteratee, context);
                var keys = _.keys(obj),
                    length = keys.length,
                    results = {};
                for (var index = 0; index < length; index++) {
                    var currentKey = keys[index];
                    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
                }
                return results;
            };

            // Convert an object into a list of `[key, value]` pairs.
            // The opposite of _.object.
            _.pairs = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var pairs = Array(length);
                for (var i = 0; i < length; i++) {
                    pairs[i] = [keys[i], obj[keys[i]]];
                }
                return pairs;
            };

            // Invert the keys and values of an object. The values must be serializable.
            _.invert = function(obj) {
                var result = {};
                var keys = _.keys(obj);
                for (var i = 0, length = keys.length; i < length; i++) {
                    result[obj[keys[i]]] = keys[i];
                }
                return result;
            };

            // Return a sorted list of the function names available on the object.
            // Aliased as `methods`.
            _.functions = _.methods = function(obj) {
                var names = [];
                for (var key in obj) {
                    if (_.isFunction(obj[key])) names.push(key);
                }
                return names.sort();
            };

            // An internal function for creating assigner functions.
            var createAssigner = function(keysFunc, defaults) {
                return function(obj) {
                    var length = arguments.length;
                    if (defaults) obj = Object(obj);
                    if (length < 2 || obj == null) return obj;
                    for (var index = 1; index < length; index++) {
                        var source = arguments[index],
                            keys = keysFunc(source),
                            l = keys.length;
                        for (var i = 0; i < l; i++) {
                            var key = keys[i];
                            if (!defaults || obj[key] === void 0) obj[key] = source[key];
                        }
                    }
                    return obj;
                };
            };

            // Extend a given object with all the properties in passed-in object(s).
            _.extend = createAssigner(_.allKeys);

            // Assigns a given object with all the own properties in the passed-in object(s).
            // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
            _.extendOwn = _.assign = createAssigner(_.keys);

            // Returns the first key on an object that passes a predicate test.
            _.findKey = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = _.keys(obj), key;
                for (var i = 0, length = keys.length; i < length; i++) {
                    key = keys[i];
                    if (predicate(obj[key], key, obj)) return key;
                }
            };

            // Internal pick helper function to determine if `obj` has key `key`.
            var keyInObj = function(value, key, obj) {
                return key in obj;
            };

            // Return a copy of the object only containing the whitelisted properties.
            _.pick = restArguments(function(obj, keys) {
                var result = {}, iteratee = keys[0];
                if (obj == null) return result;
                if (_.isFunction(iteratee)) {
                    if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
                    keys = _.allKeys(obj);
                } else {
                    iteratee = keyInObj;
                    keys = flatten(keys, false, false);
                    obj = Object(obj);
                }
                for (var i = 0, length = keys.length; i < length; i++) {
                    var key = keys[i];
                    var value = obj[key];
                    if (iteratee(value, key, obj)) result[key] = value;
                }
                return result;
            });

            // Return a copy of the object without the blacklisted properties.
            _.omit = restArguments(function(obj, keys) {
                var iteratee = keys[0], context;
                if (_.isFunction(iteratee)) {
                    iteratee = _.negate(iteratee);
                    if (keys.length > 1) context = keys[1];
                } else {
                    keys = _.map(flatten(keys, false, false), String);
                    iteratee = function(value, key) {
                        return !_.contains(keys, key);
                    };
                }
                return _.pick(obj, iteratee, context);
            });

            // Fill in a given object with default properties.
            _.defaults = createAssigner(_.allKeys, true);

            // Creates an object that inherits from the given prototype object.
            // If additional properties are provided then they will be added to the
            // created object.
            _.create = function(prototype, props) {
                var result = baseCreate(prototype);
                if (props) _.extendOwn(result, props);
                return result;
            };

            // Create a (shallow-cloned) duplicate of an object.
            _.clone = function(obj) {
                if (!_.isObject(obj)) return obj;
                return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
            };

            // Invokes interceptor with the obj, and then returns obj.
            // The primary purpose of this method is to "tap into" a method chain, in
            // order to perform operations on intermediate results within the chain.
            _.tap = function(obj, interceptor) {
                interceptor(obj);
                return obj;
            };

            // Returns whether an object has a given set of `key:value` pairs.
            _.isMatch = function(object, attrs) {
                var keys = _.keys(attrs), length = keys.length;
                if (object == null) return !length;
                var obj = Object(object);
                for (var i = 0; i < length; i++) {
                    var key = keys[i];
                    if (attrs[key] !== obj[key] || !(key in obj)) return false;
                }
                return true;
            };


            // Internal recursive comparison function for `isEqual`.
            var eq, deepEq;
            eq = function(a, b, aStack, bStack) {
                // Identical objects are equal. `0 === -0`, but they aren't identical.
                // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
                if (a === b) return a !== 0 || 1 / a === 1 / b;
                // `null` or `undefined` only equal to itself (strict comparison).
                if (a == null || b == null) return false;
                // `NaN`s are equivalent, but non-reflexive.
                if (a !== a) return b !== b;
                // Exhaust primitive checks
                var type = typeof a;
                if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
                return deepEq(a, b, aStack, bStack);
            };

            // Internal recursive comparison function for `isEqual`.
            deepEq = function(a, b, aStack, bStack) {
                // Unwrap any wrapped objects.
                if (a instanceof _) a = a._wrapped;
                if (b instanceof _) b = b._wrapped;
                // Compare `[[Class]]` names.
                var className = toString.call(a);
                if (className !== toString.call(b)) return false;
                switch (className) {
                    // Strings, numbers, regular expressions, dates, and booleans are compared by value.
                    case '[object RegExp]':
                    // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
                    case '[object String]':
                        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                        // equivalent to `new String("5")`.
                        return '' + a === '' + b;
                    case '[object Number]':
                        // `NaN`s are equivalent, but non-reflexive.
                        // Object(NaN) is equivalent to NaN.
                        if (+a !== +a) return +b !== +b;
                        // An `egal` comparison is performed for other numeric values.
                        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                    case '[object Date]':
                    case '[object Boolean]':
                        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                        // millisecond representations. Note that invalid dates with millisecond representations
                        // of `NaN` are not equivalent.
                        return +a === +b;
                    case '[object Symbol]':
                        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
                }

                var areArrays = className === '[object Array]';
                if (!areArrays) {
                    if (typeof a != 'object' || typeof b != 'object') return false;

                    // Objects with different constructors are not equivalent, but `Object`s or `Array`s
                    // from different frames are.
                    var aCtor = a.constructor, bCtor = b.constructor;
                    if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                        _.isFunction(bCtor) && bCtor instanceof bCtor)
                        && ('constructor' in a && 'constructor' in b)) {
                        return false;
                    }
                }
                // Assume equality for cyclic structures. The algorithm for detecting cyclic
                // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

                // Initializing stack of traversed objects.
                // It's done here since we only need them for objects and arrays comparison.
                aStack = aStack || [];
                bStack = bStack || [];
                var length = aStack.length;
                while (length--) {
                    // Linear search. Performance is inversely proportional to the number of
                    // unique nested structures.
                    if (aStack[length] === a) return bStack[length] === b;
                }

                // Add the first object to the stack of traversed objects.
                aStack.push(a);
                bStack.push(b);

                // Recursively compare objects and arrays.
                if (areArrays) {
                    // Compare array lengths to determine if a deep comparison is necessary.
                    length = a.length;
                    if (length !== b.length) return false;
                    // Deep compare the contents, ignoring non-numeric properties.
                    while (length--) {
                        if (!eq(a[length], b[length], aStack, bStack)) return false;
                    }
                } else {
                    // Deep compare objects.
                    var keys = _.keys(a), key;
                    length = keys.length;
                    // Ensure that both objects contain the same number of properties before comparing deep equality.
                    if (_.keys(b).length !== length) return false;
                    while (length--) {
                        // Deep compare each member
                        key = keys[length];
                        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
                    }
                }
                // Remove the first object from the stack of traversed objects.
                aStack.pop();
                bStack.pop();
                return true;
            };

            // Perform a deep comparison to check if two objects are equal.
            _.isEqual = function(a, b) {
                return eq(a, b);
            };

            // Is a given array, string, or object empty?
            // An "empty" object has no enumerable own-properties.
            _.isEmpty = function(obj) {
                if (obj == null) return true;
                if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
                return _.keys(obj).length === 0;
            };

            // Is a given value a DOM element?
            _.isElement = function(obj) {
                return !!(obj && obj.nodeType === 1);
            };

            // Is a given value an array?
            // Delegates to ECMA5's native Array.isArray
            _.isArray = nativeIsArray || function(obj) {
                return toString.call(obj) === '[object Array]';
            };

            // Is a given variable an object?
            _.isObject = function(obj) {
                var type = typeof obj;
                return type === 'function' || type === 'object' && !!obj;
            };

            // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
            _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
                _['is' + name] = function(obj) {
                    return toString.call(obj) === '[object ' + name + ']';
                };
            });

            // Define a fallback version of the method in browsers (ahem, IE < 9), where
            // there isn't any inspectable "Arguments" type.
            if (!_.isArguments(arguments)) {
                _.isArguments = function(obj) {
                    return has(obj, 'callee');
                };
            }

            // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
            // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
            var nodelist = root.document && root.document.childNodes;
            if (typeof Int8Array != 'object' && typeof nodelist != 'function') {
                _.isFunction = function(obj) {
                    return typeof obj == 'function' || false;
                };
            }

            // Is a given object a finite number?
            _.isFinite = function(obj) {
                return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
            };

            // Is the given value `NaN`?
            _.isNaN = function(obj) {
                return _.isNumber(obj) && isNaN(obj);
            };

            // Is a given value a boolean?
            _.isBoolean = function(obj) {
                return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
            };

            // Is a given value equal to null?
            _.isNull = function(obj) {
                return obj === null;
            };

            // Is a given variable undefined?
            _.isUndefined = function(obj) {
                return obj === void 0;
            };

            // Shortcut function for checking if an object has a given property directly
            // on itself (in other words, not on a prototype).
            _.has = function(obj, path) {
                if (!_.isArray(path)) {
                    return has(obj, path);
                }
                var length = path.length;
                for (var i = 0; i < length; i++) {
                    var key = path[i];
                    if (obj == null || !hasOwnProperty.call(obj, key)) {
                        return false;
                    }
                    obj = obj[key];
                }
                return !!length;
            };

            // Utility Functions
            // -----------------

            // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
            // previous owner. Returns a reference to the Underscore object.
            _.noConflict = function() {
                root._ = previousUnderscore;
                return this;
            };

            // Keep the identity function around for default iteratees.
            _.identity = function(value) {
                return value;
            };

            // Predicate-generating functions. Often useful outside of Underscore.
            _.constant = function(value) {
                return function() {
                    return value;
                };
            };

            _.noop = function(){};

            // Creates a function that, when passed an object, will traverse that object’s
            // properties down the given `path`, specified as an array of keys or indexes.
            _.property = function(path) {
                if (!_.isArray(path)) {
                    return shallowProperty(path);
                }
                return function(obj) {
                    return deepGet(obj, path);
                };
            };

            // Generates a function for a given object that returns a given property.
            _.propertyOf = function(obj) {
                if (obj == null) {
                    return function(){};
                }
                return function(path) {
                    return !_.isArray(path) ? obj[path] : deepGet(obj, path);
                };
            };

            // Returns a predicate for checking whether an object has a given set of
            // `key:value` pairs.
            _.matcher = _.matches = function(attrs) {
                attrs = _.extendOwn({}, attrs);
                return function(obj) {
                    return _.isMatch(obj, attrs);
                };
            };

            // Run a function **n** times.
            _.times = function(n, iteratee, context) {
                var accum = Array(Math.max(0, n));
                iteratee = optimizeCb(iteratee, context, 1);
                for (var i = 0; i < n; i++) accum[i] = iteratee(i);
                return accum;
            };

            // Return a random integer between min and max (inclusive).
            _.random = function(min, max) {
                if (max == null) {
                    max = min;
                    min = 0;
                }
                return min + Math.floor(Math.random() * (max - min + 1));
            };

            // A (possibly faster) way to get the current timestamp as an integer.
            _.now = Date.now || function() {
                return new Date().getTime();
            };

            // List of HTML entities for escaping.
            var escapeMap = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#x27;',
                '`': '&#x60;'
            };
            var unescapeMap = _.invert(escapeMap);

            // Functions for escaping and unescaping strings to/from HTML interpolation.
            var createEscaper = function(map) {
                var escaper = function(match) {
                    return map[match];
                };
                // Regexes for identifying a key that needs to be escaped.
                var source = '(?:' + _.keys(map).join('|') + ')';
                var testRegexp = RegExp(source);
                var replaceRegexp = RegExp(source, 'g');
                return function(string) {
                    string = string == null ? '' : '' + string;
                    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
                };
            };
            _.escape = createEscaper(escapeMap);
            _.unescape = createEscaper(unescapeMap);

            // Traverses the children of `obj` along `path`. If a child is a function, it
            // is invoked with its parent as context. Returns the value of the final
            // child, or `fallback` if any child is undefined.
            _.result = function(obj, path, fallback) {
                if (!_.isArray(path)) path = [path];
                var length = path.length;
                if (!length) {
                    return _.isFunction(fallback) ? fallback.call(obj) : fallback;
                }
                for (var i = 0; i < length; i++) {
                    var prop = obj == null ? void 0 : obj[path[i]];
                    if (prop === void 0) {
                        prop = fallback;
                        i = length; // Ensure we don't continue iterating.
                    }
                    obj = _.isFunction(prop) ? prop.call(obj) : prop;
                }
                return obj;
            };

            // Generate a unique integer id (unique within the entire client session).
            // Useful for temporary DOM ids.
            var idCounter = 0;
            _.uniqueId = function(prefix) {
                var id = ++idCounter + '';
                return prefix ? prefix + id : id;
            };

            // By default, Underscore uses ERB-style template delimiters, change the
            // following template settings to use alternative delimiters.
            _.templateSettings = {
                evaluate: /<%([\s\S]+?)%>/g,
                interpolate: /<%=([\s\S]+?)%>/g,
                escape: /<%-([\s\S]+?)%>/g
            };

            // When customizing `templateSettings`, if you don't want to define an
            // interpolation, evaluation or escaping regex, we need one that is
            // guaranteed not to match.
            var noMatch = /(.)^/;

            // Certain characters need to be escaped so that they can be put into a
            // string literal.
            var escapes = {
                "'": "'",
                '\\': '\\',
                '\r': 'r',
                '\n': 'n',
                '\u2028': 'u2028',
                '\u2029': 'u2029'
            };

            var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

            var escapeChar = function(match) {
                return '\\' + escapes[match];
            };

            // JavaScript micro-templating, similar to John Resig's implementation.
            // Underscore templating handles arbitrary delimiters, preserves whitespace,
            // and correctly escapes quotes within interpolated code.
            // NB: `oldSettings` only exists for backwards compatibility.
            _.template = function(text, settings, oldSettings) {
                if (!settings && oldSettings) settings = oldSettings;
                settings = _.defaults({}, settings, _.templateSettings);

                // Combine delimiters into one regular expression via alternation.
                var matcher = RegExp([
                    (settings.escape || noMatch).source,
                    (settings.interpolate || noMatch).source,
                    (settings.evaluate || noMatch).source
                ].join('|') + '|$', 'g');

                // Compile the template source, escaping string literals appropriately.
                var index = 0;
                var source = "__p+='";
                text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
                    index = offset + match.length;

                    if (escape) {
                        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
                    } else if (interpolate) {
                        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
                    } else if (evaluate) {
                        source += "';\n" + evaluate + "\n__p+='";
                    }

                    // Adobe VMs need the match returned to produce the correct offset.
                    return match;
                });
                source += "';\n";

                // If a variable is not specified, place data values in local scope.
                if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

                source = "var __t,__p='',__j=Array.prototype.join," +
                    "print=function(){__p+=__j.call(arguments,'');};\n" +
                    source + 'return __p;\n';

                var render;
                try {
                    render = new Function(settings.variable || 'obj', '_', source);
                } catch (e) {
                    e.source = source;
                    throw e;
                }

                var template = function(data) {
                    return render.call(this, data, _);
                };

                // Provide the compiled source as a convenience for precompilation.
                var argument = settings.variable || 'obj';
                template.source = 'function(' + argument + '){\n' + source + '}';

                return template;
            };

            // Add a "chain" function. Start chaining a wrapped Underscore object.
            _.chain = function(obj) {
                var instance = _(obj);
                instance._chain = true;
                return instance;
            };

            // OOP
            // ---------------
            // If Underscore is called as a function, it returns a wrapped object that
            // can be used OO-style. This wrapper holds altered versions of all the
            // underscore functions. Wrapped objects may be chained.

            // Helper function to continue chaining intermediate results.
            var chainResult = function(instance, obj) {
                return instance._chain ? _(obj).chain() : obj;
            };

            // Add your own custom functions to the Underscore object.
            _.mixin = function(obj) {
                _.each(_.functions(obj), function(name) {
                    var func = _[name] = obj[name];
                    _.prototype[name] = function() {
                        var args = [this._wrapped];
                        push.apply(args, arguments);
                        return chainResult(this, func.apply(_, args));
                    };
                });
                return _;
            };

            // Add all of the Underscore functions to the wrapper object.
            _.mixin(_);

            // Add all mutator Array functions to the wrapper.
            _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    var obj = this._wrapped;
                    method.apply(obj, arguments);
                    if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
                    return chainResult(this, obj);
                };
            });

            // Add all accessor Array functions to the wrapper.
            _.each(['concat', 'join', 'slice'], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    return chainResult(this, method.apply(this._wrapped, arguments));
                };
            });

            // Extracts the result from a wrapped and chained object.
            _.prototype.value = function() {
                return this._wrapped;
            };

            // Provide unwrapping proxy for some methods used in engine operations
            // such as arithmetic and JSON stringification.
            _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

            _.prototype.toString = function() {
                return String(this._wrapped);
            };
        }());
    });
    var underscore_1 = underscore._;

    // https://gist.github.com/bmershon/25a74f7b1c7cbd07e7456af1d2c07da1

    /**
     * This function create the pairs between node and its links.
     *
     * @param links
     * @returns [["nodeX,nodeY", Array(numberOfLinksRelatedToTheNodes)]]
     */
    function pairNodeLinks(links) {
        let nestedByNodes = {};
        links.forEach(l => {
            let sourceKey = l.source.join(',');
            if (!nestedByNodes[sourceKey]) {
                nestedByNodes[sourceKey] = [];
            }
            nestedByNodes[sourceKey].push(l);
            let targetKey = l.target.join(',');
            if (!nestedByNodes[targetKey]) {
                nestedByNodes[targetKey] = [];
            }
            nestedByNodes[targetKey].push(l);
        });
        //Pair the results
        let pairedResults = underscore.pairs(nestedByNodes);
        return pairedResults;
    }


    /**
     * This function returns corners (three vertices) of vertices of degree two in the for mat of
     * point1, point2, point3 => point1 is the the vertex with degree two (two edges connected to it are [point1, point2] and [point1, point3] (order of the points in each edge is not important)).
     * @param tree
     * @returns {*}
     */
    function getAllV2CornersFromTree(tree) {
        let pairedResults = pairNodeLinks(tree.links);
        //Get all pairs with length = 2 (V2)
        let allV2 = pairedResults.filter(p => p[1].length == 2);

        let allCorners = allV2.map(v2 => {
            let corner = [];
            //First point is the common vertice
            corner.push(v2[0].split(',').map(d => +d));//map(d=>+d) is to convert the strings into digits
            //Push the source or target if they are not the common vertices of the two edges
            v2[1].forEach(link => {
                if (link.source.join(',') != v2[0]) {
                    corner.push(link.source);
                } else {
                    corner.push(link.target);
                }
            });
            return corner;
        });
        return allCorners;
    }

    /**
     * This function returns all single degree vertices from a tree
     * @param tree
     */
    function getAllV1sFromTree(tree) {
        let pairedResults = pairNodeLinks(tree.links);
        //Get all pairs with length = 1 (V1)
        let allV1 = pairedResults.filter(p => p[1].length == 1);
        return allV1.map(v1 => v1[0].split(',').map(Number));
    }

    /**
     * This function returns all vertices with degree greater than or equal 2
     * @param tree
     */
    function getAllV2OrGreaterFromTree(tree) {
        let pairedResults = pairNodeLinks(tree.links);
        //Get all pairs with length >= 2 (V2)
        let allGTEV2 = pairedResults.filter(p => p[1].length >= 2);
        return allGTEV2.map(v => v[0].split(',').map(Number));
    }
    /**
     * Create a graph from mesh
     * @param triangles is inform of set of triangles as the result from delaunay triangulations
     */
    function createGraph(triangles) {

        function makeLink(sourceId, targetId, weight) {
            return {"source": sourceId, "target": targetId, "weight": weight};
        }

        let graph = {};
        graph.nodes = [];
        graph.links = [];
        //Creating nodes
        triangles.forEach(t => {
            for (let i = 0; i < 3; i++) {
                let id = t[i];
                if (!idExists(graph.nodes, id)) {
                    graph.nodes.push(makeNode(id));
                }
            }
        });

        //Creating links
        triangles.forEach(t => {
            for (let i = 0; i < 3; i++) {
                let p1 = t[i];
                let p2 = t[(i + 1) % 3];
                let id1 = p1;
                let id2 = p2;
                let dist = distance(p1, p2);
                let link = makeLink(id1, id2, dist);
                if (!linkExists(graph.links, link)) {
                    graph.links.push(link);
                }
            }
        });

        //TODO: may sort the id alphabetically => when creating => so we can just check 1 condition only.
        function linkExists(links, link) {
            let length = links.length;
            for (let i = length - 1; i >= 0; --i) {
                if (equalLinks(link, links[i])) {
                    return true;
                }
            }
            return false;
        }

        return graph;
    }

    function distance(a, b) {
        let dx = a[0] - b[0],
            dy = a[1] - b[1];
        //For computer storage issue, some coordinates of the same distance may return different distances if we use long floating point
        //So take only 10 digits after the floating points=> this is precise enough and still have the same values for two different lines of the same distance
        return Math.round(Math.sqrt((dx * dx) + (dy * dy)) * Math.pow(10, 10)) / Math.pow(10, 10);
    }

    function equalPoints(id1, id2) {
        return (id1[0] === id2[0] && id1[1] === id2[1]);
    }

    function equalLinks(l1, l2) {
        return (equalPoints(l1.source, l2.source) && equalPoints(l1.target, l2.target)) ||
            (equalPoints(l1.source, l2.target) && equalPoints(l1.target, l2.source));
    }

    function idExists(nodes, id) {
        let length = nodes.length;
        for (let i = length - 1; i >= 0; --i) {
            let node = nodes[i];
            if (equalPoints(node.id, id)) {
                return true;
            }
        }
        return false;
    }

    function makeNode(id) {
        return {"id": id};
    }

    /**
     * create the mst
     * @param graph: in form of nodes and links
     * @returns {{nodes: (selection_nodes|nodes), links: Array}}
     */
    function mst(graph) {
        let vertices = graph.nodes,
            edges = graph.links.slice(0),
            selectedEdges = [],
            forest = new DisjointSet();

        // Each vertex begins "disconnected" and isolated from all the others.
        vertices.forEach((vertex) => {
            forest.makeSet(vertex.id);
        });

        // Sort edges in descending order of weight. We will pop edges beginning
        // from the end of the array.
        edges.sort((a, b) => {
            return -(a.weight - b.weight);
        });

        while (edges.length && forest.size() > 1) {
            let edge = edges.pop();

            if (forest.find(edge.source) !== forest.find(edge.target)) {
                forest.union(edge.source, edge.target);
                selectedEdges.push(edge);
            }
        }

        return {
            nodes: vertices,
            links: selectedEdges
        }
    }


    function DisjointSet() {
        this.index_ = {};
    }

    function Node(id) {
        this.id_ = id;
        this.parent_ = this;
        this.rank_ = 0;
    }

    DisjointSet.prototype.makeSet = function (id) {
        if (!this.index_[id]) {
            let created = new Node(id);
            this.index_[id] = created;
        }
    };

    // Returns the id of the representative element of this set that (id)
    // belongs to.
    DisjointSet.prototype.find = function (id) {
        if (this.index_[id] === undefined) {
            return undefined;
        }

        let current = this.index_[id].parent_;
        while (current !== current.parent_) {
            current = current.parent_;
        }
        return current.id_;
    };

    DisjointSet.prototype.union = function (x, y) {
        let xRoot = this.index_[this.find(x)];
        let yRoot = this.index_[this.find(y)];

        if (xRoot === undefined || yRoot === undefined || xRoot === yRoot) {
            // x and y already belong to the same set.
            return;
        }

        if (xRoot.rank < yRoot.rank) { // Move x into the set y is a member of.
            xRoot.parent_ = yRoot;
        } else if (yRoot.rank_ < xRoot.rank_) { // Move y into the set x is a member of.
            yRoot.parent_ = xRoot;
        } else { // Arbitrarily choose to move y into the set x is a member of.
            yRoot.parent_ = xRoot;
            xRoot.rank_++;
        }
    };

    // Returns the current number of disjoint sets.
    DisjointSet.prototype.size = function () {
        let uniqueIndices = {};
        Object.keys(this.index_).forEach((id) => {
            uniqueIndices[id] = true;
        });
        return Object.keys(uniqueIndices).length;
    };

    /* @flow */

    /* @flow */

    /**
     * This computes the maximum number in an array.
     *
     * This runs on `O(n)`, linear time in respect to the array
     *
     * @param {Array<number>} x sample of one or more data points
     * @returns {number} maximum value
     * @throws {Error} if the the length of x is less than one
     * @example
     * max([1, 2, 3, 4]);
     * // => 4
     */
    function max(x /*: Array<number> */) /*:number*/ {

        if (x.length === 0) {
            throw new Error('max requires at least one data point');
        }

        var value = x[0];
        for (var i = 1; i < x.length; i++) {
            // On the first iteration of this loop, max is
            // undefined and is thus made the maximum element in the array
            if (x[i] > value) {
                value = x[i];
            }
        }
        return value;
    }

    /* @flow */

    /**
     * This is the internal implementation of quantiles: when you know
     * that the order is sorted, you don't need to re-sort it, and the computations
     * are faster.
     *
     * @param {Array<number>} x sample of one or more data points
     * @param {number} p desired quantile: a number between 0 to 1, inclusive
     * @returns {number} quantile value
     * @throws {Error} if p ix outside of the range from 0 to 1
     * @throws {Error} if x is empty
     * @example
     * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9
     */
    function quantileSorted(x /*: Array<number> */, p /*: number */)/*: number */ {
        var idx = x.length * p;
        if (x.length === 0) {
            throw new Error('quantile requires at least one data point.');
        } else if (p < 0 || p > 1) {
            throw new Error('quantiles must be between 0 and 1');
        } else if (p === 1) {
            // If p is 1, directly return the last element
            return x[x.length - 1];
        } else if (p === 0) {
            // If p is 0, directly return the first element
            return x[0];
        } else if (idx % 1 !== 0) {
            // If p is not integer, return the next element in array
            return x[Math.ceil(idx) - 1];
        } else if (x.length % 2 === 0) {
            // If the list has even-length, we'll take the average of this number
            // and the next value, if there is one
            return (x[idx - 1] + x[idx]) / 2;
        } else {
            // Finally, in the simple case of an integer value
            // with an odd-length list, return the x value at the index.
            return x[idx];
        }
    }

    /* @flow */

    /**
     * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.
     * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.
     *
     * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm
     *
     * @param {Array<number>} arr input array
     * @param {number} k pivot index
     * @param {number} [left] left index
     * @param {number} [right] right index
     * @returns {void} mutates input array
     * @example
     * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];
     * quickselect(arr, 8);
     * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]
     */
    function quickselect(arr/*: Array<number> */, k/*: number */, left/*: ?number */, right/*: ?number */)/*: void */ {
        left = left || 0;
        right = right || (arr.length - 1);

        while (right > left) {
            // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time
            if (right - left > 600) {
                var n = right - left + 1;
                var m = k - left + 1;
                var z = Math.log(n);
                var s = 0.5 * Math.exp(2 * z / 3);
                var sd = 0.5 * Math.sqrt(z * s * (n - s) / n);
                if (m - n / 2 < 0) sd *= -1;
                var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
                var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
                quickselect(arr, k, newLeft, newRight);
            }

            var t = arr[k];
            var i = left;
            var j = right;

            swap(arr, left, k);
            if (arr[right] > t) swap(arr, left, right);

            while (i < j) {
                swap(arr, i, j);
                i++;
                j--;
                while (arr[i] < t) i++;
                while (arr[j] > t) j--;
            }

            if (arr[left] === t) swap(arr, left, j);
            else {
                j++;
                swap(arr, j, right);
            }

            if (j <= k) left = j + 1;
            if (k <= j) right = j - 1;
        }
    }

    function swap(arr, i, j) {
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /* @flow */

    /**
     * The [quantile](https://en.wikipedia.org/wiki/Quantile):
     * this is a population quantile, since we assume to know the entire
     * dataset in this library. This is an implementation of the
     * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)
     * algorithm from wikipedia.
     *
     * Sample is a one-dimensional array of numbers,
     * and p is either a decimal number from 0 to 1 or an array of decimal
     * numbers from 0 to 1.
     * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing
     * with decimal values.
     * When p is an array, the result of the function is also an array containing the appropriate
     * quantiles in input order
     *
     * @param {Array<number>} x sample of one or more numbers
     * @param {Array<number> | number} p the desired quantile, as a number between 0 and 1
     * @returns {number} quantile
     * @example
     * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9
     */
    function quantile(x/*: Array<number> */, p/*: Array<number> | number */)/*: Array<number> | number */ {
        var copy = x.slice();

        if (Array.isArray(p)) {
            // rearrange elements so that each element corresponding to a requested
            // quantile is on a place it would be if the array was fully sorted
            multiQuantileSelect(copy, p);
            // Initialize the result array
            var results = [];
            // For each requested quantile
            for (var i = 0; i < p.length; i++) {
                results[i] = quantileSorted(copy, p[i]);
            }
            return results;
        } else {
            var idx = quantileIndex(copy.length, p);
            quantileSelect(copy, idx, 0, copy.length - 1);
            return quantileSorted(copy, p);
        }
    }

    function quantileSelect(arr, k, left, right) {
        if (k % 1 === 0) {
            quickselect(arr, k, left, right);
        } else {
            k = Math.floor(k);
            quickselect(arr, k, left, right);
            quickselect(arr, k + 1, k + 1, right);
        }
    }

    function multiQuantileSelect(arr, p) {
        var indices = [0];
        for (var i = 0; i < p.length; i++) {
            indices.push(quantileIndex(arr.length, p[i]));
        }
        indices.push(arr.length - 1);
        indices.sort(compare);

        var stack = [0, indices.length - 1];

        while (stack.length) {
            var r = Math.ceil(stack.pop());
            var l = Math.floor(stack.pop());
            if (r - l <= 1) continue;

            var m = Math.floor((l + r) / 2);
            quantileSelect(arr, indices[m], indices[l], indices[r]);

            stack.push(l, m, m, r);
        }
    }

    function compare(a, b) {
        return a - b;
    }

    function quantileIndex(len /*: number */, p /*: number */)/*:number*/ {
        var idx = len * p;
        if (p === 1) {
            // If p is 1, directly return the last index
            return len - 1;
        } else if (p === 0) {
            // If p is 0, directly return the first index
            return 0;
        } else if (idx % 1 !== 0) {
            // If index is not integer, return the next index in array
            return Math.ceil(idx) - 1;
        } else if (len % 2 === 0) {
            // If the list has even-length, we'll return the middle of two indices
            // around quantile to indicate that we need an average value of the two
            return idx - 0.5;
        } else {
            // Finally, in the simple case of an integer index
            // with an odd-length list, return the index
            return idx;
        }
    }
    var LOGSQRT2PI = Math.log(Math.sqrt(2 * Math.PI));

    /* @flow */

    var SQRT_2PI = Math.sqrt(2 * Math.PI);

    /* @flow */

    var SQRT_2PI$1 = Math.sqrt(2 * Math.PI);

    class Clumpy {
        constructor(tree) {
            //Clone the tree to avoid modifying it
            this.tree = JSON.parse(JSON.stringify(tree));
        }

        /**
         * Returns clumpy score
         * @returns {number}
         */
        score() {
            let allRuntRatios = [];
            this.tree.links.forEach(link =>{
                let rg = this.runtGraph(link);
                if(rg.length>0){
                    allRuntRatios.push(this.maxLength(rg)/link.weight);
                }
            });
            if(allRuntRatios.length>0){
                //Only if there are some runt graphs
                return max(allRuntRatios.map(rr=>1-rr));
            }else{
                //In case all lengths are equal => then the score is 0
                return 0;
            }
        }
        // score() {
        //     return max(this.tree.links.map(link=>1-this.maxLength(this.runtGraph(link))/link.weight));
        // }
        // runtGraph(link){
        //     let greaterOrEqualLinks = this.tree.links.filter(l=>l.weight >= link.weight);
        //     //Remove the currently checking link.
        //     greaterOrEqualLinks = greaterOrEqualLinks.filter(l=>!equalLinks(l, link));
        //     let pairedResults = pairNodeLinks(greaterOrEqualLinks);
        //
        //     //Process the source side.
        //     let sourceConnectedNodes = [link.source];
        //     let sourceConnectedLinks = this.getConnectedLinks(sourceConnectedNodes, pairedResults);
        //
        //     let targetConnectedNodes = [link.target];
        //     let targetConnectedLinks = this.getConnectedLinks(targetConnectedNodes, pairedResults);
        //
        //     return sourceConnectedLinks.length < targetConnectedLinks.length?sourceConnectedLinks:targetConnectedLinks;
        // }
        runtGraph(link){
            let greaterOrEqualLinks = this.tree.links.filter(l=>l.weight < link.weight);
            //Remove the currently checking link.
            greaterOrEqualLinks = greaterOrEqualLinks.filter(l=>!equalLinks(l, link));
            let pairedResults = pairNodeLinks(greaterOrEqualLinks);

            //Process the source side.
            let sourceConnectedNodes = [link.source];
            let sourceConnectedLinks = this.getConnectedLinks(sourceConnectedNodes, pairedResults);

            let targetConnectedNodes = [link.target];
            let targetConnectedLinks = this.getConnectedLinks(targetConnectedNodes, pairedResults);

            return sourceConnectedLinks.length < targetConnectedLinks.length?sourceConnectedLinks:targetConnectedLinks;
        }


        getConnectedLinks(connectedNodes, pairedResults) {
            let processedNodes = [];
            let connectedLinks = [];
            while (connectedNodes.length > 0) {
                //Can stop earlier if this is having more than half of the links in the whole tree.
                if(connectedLinks.length > this.tree.links.length + 1){
                    break;
                }
                let firstNode = underscore.first(connectedNodes);
                //Removed the processed nodes
                connectedNodes = underscore.without(connectedNodes, firstNode);
                //Add it to the processed node
                processedNodes.push(firstNode);
                //Find the edges connected to that node.
                let result = pairedResults.find(p => p[0] === firstNode.join(","));
                let links = result?result[1]:[];
                connectedLinks = connectedLinks.concat(links);
                //Add new nodes to be processed
                links.forEach(l => {
                    //If the node in the connected link is not processed => then add it to be processed (to expand later on).
                    if (!pointExists(processedNodes, l.source)) {
                        connectedNodes.push(l.source);
                    }
                    if(!pointExists(processedNodes, l.target)) {
                        connectedNodes.push(l.target);
                    }
                });
            }
            return connectedLinks;
        }

        maxLength(runtGraph){
            if(runtGraph.length===0){
                return 0;
            }
            return max(runtGraph.map(l=>l.weight));
        }
    }
    function pointExists(points, point){
        for (let i = 0; i < points.length; i++) {
            let point1 = points[i];
            if (equalPoints(point1, point)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Check if set of unique points (need to make sure the points are unique) are in a line
     * @param points
     * @returns {boolean}
     */
    function isA2DLine(points) {
        let x1 = points[0][0];
        let y1 = points[0][1];
        let x2 = points[1][0];
        let y2 = points[1][1];

        for (let i = 2; i < points.length; i++) {
            let x3 = points[i][0];
            let y3 = points[i][1];
            if (((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)) !== 0) {
                return false;
            }
        }
        return true;
    }

    const EPSILON = Math.pow(2, -52);

    class Delaunator {

        static from(points, getX, getY) {
            if (!getX) getX = defaultGetX;
            if (!getY) getY = defaultGetY;

            const n = points.length;
            const coords = new Float64Array(n * 2);

            for (let i = 0; i < n; i++) {
                const p = points[i];
                coords[2 * i] = getX(p);
                coords[2 * i + 1] = getY(p);
            }

            return new Delaunator(coords);
        }

        constructor(coords) {
            let minX = Infinity;
            let minY = Infinity;
            let maxX = -Infinity;
            let maxY = -Infinity;

            const n = coords.length >> 1;
            const ids = this.ids = new Uint32Array(n);

            if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');

            this.coords = coords;

            for (let i = 0; i < n; i++) {
                const x = coords[2 * i];
                const y = coords[2 * i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
                ids[i] = i;
            }

            const cx = (minX + maxX) / 2;
            const cy = (minY + maxY) / 2;

            let minDist = Infinity;
            let i0, i1, i2;

            // pick a seed point close to the centroid
            for (let i = 0; i < n; i++) {
                const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist) {
                    i0 = i;
                    minDist = d;
                }
            }
            const i0x = coords[2 * i0];
            const i0y = coords[2 * i0 + 1];

            minDist = Infinity;

            // find the point closest to the seed
            for (let i = 0; i < n; i++) {
                if (i === i0) continue;
                const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist && d > 0) {
                    i1 = i;
                    minDist = d;
                }
            }
            let i1x = coords[2 * i1];
            let i1y = coords[2 * i1 + 1];

            let minRadius = Infinity;

            // find the third point which forms the smallest circumcircle with the first two
            for (let i = 0; i < n; i++) {
                if (i === i0 || i === i1) continue;
                const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
                if (r < minRadius) {
                    i2 = i;
                    minRadius = r;
                }
            }
            let i2x = coords[2 * i2];
            let i2y = coords[2 * i2 + 1];

            if (minRadius === Infinity) {
                throw new Error('No Delaunay triangulation exists for this input.');
            }

            // swap the order of the seed points for counter-clockwise orientation
            if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
                const i = i1;
                const x = i1x;
                const y = i1y;
                i1 = i2;
                i1x = i2x;
                i1y = i2y;
                i2 = i;
                i2x = x;
                i2y = y;
            }

            const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
            this._cx = center.x;
            this._cy = center.y;

            // sort the points by distance from the seed triangle circumcenter
            quicksort(ids, coords, 0, ids.length - 1, center.x, center.y);

            // initialize a hash table for storing edges of the advancing convex hull
            this._hashSize = Math.ceil(Math.sqrt(n));
            this._hash = new Array(this._hashSize);

            // initialize a circular doubly-linked list that will hold an advancing convex hull
            let e = this.hull = insertNode(coords, i0);
            this._hashEdge(e);
            e.t = 0;
            e = insertNode(coords, i1, e);
            this._hashEdge(e);
            e.t = 1;
            e = insertNode(coords, i2, e);
            this._hashEdge(e);
            e.t = 2;

            const maxTriangles = 2 * n - 5;
            const triangles = this.triangles = new Uint32Array(maxTriangles * 3);
            const halfedges = this.halfedges = new Int32Array(maxTriangles * 3);

            this.trianglesLen = 0;

            this._addTriangle(i0, i1, i2, -1, -1, -1);

            for (let k = 0, xp, yp; k < ids.length; k++) {
                const i = ids[k];
                const x = coords[2 * i];
                const y = coords[2 * i + 1];

                // skip near-duplicate points
                if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
                xp = x;
                yp = y;

                // skip seed triangle points
                if (i === i0 || i === i1 || i === i2) continue;

                // find a visible edge on the convex hull using edge hash
                const startKey = this._hashKey(x, y);
                let key = startKey;
                let start;
                do {
                    start = this._hash[key];
                    key = (key + 1) % this._hashSize;
                } while ((!start || start.removed) && key !== startKey);

                start = start.prev;
                e = start;
                while (!orient(x, y, e.x, e.y, e.next.x, e.next.y)) {
                    e = e.next;
                    if (e === start) {
                        e = null;
                        break;
                    }
                }
                // likely a near-duplicate point; skip it
                if (!e) continue;

                const walkBack = e === start;

                // add the first triangle from the point
                let t = this._addTriangle(e.i, i, e.next.i, -1, -1, e.t);

                e.t = t; // keep track of boundary triangles on the hull
                e = insertNode(coords, i, e);

                // recursively flip triangles from the point until they satisfy the Delaunay condition
                e.t = this._legalize(t + 2);

                // walk forward through the hull, adding more triangles and flipping recursively
                let q = e.next;
                while (orient(x, y, q.x, q.y, q.next.x, q.next.y)) {
                    t = this._addTriangle(q.i, i, q.next.i, q.prev.t, -1, q.t);
                    q.prev.t = this._legalize(t + 2);
                    this.hull = removeNode(q);
                    q = q.next;
                }

                if (walkBack) {
                    // walk backward from the other side, adding more triangles and flipping
                    q = e.prev;
                    while (orient(x, y, q.prev.x, q.prev.y, q.x, q.y)) {
                        t = this._addTriangle(q.prev.i, i, q.i, -1, q.t, q.prev.t);
                        this._legalize(t + 2);
                        q.prev.t = t;
                        this.hull = removeNode(q);
                        q = q.prev;
                    }
                }

                // save the two new edges in the hash table
                this._hashEdge(e);
                this._hashEdge(e.prev);
            }

            // trim typed triangle mesh arrays
            this.triangles = triangles.subarray(0, this.trianglesLen);
            this.halfedges = halfedges.subarray(0, this.trianglesLen);
        }

        _hashEdge(e) {
            this._hash[this._hashKey(e.x, e.y)] = e;
        }

        _hashKey(x, y) {
            return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
        }

        _legalize(a) {
            const {triangles, coords, halfedges} = this;

            const b = halfedges[a];

            /* if the pair of triangles doesn't satisfy the Delaunay condition
	         * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
	         * then do the same check/flip recursively for the new pair of triangles
	         *
	         *           pl                    pl
	         *          /||\                  /  \
	         *       al/ || \bl            al/    \a
	         *        /  ||  \              /      \
	         *       /  a||b  \    flip    /___ar___\
	         *     p0\   ||   /p1   =>   p0\---bl---/p1
	         *        \  ||  /              \      /
	         *       ar\ || /br             b\    /br
	         *          \||/                  \  /
	         *           pr                    pr
	         */
            const a0 = a - a % 3;
            const b0 = b - b % 3;

            const al = a0 + (a + 1) % 3;
            const ar = a0 + (a + 2) % 3;
            const bl = b0 + (b + 2) % 3;

            if (b === -1) return ar;

            const p0 = triangles[ar];
            const pr = triangles[a];
            const pl = triangles[al];
            const p1 = triangles[bl];

            const illegal = inCircle(
                coords[2 * p0], coords[2 * p0 + 1],
                coords[2 * pr], coords[2 * pr + 1],
                coords[2 * pl], coords[2 * pl + 1],
                coords[2 * p1], coords[2 * p1 + 1]);

            if (illegal) {
                triangles[a] = p1;
                triangles[b] = p0;

                const hbl = halfedges[bl];

                // edge swapped on the other side of the hull (rare); fix the halfedge reference
                if (hbl === -1) {
                    let e = this.hull;
                    do {
                        if (e.t === bl) {
                            e.t = a;
                            break;
                        }
                        e = e.next;
                    } while (e !== this.hull);
                }
                this._link(a, hbl);
                this._link(b, halfedges[ar]);
                this._link(ar, bl);

                const br = b0 + (b + 1) % 3;

                this._legalize(a);
                return this._legalize(br);
            }

            return ar;
        }

        _link(a, b) {
            this.halfedges[a] = b;
            if (b !== -1) this.halfedges[b] = a;
        }

        // add a new triangle given vertex indices and adjacent half-edge ids
        _addTriangle(i0, i1, i2, a, b, c) {
            const t = this.trianglesLen;

            this.triangles[t] = i0;
            this.triangles[t + 1] = i1;
            this.triangles[t + 2] = i2;

            this._link(t, a);
            this._link(t + 1, b);
            this._link(t + 2, c);

            this.trianglesLen += 3;

            return t;
        }
    }

    // monotonically increases with real angle, but doesn't need expensive trigonometry
    function pseudoAngle(dx, dy) {
        const p = dx / (Math.abs(dx) + Math.abs(dy));
        return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
    }

    function dist(ax, ay, bx, by) {
        const dx = ax - bx;
        const dy = ay - by;
        return dx * dx + dy * dy;
    }

    function orient(px, py, qx, qy, rx, ry) {
        return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;
    }

    function inCircle(ax, ay, bx, by, cx, cy, px, py) {
        const dx = ax - px;
        const dy = ay - py;
        const ex = bx - px;
        const ey = by - py;
        const fx = cx - px;
        const fy = cy - py;

        const ap = dx * dx + dy * dy;
        const bp = ex * ex + ey * ey;
        const cp = fx * fx + fy * fy;

        return dx * (ey * cp - bp * fy) -
            dy * (ex * cp - bp * fx) +
            ap * (ex * fy - ey * fx) < 0;
    }

    function circumradius(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = dx * ey - dy * ex;

        const x = (ey * bl - dy * cl) * 0.5 / d;
        const y = (dx * cl - ex * bl) * 0.5 / d;

        return bl && cl && d && (x * x + y * y) || Infinity;
    }

    function circumcenter(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = dx * ey - dy * ex;

        const x = ax + (ey * bl - dy * cl) * 0.5 / d;
        const y = ay + (dx * cl - ex * bl) * 0.5 / d;

        return {x, y};
    }

    // create a new node in a doubly linked list
    function insertNode(coords, i, prev) {
        const node = {
            i,
            x: coords[2 * i],
            y: coords[2 * i + 1],
            t: 0,
            prev: null,
            next: null,
            removed: false
        };

        if (!prev) {
            node.prev = node;
            node.next = node;

        } else {
            node.next = prev.next;
            node.prev = prev;
            prev.next.prev = node;
            prev.next = node;
        }
        return node;
    }

    function removeNode(node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
        node.removed = true;
        return node.prev;
    }

    function quicksort(ids, coords, left, right, cx, cy) {
        let i, j, temp;

        if (right - left <= 20) {
            for (i = left + 1; i <= right; i++) {
                temp = ids[i];
                j = i - 1;
                while (j >= left && compare$1(coords, ids[j], temp, cx, cy) > 0) ids[j + 1] = ids[j--];
                ids[j + 1] = temp;
            }
        } else {
            const median = (left + right) >> 1;
            i = left + 1;
            j = right;
            swap$1(ids, median, i);
            if (compare$1(coords, ids[left], ids[right], cx, cy) > 0) swap$1(ids, left, right);
            if (compare$1(coords, ids[i], ids[right], cx, cy) > 0) swap$1(ids, i, right);
            if (compare$1(coords, ids[left], ids[i], cx, cy) > 0) swap$1(ids, left, i);

            temp = ids[i];
            while (true) {
                do i++; while (compare$1(coords, ids[i], temp, cx, cy) < 0);
                do j--; while (compare$1(coords, ids[j], temp, cx, cy) > 0);
                if (j < i) break;
                swap$1(ids, i, j);
            }
            ids[left + 1] = ids[j];
            ids[j] = temp;

            if (right - i + 1 >= j - left) {
                quicksort(ids, coords, i, right, cx, cy);
                quicksort(ids, coords, left, j - 1, cx, cy);
            } else {
                quicksort(ids, coords, left, j - 1, cx, cy);
                quicksort(ids, coords, i, right, cx, cy);
            }
        }
    }

    function compare$1(coords, i, j, cx, cy) {
        const d1 = dist(coords[2 * i], coords[2 * i + 1], cx, cy);
        const d2 = dist(coords[2 * j], coords[2 * j + 1], cx, cy);
        return (d1 - d2) || (coords[2 * i] - coords[2 * j]) || (coords[2 * i + 1] - coords[2 * j + 1]);
    }

    function swap$1(arr, i, j) {
        const tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    function defaultGetX(p) {
        return p[0];
    }
    function defaultGetY(p) {
        return p[1];
    }

    const epsilon$1 = 1e-6;

    class Path {
        constructor() {
            this._x0 = this._y0 = // start of current subpath
                this._x1 = this._y1 = null; // end of current subpath
            this._ = "";
        }
        moveTo(x, y) {
            this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
        }
        closePath() {
            if (this._x1 !== null) {
                this._x1 = this._x0, this._y1 = this._y0;
                this._ += "Z";
            }
        }
        lineTo(x, y) {
            this._ += `L${this._x1 = +x},${this._y1 = +y}`;
        }
        arc(x, y, r) {
            x = +x, y = +y, r = +r;
            const x0 = x + r;
            const y0 = y;
            if (r < 0) throw new Error("negative radius");
            if (this._x1 === null) this._ += `M${x0},${y0}`;
            else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) this._ += "L" + x0 + "," + y0;
            if (!r) return;
            this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
        }
        rect(x, y, w, h) {
            this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
        }
        value() {
            return this._ || null;
        }
    }

    class Polygon {
        constructor() {
            this._ = [];
        }
        moveTo(x, y) {
            this._.push([x, y]);
        }
        closePath() {
            this._.push(this._[0].slice());
        }
        lineTo(x, y) {
            this._.push([x, y]);
        }
        value() {
            return this._.length ? this._ : null;
        }
    }

    class Voronoi {
        constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
            if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
            const {points, hull, triangles} = this.delaunay = delaunay;
            const circumcenters = this.circumcenters = new Float64Array(triangles.length / 3 * 2);
            const vectors = this.vectors = new Float64Array(points.length * 2);
            this.xmax = xmax, this.xmin = xmin;
            this.ymax = ymax, this.ymin = ymin;

            // Compute circumcenters.
            for (let i = 0, j = 0, n = triangles.length; i < n; i += 3, j += 2) {
                const t1 = triangles[i] * 2;
                const t2 = triangles[i + 1] * 2;
                const t3 = triangles[i + 2] * 2;
                const x1 = points[t1];
                const y1 = points[t1 + 1];
                const x2 = points[t2];
                const y2 = points[t2 + 1];
                const x3 = points[t3];
                const y3 = points[t3 + 1];
                const a2 = x1 - x2;
                const a3 = x1 - x3;
                const b2 = y1 - y2;
                const b3 = y1 - y3;
                const d1 = x1 * x1 + y1 * y1;
                const d2 = d1 - x2 * x2 - y2 * y2;
                const d3 = d1 - x3 * x3 - y3 * y3;
                const ab = (a3 * b2 - a2 * b3) * 2;
                circumcenters[j] = (b2 * d3 - b3 * d2) / ab;
                circumcenters[j + 1] = (a3 * d2 - a2 * d3) / ab;
            }

            // Compute exterior cell rays.
            let node = hull;
            let p0, p1 = node.i * 4;
            let x0, x1 = node.x;
            let y0, y1 = node.y;
            do {
                node = node.next, p0 = p1, x0 = x1, y0 = y1, p1 = node.i * 4, x1 = node.x, y1 = node.y;
                vectors[p0 + 2] = vectors[p1] = y0 - y1;
                vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
            } while (node !== hull);
        }
        render(context) {
            const buffer = context == null ? context = new Path : undefined;
            const {delaunay: {halfedges, hull}, circumcenters, vectors} = this;
            for (let i = 0, n = halfedges.length; i < n; ++i) {
                const j = halfedges[i];
                if (j < i) continue;
                const ti = Math.floor(i / 3) * 2;
                const tj = Math.floor(j / 3) * 2;
                const xi = circumcenters[ti];
                const yi = circumcenters[ti + 1];
                const xj = circumcenters[tj];
                const yj = circumcenters[tj + 1];
                this._renderSegment(xi, yi, xj, yj, context);
            }
            let node = hull;
            do {
                node = node.next;
                const t = Math.floor(node.t / 3) * 2;
                const x = circumcenters[t];
                const y = circumcenters[t + 1];
                const v = node.i * 4;
                const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
                if (p) this._renderSegment(x, y, p[0], p[1], context);
            } while (node !== hull);
            return buffer && buffer.value();
        }
        renderBounds(context) {
            const buffer = context == null ? context = new Path : undefined;
            context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
            return buffer && buffer.value();
        }
        renderCell(i, context) {
            const buffer = context == null ? context = new Path : undefined;
            const points = this._clip(i);
            if (points === null) return;
            context.moveTo(points[0], points[1]);
            for (let i = 2, n = points.length; i < n; i += 2) {
                context.lineTo(points[i], points[i + 1]);
            }
            context.closePath();
            return buffer && buffer.value();
        }
        *cellPolygons() {
            const {delaunay: {points}} = this;
            for (let i = 0, n = points.length / 2; i < n; ++i) {
                const cell = this.cellPolygon(i);
                if (cell) yield cell;
            }
        }
        cellPolygon(i) {
            const polygon = new Polygon;
            this.renderCell(i, polygon);
            return polygon.value();
        }
        _renderSegment(x0, y0, x1, y1, context) {
            let S;
            const c0 = this._regioncode(x0, y0);
            const c1 = this._regioncode(x1, y1);
            if (c0 === 0 && c1 === 0) {
                context.moveTo(x0, y0);
                context.lineTo(x1, y1);
            } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
                context.moveTo(S[0], S[1]);
                context.lineTo(S[2], S[3]);
            }
        }
        contains(i, x, y) {
            if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
            return this.delaunay._step(i, x, y) === i;
        }
        _cell(i) {
            const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;
            const e0 = inedges[i];
            if (e0 === -1) return null; // coincident point
            const points = [];
            let e = e0;
            do {
                const t = Math.floor(e / 3);
                points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
                e = e % 3 === 2 ? e - 2 : e + 1;
                if (triangles[e] !== i) break; // bad triangulation
                e = halfedges[e];
            } while (e !== e0 && e !== -1);
            return points;
        }
        _clip(i) {
            const points = this._cell(i);
            if (points === null) return null;
            const {vectors: V} = this;
            const v = i * 4;
            return V[v] || V[v + 1]
                ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])
                : this._clipFinite(i, points);
        }
        _clipFinite(i, points) {
            const n = points.length;
            let P = null;
            let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
            let c0, c1 = this._regioncode(x1, y1);
            let e0, e1;
            for (let j = 0; j < n; j += 2) {
                x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
                c0 = c1, c1 = this._regioncode(x1, y1);
                if (c0 === 0 && c1 === 0) {
                    e0 = e1, e1 = 0;
                    if (P) P.push(x1, y1);
                    else P = [x1, y1];
                } else {
                    let S, sx0, sy0, sx1, sy1;
                    if (c0 === 0) {
                        if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
                        [sx0, sy0, sx1, sy1] = S;
                    } else {
                        if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
                        [sx1, sy1, sx0, sy0] = S;
                        e0 = e1, e1 = this._edgecode(sx0, sy0);
                        if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                        if (P) P.push(sx0, sy0);
                        else P = [sx0, sy0];
                    }
                    e0 = e1, e1 = this._edgecode(sx1, sy1);
                    if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                    if (P) P.push(sx1, sy1);
                    else P = [sx1, sy1];
                }
            }
            if (P) {
                e0 = e1, e1 = this._edgecode(P[0], P[1]);
                if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
                return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
            }
            return P;
        }
        _clipSegment(x0, y0, x1, y1, c0, c1) {
            while (true) {
                if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
                if (c0 & c1) return null;
                let x, y, c = c0 || c1;
                if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
                else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
                else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
                else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
                if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
                else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
            }
        }
        _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
            let P = Array.from(points), p;
            if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
            if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
            if (P = this._clipFinite(i, P)) {
                for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
                    c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
                    if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
                }
            } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
                P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
            }
            return P;
        }
        _edge(i, e0, e1, P, j) {
            while (e0 !== e1) {
                let x, y;
                switch (e0) {
                    case 0b0101: e0 = 0b0100; continue; // top-left
                    case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top
                    case 0b0110: e0 = 0b0010; continue; // top-right
                    case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right
                    case 0b1010: e0 = 0b1000; continue; // bottom-right
                    case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom
                    case 0b1001: e0 = 0b0001; continue; // bottom-left
                    case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left
                }
                if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
                    P.splice(j, 0, x, y), j += 2;
                }
            }
            return j;
        }
        _project(x0, y0, vx, vy) {
            let t = Infinity, c, x, y;
            if (vy < 0) { // top
                if (y0 <= this.ymin) return null;
                if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
            } else if (vy > 0) { // bottom
                if (y0 >= this.ymax) return null;
                if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
            }
            if (vx > 0) { // right
                if (x0 >= this.xmax) return null;
                if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
            } else if (vx < 0) { // left
                if (x0 <= this.xmin) return null;
                if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
            }
            return [x, y];
        }
        _edgecode(x, y) {
            return (x === this.xmin ? 0b0001
                : x === this.xmax ? 0b0010 : 0b0000)
                | (y === this.ymin ? 0b0100
                    : y === this.ymax ? 0b1000 : 0b0000);
        }
        _regioncode(x, y) {
            return (x < this.xmin ? 0b0001
                : x > this.xmax ? 0b0010 : 0b0000)
                | (y < this.ymin ? 0b0100
                    : y > this.ymax ? 0b1000 : 0b0000);
        }
    }

    const tau = 2 * Math.PI;

    function pointX(p) {
        return p[0];
    }

    function pointY(p) {
        return p[1];
    }

    class Delaunay {
        constructor(points) {
            const {halfedges, hull, triangles} = new Delaunator(points);
            this.points = points;
            this.halfedges = halfedges;
            this.hull = hull;
            this.triangles = triangles;
            const inedges = this.inedges = new Int32Array(points.length / 2).fill(-1);
            const outedges = this.outedges = new Int32Array(points.length / 2).fill(-1);

            // Compute an index from each point to an (arbitrary) incoming halfedge.
            for (let e = 0, n = halfedges.length; e < n; ++e) {
                inedges[triangles[e % 3 === 2 ? e - 2 : e + 1]] = e;
            }

            // For points on the hull, index both the incoming and outgoing halfedges.
            let node0, node1 = hull;
            do {
                node0 = node1, node1 = node1.next;
                inedges[node1.i] = node0.t;
                outedges[node0.i] = node1.t;
            } while (node1 !== hull);
        }
        voronoi(bounds) {
            return new Voronoi(this, bounds);
        }
        *neighbors(i) {
            const {inedges, outedges, halfedges, triangles} = this;
            const e0 = inedges[i];
            if (e0 === -1) return; // coincident point
            let e = e0;
            do {
                yield triangles[e];
                e = e % 3 === 2 ? e - 2 : e + 1;
                if (triangles[e] !== i) return; // bad triangulation
                e = halfedges[e];
                if (e === -1) return yield triangles[outedges[i]];
            } while (e !== e0);
        }
        find(x, y, i = 0) {
            if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
            let c;
            while ((c = this._step(i, x, y)) >= 0 && c !== i) i = c;
            return c;
        }
        _step(i, x, y) {
            const {inedges, points} = this;
            if (inedges[i] === -1) return -1; // coincident point
            let c = i;
            let dc = (x - points[i * 2]) ** 2 + (y - points[i * 2 + 1]) ** 2;
            for (const t of this.neighbors(i)) {
                const dt = (x - points[t * 2]) ** 2 + (y - points[t * 2 + 1]) ** 2;
                if (dt < dc) dc = dt, c = t;
            }
            return c;
        }
        render(context) {
            const buffer = context == null ? context = new Path : undefined;
            const {points, halfedges, triangles} = this;
            for (let i = 0, n = halfedges.length; i < n; ++i) {
                const j = halfedges[i];
                if (j < i) continue;
                const ti = triangles[i] * 2;
                const tj = triangles[j] * 2;
                context.moveTo(points[ti], points[ti + 1]);
                context.lineTo(points[tj], points[tj + 1]);
            }
            this.renderHull(context);
            return buffer && buffer.value();
        }
        renderPoints(context, r = 2) {
            const buffer = context == null ? context = new Path : undefined;
            const {points} = this;
            for (let i = 0, n = points.length; i < n; i += 2) {
                const x = points[i], y = points[i + 1];
                context.moveTo(x + r, y);
                context.arc(x, y, r, 0, tau);
            }
            return buffer && buffer.value();
        }
        renderHull(context) {
            const buffer = context == null ? context = new Path : undefined;
            const {hull} = this;
            let node = hull;
            context.moveTo(node.x, node.y);
            while (node = node.next, node !== hull) context.lineTo(node.x, node.y);
            context.closePath();
            return buffer && buffer.value();
        }
        hullPolygon() {
            const polygon = new Polygon;
            this.renderHull(polygon);
            return polygon.value();
        }
        renderTriangle(i, context) {
            const buffer = context == null ? context = new Path : undefined;
            const {points, triangles} = this;
            const t0 = triangles[i *= 3] * 2;
            const t1 = triangles[i + 1] * 2;
            const t2 = triangles[i + 2] * 2;
            context.moveTo(points[t0], points[t0 + 1]);
            context.lineTo(points[t1], points[t1 + 1]);
            context.lineTo(points[t2], points[t2 + 1]);
            context.closePath();
            return buffer && buffer.value();
        }
        *trianglePolygons() {
            const {triangles} = this;
            for (let i = 0, n = triangles.length / 3; i < n; ++i) {
                yield this.trianglePolygon(i);
            }
        }
        trianglePolygon(i) {
            const polygon = new Polygon;
            this.renderTriangle(i, polygon);
            return polygon.value();
        }
    }

    Delaunay.from = function(points, fx = pointX, fy = pointY, that) {
        return new Delaunay("length" in points
            ? flatArray(points, fx, fy, that)
            : Float64Array.from(flatIterable(points, fx, fy, that)));
    };

    function flatArray(points, fx, fy, that) {
        const n = points.length;
        const array = new Float64Array(n * 2);
        for (let i = 0; i < n; ++i) {
            const p = points[i];
            array[i * 2] = fx.call(that, p, i, points);
            array[i * 2 + 1] = fy.call(that, p, i, points);
        }
        return array;
    }

    function* flatIterable(points, fx, fy, that) {
        let i = 0;
        for (const p of points) {
            yield fx.call(that, p, i, points);
            yield fy.call(that, p, i, points);
            ++i;
        }
    }

    function delaunayFromPoints(sites) {
        let delaunay = {};

        //But we need to order the sites
        if (isA2DLine(sites)) {
            //If it is a straight line => simulate as triangles of three consecutive points (with connection of a common points between two consecutive triangles)
            let copiedSites = sites.slice();
            //We need to sort points so that the mst will be sequential.
            copiedSites.sort((a, b)=> a[0]>b[0] ? a[0]-b[0]: a[1]-b[1]);

            let tgs = [];
            let siteLength = copiedSites.length;
            for (let i = 0; i < siteLength; i = i + 2) {
                if (i + 1 < siteLength) {
                    tgs.push(i);
                    tgs.push(i + 1);
                }
                if (i + 2 < siteLength) {
                    tgs.push(i + 2);
                } else if (siteLength % 2 == 0) {
                    tgs.push(i - 1);//If it is odd => we add back one point. to make them divisible by 3 (as triangles).
                }
            }
            delaunay.triangles = tgs;
            delaunay.points = copiedSites;
        } else {
            delaunay = Delaunay.from(sites);
            delaunay.points = sites;
        }

        //TODO: There are many places we need the triangleCoordinates function => we should build it as a prototype instead of copy/paste this function in many different places.
        delaunay.triangleCoordinates = function () {
            let triangles = this.triangles;
            let tc = [];
            for (let i = 0; i < triangles.length; i += 3) {
                tc.push([
                    this.points[triangles[i]],
                    this.points[triangles[i + 1]],
                    this.points[triangles[i + 2]]
                ]);
            }
            return tc;
        };
        return delaunay;
    }

    class Outlying {
        constructor(tree, upperBound) {
            //Clone the tree to avoid modifying it
            this.tree = JSON.parse(JSON.stringify(tree));
            this.upperBound = upperBound;

            //Calculate the upper bound if it is not provided.
            if (!upperBound) {
                upperBound = findUpperBound(this.tree, 1.5);
                //Save it for displaying purpose.
                this.upperBound = upperBound;
            }
            //Mark the long links
            markLongLinks(this.tree, upperBound);
            //Finding normal nodes
            let normalNodes = findNormalNodes(this.tree);

            //Finding outlying points
            this.outlyingPoints = findOutlyingPoints(this.tree, normalNodes);

            //Now mark the outlying links
            markOutlyingLinks(this.tree, this.outlyingPoints);

            //Create none outlying tree
            this.noOutlyingTree = buildNoOutlyingTree(this.tree, this.outlyingPoints);

            function buildNoOutlyingTree(tree, outlyingPoints) {
                let noOutlyingTree = {};
                noOutlyingTree.nodes = normalNodes;
                noOutlyingTree.links = tree.links.filter(l => l.isOutlying !== true);
                //If the outlying nodes has the degree of 2 or greater => it will break the tree into subtrees => so we need to rebuild the tree.
                //Take the outlying points
                let outlyingPointsStr = outlyingPoints.map(p => p.join(','));
                let v2OrGreaterStr = getAllV2OrGreaterFromTree(tree).map(p => p.join(','));

                let diff = underscore.difference(outlyingPointsStr, v2OrGreaterStr);
                if (diff.length < outlyingPointsStr.length) {
                    //Means there is outlying node(s) with degree 2 or higher (so we should rebuild the tree)
                    let delaunay = delaunayFromPoints(noOutlyingTree.nodes.map(n => n.id));
                    let graph = createGraph(delaunay.triangleCoordinates());
                    noOutlyingTree = mst(graph);
                }
                return noOutlyingTree;
            }

            function markOutlyingLinks(tree, outlyingPoints) {
                if (outlyingPoints.length > 0) {
                    //Check the long links only
                    tree.links.filter(l => l.isLong).forEach(l => {
                        //Also check if the link contains outlying points.
                        if (pointExists(outlyingPoints, l.source) || pointExists(outlyingPoints, l.target)) {
                            l.isOutlying = true;
                        }
                    });
                }
            }

            function findNormalNodes(tree) {
                //Remove long links
                let normalLinks = tree.links.filter(l => !l.isLong);
                //Remove outlying nodes (nodes are not in any none-long links)
                let allNodesWithLinks = [];
                normalLinks.forEach(l => {
                    allNodesWithLinks.push(l.source);
                    allNodesWithLinks.push(l.target);
                });
                allNodesWithLinks = underscore.uniq(allNodesWithLinks, false, d => d.join(','));
                let normalNodes = allNodesWithLinks.map(n => {
                    return {id: n};
                });
                return normalNodes;
            }

            function findOutlyingPoints(tree, normalNodes) {
                let newNodes = normalNodes;
                let oldNodes = tree.nodes;
                //Get the outlying points
                let ops = [];
                oldNodes.forEach(on => {
                    //.id since we are accessing to points and the node is in form of {id: thePoint}
                    if (!pointExists(newNodes.map(nn => nn.id), on.id)) {
                        ops.push(on.id);
                    }
                });
                return ops;
            }

            function markLongLinks(tree, upperBound) {
                tree.links.forEach(l => {
                    if (l.weight > upperBound) {
                        l.isLong = true;
                    }
                });
            }

            function findUpperBound(tree, coefficient) {
                let allLengths = tree.links.map(l => l.weight),
                    q1 = quantile(allLengths, 0.25),
                    q3 = quantile(allLengths, 0.75),
                    iqr = q3 - q1,
                    upperBound = q3 + coefficient * iqr;
                return upperBound;
            }
        }

        /**
         * Returns outlying score
         * @returns {number}
         */
        score() {
            let totalLengths = 0;
            let totalOutlyingLengths = 0;
            this.tree.links.forEach(l => {
                totalLengths += l.weight;
                //If there are outlying points first.
                if (l.isOutlying) {
                    totalOutlyingLengths += l.weight;
                }
            });
            return totalOutlyingLengths / totalLengths;
        }

        /**
         * Returns outlying links
         */
        links() {
            if (!this.outlyingLinks) {
                this.outlyingLinks = this.tree.links.filter(l => l.isOutlying);
            }
            return this.outlyingLinks;
        }

        /**
         * Remove outlying links and nodes and return a new tree without outlying points/edges
         */
        removeOutlying() {
            return this.noOutlyingTree;
        }

        /**
         * Returns the outlying points (in form of points, not node object).
         * @returns {Array}
         */
        points() {
            return this.outlyingPoints;
        }
    }

    class Skewed {
        constructor(tree) {
            //Clone the tree to avoid modifying it
            this.tree = JSON.parse(JSON.stringify(tree));
        }

        /**
         * Returns skewed score
         * @returns {number}
         */
        score() {
            let allLengths = this.tree.links.map(l=>l.weight),
                q90 = quantile(allLengths, .9),
                q50 = quantile(allLengths, .5),
                q10 = quantile(allLengths, .1);
            if(q90!=q10){
                return (q90-q50)/(q90-q10);
            }else{
                return 0;
            }

        }
    }

    class Sparse {
        constructor(tree) {
            //Clone the tree to avoid modifying it
            this.tree = JSON.parse(JSON.stringify(tree));
        }

        /**
         * Returns sparse score
         * @returns {number}
         */
        score() {
            let allLengths = this.tree.links.map(l=>l.weight),
                q90 = quantile(allLengths, .9);
            return q90;
        }
    }

    class Striated {
        constructor(tree) {
            //Clone the tree to avoid modifying it
            this.tree = JSON.parse(JSON.stringify(tree));
        }

        /**
         * Returns striated score
         * @returns {number}
         */
        score() {
            //Loop through the nodes.
            let allObtuseV2CornersCount = this.getAllObtuseV2Corners().length;
            let v1Count = getAllV1sFromTree(this.tree).length;
            //TODO: Needs to make sure the divisor is all vertices count or vertices count for degree 2 vertices only.
            let verticesCount = this.tree.nodes.length;
            return allObtuseV2CornersCount / (verticesCount - v1Count);
            // let v2Count = this.getAllV2Corners().length;
            // return allObtuseV2CornersCount / v2Count;
        }

        getAllObtuseV2Corners() {
            let allV2Corners = this.getAllV2Corners();
            let allObtuseV2Corners = [];
            allV2Corners.forEach(corner => {
                let cs = cosine(corner[0], corner[1], corner[2]);
                if (cs <= -.75) {
                    allObtuseV2Corners.push(corner);
                }
            });
            return allObtuseV2Corners;

            function cosine(p1, p2, p3) {
                let p12 = distance(p1, p2),
                    p13 = distance(p1, p3),
                    p23 = distance(p2, p3);
                return ((Math.pow(p12, 2)) + (Math.pow(p13, 2)) - (Math.pow(p23, 2))) / (2 * p12 * p13);
            }
        }

        /**
         * This function returns corners (three vertices) of vertices of degree two in the for mat of
         * point1, point2, point3 => point1 is the the vertex with degree two (two edges connected to it are [point1, point2] and [point1, point3] (order of the points in each edge is not important)).
         */
        getAllV2Corners() {
            return getAllV2CornersFromTree(this.tree);
        }
    }

    var twoProduct_1 = twoProduct;

    var SPLITTER = +(Math.pow(2, 27) + 1.0);

    function twoProduct(a, b, result) {
        var x = a * b;

        var c = SPLITTER * a;
        var abig = c - a;
        var ahi = c - abig;
        var alo = a - ahi;

        var d = SPLITTER * b;
        var bbig = d - b;
        var bhi = d - bbig;
        var blo = b - bhi;

        var err1 = x - (ahi * bhi);
        var err2 = err1 - (alo * bhi);
        var err3 = err2 - (ahi * blo);

        var y = alo * blo - err3;

        if(result) {
            result[0] = y;
            result[1] = x;
            return result
        }

        return [ y, x ]
    }

    var robustSum = linearExpansionSum;

    //Easy case: Add two scalars
    function scalarScalar(a, b) {
        var x = a + b;
        var bv = x - a;
        var av = x - bv;
        var br = b - bv;
        var ar = a - av;
        var y = ar + br;
        if(y) {
            return [y, x]
        }
        return [x]
    }

    function linearExpansionSum(e, f) {
        var ne = e.length|0;
        var nf = f.length|0;
        if(ne === 1 && nf === 1) {
            return scalarScalar(e[0], f[0])
        }
        var n = ne + nf;
        var g = new Array(n);
        var count = 0;
        var eptr = 0;
        var fptr = 0;
        var abs = Math.abs;
        var ei = e[eptr];
        var ea = abs(ei);
        var fi = f[fptr];
        var fa = abs(fi);
        var a, b;
        if(ea < fa) {
            b = ei;
            eptr += 1;
            if(eptr < ne) {
                ei = e[eptr];
                ea = abs(ei);
            }
        } else {
            b = fi;
            fptr += 1;
            if(fptr < nf) {
                fi = f[fptr];
                fa = abs(fi);
            }
        }
        if((eptr < ne && ea < fa) || (fptr >= nf)) {
            a = ei;
            eptr += 1;
            if(eptr < ne) {
                ei = e[eptr];
                ea = abs(ei);
            }
        } else {
            a = fi;
            fptr += 1;
            if(fptr < nf) {
                fi = f[fptr];
                fa = abs(fi);
            }
        }
        var x = a + b;
        var bv = x - a;
        var y = b - bv;
        var q0 = y;
        var q1 = x;
        var _x, _bv, _av, _br, _ar;
        while(eptr < ne && fptr < nf) {
            if(ea < fa) {
                a = ei;
                eptr += 1;
                if(eptr < ne) {
                    ei = e[eptr];
                    ea = abs(ei);
                }
            } else {
                a = fi;
                fptr += 1;
                if(fptr < nf) {
                    fi = f[fptr];
                    fa = abs(fi);
                }
            }
            b = q0;
            x = a + b;
            bv = x - a;
            y = b - bv;
            if(y) {
                g[count++] = y;
            }
            _x = q1 + x;
            _bv = _x - q1;
            _av = _x - _bv;
            _br = x - _bv;
            _ar = q1 - _av;
            q0 = _ar + _br;
            q1 = _x;
        }
        while(eptr < ne) {
            a = ei;
            b = q0;
            x = a + b;
            bv = x - a;
            y = b - bv;
            if(y) {
                g[count++] = y;
            }
            _x = q1 + x;
            _bv = _x - q1;
            _av = _x - _bv;
            _br = x - _bv;
            _ar = q1 - _av;
            q0 = _ar + _br;
            q1 = _x;
            eptr += 1;
            if(eptr < ne) {
                ei = e[eptr];
            }
        }
        while(fptr < nf) {
            a = fi;
            b = q0;
            x = a + b;
            bv = x - a;
            y = b - bv;
            if(y) {
                g[count++] = y;
            }
            _x = q1 + x;
            _bv = _x - q1;
            _av = _x - _bv;
            _br = x - _bv;
            _ar = q1 - _av;
            q0 = _ar + _br;
            q1 = _x;
            fptr += 1;
            if(fptr < nf) {
                fi = f[fptr];
            }
        }
        if(q0) {
            g[count++] = q0;
        }
        if(q1) {
            g[count++] = q1;
        }
        if(!count) {
            g[count++] = 0.0;
        }
        g.length = count;
        return g
    }

    var twoSum = fastTwoSum;

    function fastTwoSum(a, b, result) {
        var x = a + b;
        var bv = x - a;
        var av = x - bv;
        var br = b - bv;
        var ar = a - av;
        if(result) {
            result[0] = ar + br;
            result[1] = x;
            return result
        }
        return [ar+br, x]
    }

    var robustScale = scaleLinearExpansion;

    function scaleLinearExpansion(e, scale) {
        var n = e.length;
        if(n === 1) {
            var ts = twoProduct_1(e[0], scale);
            if(ts[0]) {
                return ts
            }
            return [ ts[1] ]
        }
        var g = new Array(2 * n);
        var q = [0.1, 0.1];
        var t = [0.1, 0.1];
        var count = 0;
        twoProduct_1(e[0], scale, q);
        if(q[0]) {
            g[count++] = q[0];
        }
        for(var i=1; i<n; ++i) {
            twoProduct_1(e[i], scale, t);
            var pq = q[1];
            twoSum(pq, t[0], q);
            if(q[0]) {
                g[count++] = q[0];
            }
            var a = t[1];
            var b = q[1];
            var x = a + b;
            var bv = x - a;
            var y = b - bv;
            q[1] = x;
            if(y) {
                g[count++] = y;
            }
        }
        if(q[1]) {
            g[count++] = q[1];
        }
        if(count === 0) {
            g[count++] = 0.0;
        }
        g.length = count;
        return g
    }

    var robustDiff = robustSubtract;

    //Easy case: Add two scalars
    function scalarScalar$1(a, b) {
        var x = a + b;
        var bv = x - a;
        var av = x - bv;
        var br = b - bv;
        var ar = a - av;
        var y = ar + br;
        if(y) {
            return [y, x]
        }
        return [x]
    }

    function robustSubtract(e, f) {
        var ne = e.length|0;
        var nf = f.length|0;
        if(ne === 1 && nf === 1) {
            return scalarScalar$1(e[0], -f[0])
        }
        var n = ne + nf;
        var g = new Array(n);
        var count = 0;
        var eptr = 0;
        var fptr = 0;
        var abs = Math.abs;
        var ei = e[eptr];
        var ea = abs(ei);
        var fi = -f[fptr];
        var fa = abs(fi);
        var a, b;
        if(ea < fa) {
            b = ei;
            eptr += 1;
            if(eptr < ne) {
                ei = e[eptr];
                ea = abs(ei);
            }
        } else {
            b = fi;
            fptr += 1;
            if(fptr < nf) {
                fi = -f[fptr];
                fa = abs(fi);
            }
        }
        if((eptr < ne && ea < fa) || (fptr >= nf)) {
            a = ei;
            eptr += 1;
            if(eptr < ne) {
                ei = e[eptr];
                ea = abs(ei);
            }
        } else {
            a = fi;
            fptr += 1;
            if(fptr < nf) {
                fi = -f[fptr];
                fa = abs(fi);
            }
        }
        var x = a + b;
        var bv = x - a;
        var y = b - bv;
        var q0 = y;
        var q1 = x;
        var _x, _bv, _av, _br, _ar;
        while(eptr < ne && fptr < nf) {
            if(ea < fa) {
                a = ei;
                eptr += 1;
                if(eptr < ne) {
                    ei = e[eptr];
                    ea = abs(ei);
                }
            } else {
                a = fi;
                fptr += 1;
                if(fptr < nf) {
                    fi = -f[fptr];
                    fa = abs(fi);
                }
            }
            b = q0;
            x = a + b;
            bv = x - a;
            y = b - bv;
            if(y) {
                g[count++] = y;
            }
            _x = q1 + x;
            _bv = _x - q1;
            _av = _x - _bv;
            _br = x - _bv;
            _ar = q1 - _av;
            q0 = _ar + _br;
            q1 = _x;
        }
        while(eptr < ne) {
            a = ei;
            b = q0;
            x = a + b;
            bv = x - a;
            y = b - bv;
            if(y) {
                g[count++] = y;
            }
            _x = q1 + x;
            _bv = _x - q1;
            _av = _x - _bv;
            _br = x - _bv;
            _ar = q1 - _av;
            q0 = _ar + _br;
            q1 = _x;
            eptr += 1;
            if(eptr < ne) {
                ei = e[eptr];
            }
        }
        while(fptr < nf) {
            a = fi;
            b = q0;
            x = a + b;
            bv = x - a;
            y = b - bv;
            if(y) {
                g[count++] = y;
            }
            _x = q1 + x;
            _bv = _x - q1;
            _av = _x - _bv;
            _br = x - _bv;
            _ar = q1 - _av;
            q0 = _ar + _br;
            q1 = _x;
            fptr += 1;
            if(fptr < nf) {
                fi = -f[fptr];
            }
        }
        if(q0) {
            g[count++] = q0;
        }
        if(q1) {
            g[count++] = q1;
        }
        if(!count) {
            g[count++] = 0.0;
        }
        g.length = count;
        return g
    }

    var orientation_1 = createCommonjsModule(function (module) {






        var NUM_EXPAND = 5;

        var EPSILON     = 1.1102230246251565e-16;
        var ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON;
        var ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON;

        function cofactor(m, c) {
            var result = new Array(m.length-1);
            for(var i=1; i<m.length; ++i) {
                var r = result[i-1] = new Array(m.length-1);
                for(var j=0,k=0; j<m.length; ++j) {
                    if(j === c) {
                        continue
                    }
                    r[k++] = m[i][j];
                }
            }
            return result
        }

        function matrix(n) {
            var result = new Array(n);
            for(var i=0; i<n; ++i) {
                result[i] = new Array(n);
                for(var j=0; j<n; ++j) {
                    result[i][j] = ["m", j, "[", (n-i-1), "]"].join("");
                }
            }
            return result
        }

        function sign(n) {
            if(n & 1) {
                return "-"
            }
            return ""
        }

        function generateSum(expr) {
            if(expr.length === 1) {
                return expr[0]
            } else if(expr.length === 2) {
                return ["sum(", expr[0], ",", expr[1], ")"].join("")
            } else {
                var m = expr.length>>1;
                return ["sum(", generateSum(expr.slice(0, m)), ",", generateSum(expr.slice(m)), ")"].join("")
            }
        }

        function determinant(m) {
            if(m.length === 2) {
                return [["sum(prod(", m[0][0], ",", m[1][1], "),prod(-", m[0][1], ",", m[1][0], "))"].join("")]
            } else {
                var expr = [];
                for(var i=0; i<m.length; ++i) {
                    expr.push(["scale(", generateSum(determinant(cofactor(m, i))), ",", sign(i), m[0][i], ")"].join(""));
                }
                return expr
            }
        }

        function orientation(n) {
            var pos = [];
            var neg = [];
            var m = matrix(n);
            var args = [];
            for(var i=0; i<n; ++i) {
                if((i&1)===0) {
                    pos.push.apply(pos, determinant(cofactor(m, i)));
                } else {
                    neg.push.apply(neg, determinant(cofactor(m, i)));
                }
                args.push("m" + i);
            }
            var posExpr = generateSum(pos);
            var negExpr = generateSum(neg);
            var funcName = "orientation" + n + "Exact";
            var code = ["function ", funcName, "(", args.join(), "){var p=", posExpr, ",n=", negExpr, ",d=sub(p,n);\
return d[d.length-1];};return ", funcName].join("");
            var proc = new Function("sum", "prod", "scale", "sub", code);
            return proc(robustSum, twoProduct_1, robustScale, robustDiff)
        }

        var orientation3Exact = orientation(3);
        var orientation4Exact = orientation(4);

        var CACHED = [
            function orientation0() { return 0 },
            function orientation1() { return 0 },
            function orientation2(a, b) {
                return b[0] - a[0]
            },
            function orientation3(a, b, c) {
                var l = (a[1] - c[1]) * (b[0] - c[0]);
                var r = (a[0] - c[0]) * (b[1] - c[1]);
                var det = l - r;
                var s;
                if(l > 0) {
                    if(r <= 0) {
                        return det
                    } else {
                        s = l + r;
                    }
                } else if(l < 0) {
                    if(r >= 0) {
                        return det
                    } else {
                        s = -(l + r);
                    }
                } else {
                    return det
                }
                var tol = ERRBOUND3 * s;
                if(det >= tol || det <= -tol) {
                    return det
                }
                return orientation3Exact(a, b, c)
            },
            function orientation4(a,b,c,d) {
                var adx = a[0] - d[0];
                var bdx = b[0] - d[0];
                var cdx = c[0] - d[0];
                var ady = a[1] - d[1];
                var bdy = b[1] - d[1];
                var cdy = c[1] - d[1];
                var adz = a[2] - d[2];
                var bdz = b[2] - d[2];
                var cdz = c[2] - d[2];
                var bdxcdy = bdx * cdy;
                var cdxbdy = cdx * bdy;
                var cdxady = cdx * ady;
                var adxcdy = adx * cdy;
                var adxbdy = adx * bdy;
                var bdxady = bdx * ady;
                var det = adz * (bdxcdy - cdxbdy)
                    + bdz * (cdxady - adxcdy)
                    + cdz * (adxbdy - bdxady);
                var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)
                    + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)
                    + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);
                var tol = ERRBOUND4 * permanent;
                if ((det > tol) || (-det > tol)) {
                    return det
                }
                return orientation4Exact(a,b,c,d)
            }
        ];

        function slowOrient(args) {
            var proc = CACHED[args.length];
            if(!proc) {
                proc = CACHED[args.length] = orientation(args.length);
            }
            return proc.apply(undefined, args)
        }

        function generateOrientationProc() {
            while(CACHED.length <= NUM_EXPAND) {
                CACHED.push(orientation(CACHED.length));
            }
            var args = [];
            var procArgs = ["slow"];
            for(var i=0; i<=NUM_EXPAND; ++i) {
                args.push("a" + i);
                procArgs.push("o" + i);
            }
            var code = [
                "function getOrientation(", args.join(), "){switch(arguments.length){case 0:case 1:return 0;"
            ];
            for(var i=2; i<=NUM_EXPAND; ++i) {
                code.push("case ", i, ":return o", i, "(", args.slice(0, i).join(), ");");
            }
            code.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation");
            procArgs.push(code.join(""));

            var proc = Function.apply(undefined, procArgs);
            module.exports = proc.apply(undefined, [slowOrient].concat(CACHED));
            for(var i=0; i<=NUM_EXPAND; ++i) {
                module.exports[i] = CACHED[i];
            }
        }

        generateOrientationProc();
    });

    /**
     * Bit twiddling hacks for JavaScript.
     *
     * Author: Mikola Lysenko
     *
     * Ported from Stanford bit twiddling hack library:
     *    http://graphics.stanford.edu/~seander/bithacks.html
     */


        //Number of bits in an integer
    var INT_BITS = 32;

    //Constants
    var INT_BITS_1  = INT_BITS;
    var INT_MAX   =  0x7fffffff;
    var INT_MIN   = -1<<(INT_BITS-1);

    //Returns -1, 0, +1 depending on sign of x
    var sign$1 = function(v) {
        return (v > 0) - (v < 0);
    };

    //Computes absolute value of integer
    var abs = function(v) {
        var mask = v >> (INT_BITS-1);
        return (v ^ mask) - mask;
    };

    //Computes minimum of integers x and y
    var min$1 = function(x, y) {
        return y ^ ((x ^ y) & -(x < y));
    };

    //Computes maximum of integers x and y
    var max$1 = function(x, y) {
        return x ^ ((x ^ y) & -(x < y));
    };

    //Checks if a number is a power of two
    var isPow2 = function(v) {
        return !(v & (v-1)) && (!!v);
    };

    //Computes log base 2 of v
    var log2 = function(v) {
        var r, shift;
        r =     (v > 0xFFFF) << 4; v >>>= r;
        shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;
        shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;
        shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;
        return r | (v >> 1);
    };

    //Computes log base 10 of v
    var log10 = function(v) {
        return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
            (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
                (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
    };

    //Counts number of bits
    var popCount = function(v) {
        v = v - ((v >>> 1) & 0x55555555);
        v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
        return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
    };

    //Counts number of trailing zeros
    function countTrailingZeros(v) {
        var c = 32;
        v &= -v;
        if (v) c--;
        if (v & 0x0000FFFF) c -= 16;
        if (v & 0x00FF00FF) c -= 8;
        if (v & 0x0F0F0F0F) c -= 4;
        if (v & 0x33333333) c -= 2;
        if (v & 0x55555555) c -= 1;
        return c;
    }
    var countTrailingZeros_1 = countTrailingZeros;

    //Rounds to next power of 2
    var nextPow2 = function(v) {
        v += v === 0;
        --v;
        v |= v >>> 1;
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        v |= v >>> 16;
        return v + 1;
    };

    //Rounds down to previous power of 2
    var prevPow2 = function(v) {
        v |= v >>> 1;
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        v |= v >>> 16;
        return v - (v>>>1);
    };

    //Computes parity of word
    var parity = function(v) {
        v ^= v >>> 16;
        v ^= v >>> 8;
        v ^= v >>> 4;
        v &= 0xf;
        return (0x6996 >>> v) & 1;
    };

    var REVERSE_TABLE = new Array(256);

    (function(tab) {
        for(var i=0; i<256; ++i) {
            var v = i, r = i, s = 7;
            for (v >>>= 1; v; v >>>= 1) {
                r <<= 1;
                r |= v & 1;
                --s;
            }
            tab[i] = (r << s) & 0xff;
        }
    })(REVERSE_TABLE);

    //Reverse bits in a 32 bit word
    var reverse = function(v) {
        return  (REVERSE_TABLE[ v         & 0xff] << 24) |
            (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |
            (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |
            REVERSE_TABLE[(v >>> 24) & 0xff];
    };

    //Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
    var interleave2 = function(x, y) {
        x &= 0xFFFF;
        x = (x | (x << 8)) & 0x00FF00FF;
        x = (x | (x << 4)) & 0x0F0F0F0F;
        x = (x | (x << 2)) & 0x33333333;
        x = (x | (x << 1)) & 0x55555555;

        y &= 0xFFFF;
        y = (y | (y << 8)) & 0x00FF00FF;
        y = (y | (y << 4)) & 0x0F0F0F0F;
        y = (y | (y << 2)) & 0x33333333;
        y = (y | (y << 1)) & 0x55555555;

        return x | (y << 1);
    };

    //Extracts the nth interleaved component
    var deinterleave2 = function(v, n) {
        v = (v >>> n) & 0x55555555;
        v = (v | (v >>> 1))  & 0x33333333;
        v = (v | (v >>> 2))  & 0x0F0F0F0F;
        v = (v | (v >>> 4))  & 0x00FF00FF;
        v = (v | (v >>> 16)) & 0x000FFFF;
        return (v << 16) >> 16;
    };


    //Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
    var interleave3 = function(x, y, z) {
        x &= 0x3FF;
        x  = (x | (x<<16)) & 4278190335;
        x  = (x | (x<<8))  & 251719695;
        x  = (x | (x<<4))  & 3272356035;
        x  = (x | (x<<2))  & 1227133513;

        y &= 0x3FF;
        y  = (y | (y<<16)) & 4278190335;
        y  = (y | (y<<8))  & 251719695;
        y  = (y | (y<<4))  & 3272356035;
        y  = (y | (y<<2))  & 1227133513;
        x |= (y << 1);

        z &= 0x3FF;
        z  = (z | (z<<16)) & 4278190335;
        z  = (z | (z<<8))  & 251719695;
        z  = (z | (z<<4))  & 3272356035;
        z  = (z | (z<<2))  & 1227133513;

        return x | (z << 2);
    };

    //Extracts nth interleaved component of a 3-tuple
    var deinterleave3 = function(v, n) {
        v = (v >>> n)       & 1227133513;
        v = (v | (v>>>2))   & 3272356035;
        v = (v | (v>>>4))   & 251719695;
        v = (v | (v>>>8))   & 4278190335;
        v = (v | (v>>>16))  & 0x3FF;
        return (v<<22)>>22;
    };

    //Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
    var nextCombination = function(v) {
        var t = v | (v - 1);
        return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
    };

    var twiddle = {
        INT_BITS: INT_BITS_1,
        INT_MAX: INT_MAX,
        INT_MIN: INT_MIN,
        sign: sign$1,
        abs: abs,
        min: min$1,
        max: max$1,
        isPow2: isPow2,
        log2: log2,
        log10: log10,
        popCount: popCount,
        countTrailingZeros: countTrailingZeros_1,
        nextPow2: nextPow2,
        prevPow2: prevPow2,
        parity: parity,
        reverse: reverse,
        interleave2: interleave2,
        deinterleave2: deinterleave2,
        interleave3: interleave3,
        deinterleave3: deinterleave3,
        nextCombination: nextCombination
    };

    var unionFind = UnionFind;

    function UnionFind(count) {
        this.roots = new Array(count);
        this.ranks = new Array(count);

        for(var i=0; i<count; ++i) {
            this.roots[i] = i;
            this.ranks[i] = 0;
        }
    }

    var proto = UnionFind.prototype;

    Object.defineProperty(proto, "length", {
        "get": function() {
            return this.roots.length
        }
    });

    proto.makeSet = function() {
        var n = this.roots.length;
        this.roots.push(n);
        this.ranks.push(0);
        return n;
    };

    proto.find = function(x) {
        var x0 = x;
        var roots = this.roots;
        while(roots[x] !== x) {
            x = roots[x];
        }
        while(roots[x0] !== x) {
            var y = roots[x0];
            roots[x0] = x;
            x0 = y;
        }
        return x;
    };

    proto.link = function(x, y) {
        var xr = this.find(x)
            , yr = this.find(y);
        if(xr === yr) {
            return;
        }
        var ranks = this.ranks
            , roots = this.roots
            , xd    = ranks[xr]
            , yd    = ranks[yr];
        if(xd < yd) {
            roots[xr] = yr;
        } else if(yd < xd) {
            roots[yr] = xr;
        } else {
            roots[yr] = xr;
            ++ranks[xr];
        }
    };

    //Returns the dimension of a cell complex
    function dimension(cells) {
        var d = 0
            , max = Math.max;
        for(var i=0, il=cells.length; i<il; ++i) {
            d = max(d, cells[i].length);
        }
        return d-1
    }
    var dimension_1 = dimension;

    //Counts the number of vertices in faces
    function countVertices(cells) {
        var vc = -1
            , max = Math.max;
        for(var i=0, il=cells.length; i<il; ++i) {
            var c = cells[i];
            for(var j=0, jl=c.length; j<jl; ++j) {
                vc = max(vc, c[j]);
            }
        }
        return vc+1
    }
    var countVertices_1 = countVertices;

    //Returns a deep copy of cells
    function cloneCells(cells) {
        var ncells = new Array(cells.length);
        for(var i=0, il=cells.length; i<il; ++i) {
            ncells[i] = cells[i].slice(0);
        }
        return ncells
    }
    var cloneCells_1 = cloneCells;

    //Ranks a pair of cells up to permutation
    function compareCells(a, b) {
        var n = a.length
            , t = a.length - b.length
            , min = Math.min;
        if(t) {
            return t
        }
        switch(n) {
            case 0:
                return 0;
            case 1:
                return a[0] - b[0];
            case 2:
                var d = a[0]+a[1]-b[0]-b[1];
                if(d) {
                    return d
                }
                return min(a[0],a[1]) - min(b[0],b[1])
            case 3:
                var l1 = a[0]+a[1]
                    , m1 = b[0]+b[1];
                d = l1+a[2] - (m1+b[2]);
                if(d) {
                    return d
                }
                var l0 = min(a[0], a[1])
                    , m0 = min(b[0], b[1])
                    , d  = min(l0, a[2]) - min(m0, b[2]);
                if(d) {
                    return d
                }
                return min(l0+a[2], l1) - min(m0+b[2], m1)

            //TODO: Maybe optimize n=4 as well?

            default:
                var as = a.slice(0);
                as.sort();
                var bs = b.slice(0);
                bs.sort();
                for(var i=0; i<n; ++i) {
                    t = as[i] - bs[i];
                    if(t) {
                        return t
                    }
                }
                return 0
        }
    }
    var compareCells_1 = compareCells;

    function compareZipped(a, b) {
        return compareCells(a[0], b[0])
    }

    //Puts a cell complex into normal order for the purposes of findCell queries
    function normalize(cells, attr) {
        if(attr) {
            var len = cells.length;
            var zipped = new Array(len);
            for(var i=0; i<len; ++i) {
                zipped[i] = [cells[i], attr[i]];
            }
            zipped.sort(compareZipped);
            for(var i=0; i<len; ++i) {
                cells[i] = zipped[i][0];
                attr[i] = zipped[i][1];
            }
            return cells
        } else {
            cells.sort(compareCells);
            return cells
        }
    }
    var normalize_1 = normalize;

    //Removes all duplicate cells in the complex
    function unique(cells) {
        if(cells.length === 0) {
            return []
        }
        var ptr = 1
            , len = cells.length;
        for(var i=1; i<len; ++i) {
            var a = cells[i];
            if(compareCells(a, cells[i-1])) {
                if(i === ptr) {
                    ptr++;
                    continue
                }
                cells[ptr++] = a;
            }
        }
        cells.length = ptr;
        return cells
    }
    var unique_1 = unique;

    //Finds a cell in a normalized cell complex
    function findCell(cells, c) {
        var lo = 0
            , hi = cells.length-1
            , r  = -1;
        while (lo <= hi) {
            var mid = (lo + hi) >> 1
                , s   = compareCells(cells[mid], c);
            if(s <= 0) {
                if(s === 0) {
                    r = mid;
                }
                lo = mid + 1;
            } else if(s > 0) {
                hi = mid - 1;
            }
        }
        return r
    }
    var findCell_1 = findCell;

    //Builds an index for an n-cell.  This is more general than dual, but less efficient
    function incidence(from_cells, to_cells) {
        var index = new Array(from_cells.length);
        for(var i=0, il=index.length; i<il; ++i) {
            index[i] = [];
        }
        var b = [];
        for(var i=0, n=to_cells.length; i<n; ++i) {
            var c = to_cells[i];
            var cl = c.length;
            for(var k=1, kn=(1<<cl); k<kn; ++k) {
                b.length = twiddle.popCount(k);
                var l = 0;
                for(var j=0; j<cl; ++j) {
                    if(k & (1<<j)) {
                        b[l++] = c[j];
                    }
                }
                var idx=findCell(from_cells, b);
                if(idx < 0) {
                    continue
                }
                while(true) {
                    index[idx++].push(i);
                    if(idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {
                        break
                    }
                }
            }
        }
        return index
    }
    var incidence_1 = incidence;

    //Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices
    function dual(cells, vertex_count) {
        if(!vertex_count) {
            return incidence(unique(skeleton(cells, 0)), cells, 0)
        }
        var res = new Array(vertex_count);
        for(var i=0; i<vertex_count; ++i) {
            res[i] = [];
        }
        for(var i=0, len=cells.length; i<len; ++i) {
            var c = cells[i];
            for(var j=0, cl=c.length; j<cl; ++j) {
                res[c[j]].push(i);
            }
        }
        return res
    }
    var dual_1 = dual;

    //Enumerates all cells in the complex
    function explode(cells) {
        var result = [];
        for(var i=0, il=cells.length; i<il; ++i) {
            var c = cells[i]
                , cl = c.length|0;
            for(var j=1, jl=(1<<cl); j<jl; ++j) {
                var b = [];
                for(var k=0; k<cl; ++k) {
                    if((j >>> k) & 1) {
                        b.push(c[k]);
                    }
                }
                result.push(b);
            }
        }
        return normalize(result)
    }
    var explode_1 = explode;

    //Enumerates all of the n-cells of a cell complex
    function skeleton(cells, n) {
        if(n < 0) {
            return []
        }
        var result = []
            , k0     = (1<<(n+1))-1;
        for(var i=0; i<cells.length; ++i) {
            var c = cells[i];
            for(var k=k0; k<(1<<c.length); k=twiddle.nextCombination(k)) {
                var b = new Array(n+1)
                    , l = 0;
                for(var j=0; j<c.length; ++j) {
                    if(k & (1<<j)) {
                        b[l++] = c[j];
                    }
                }
                result.push(b);
            }
        }
        return normalize(result)
    }
    var skeleton_1 = skeleton;

    //Computes the boundary of all cells, does not remove duplicates
    function boundary(cells) {
        var res = [];
        for(var i=0,il=cells.length; i<il; ++i) {
            var c = cells[i];
            for(var j=0,cl=c.length; j<cl; ++j) {
                var b = new Array(c.length-1);
                for(var k=0, l=0; k<cl; ++k) {
                    if(k !== j) {
                        b[l++] = c[k];
                    }
                }
                res.push(b);
            }
        }
        return normalize(res)
    }
    var boundary_1 = boundary;

    //Computes connected components for a dense cell complex
    function connectedComponents_dense(cells, vertex_count) {
        var labels = new unionFind(vertex_count);
        for(var i=0; i<cells.length; ++i) {
            var c = cells[i];
            for(var j=0; j<c.length; ++j) {
                for(var k=j+1; k<c.length; ++k) {
                    labels.link(c[j], c[k]);
                }
            }
        }
        var components = []
            , component_labels = labels.ranks;
        for(var i=0; i<component_labels.length; ++i) {
            component_labels[i] = -1;
        }
        for(var i=0; i<cells.length; ++i) {
            var l = labels.find(cells[i][0]);
            if(component_labels[l] < 0) {
                component_labels[l] = components.length;
                components.push([cells[i].slice(0)]);
            } else {
                components[component_labels[l]].push(cells[i].slice(0));
            }
        }
        return components
    }

    //Computes connected components for a sparse graph
    function connectedComponents_sparse(cells) {
        var vertices  = unique(normalize(skeleton(cells, 0)))
            , labels    = new unionFind(vertices.length);
        for(var i=0; i<cells.length; ++i) {
            var c = cells[i];
            for(var j=0; j<c.length; ++j) {
                var vj = findCell(vertices, [c[j]]);
                for(var k=j+1; k<c.length; ++k) {
                    labels.link(vj, findCell(vertices, [c[k]]));
                }
            }
        }
        var components        = []
            , component_labels  = labels.ranks;
        for(var i=0; i<component_labels.length; ++i) {
            component_labels[i] = -1;
        }
        for(var i=0; i<cells.length; ++i) {
            var l = labels.find(findCell(vertices, [cells[i][0]]));
            if(component_labels[l] < 0) {
                component_labels[l] = components.length;
                components.push([cells[i].slice(0)]);
            } else {
                components[component_labels[l]].push(cells[i].slice(0));
            }
        }
        return components
    }

    //Computes connected components for a cell complex
    function connectedComponents(cells, vertex_count) {
        if(vertex_count) {
            return connectedComponents_dense(cells, vertex_count)
        }
        return connectedComponents_sparse(cells)
    }
    var connectedComponents_1 = connectedComponents;

    var topology = {
        dimension: dimension_1,
        countVertices: countVertices_1,
        cloneCells: cloneCells_1,
        compareCells: compareCells_1,
        normalize: normalize_1,
        unique: unique_1,
        findCell: findCell_1,
        incidence: incidence_1,
        dual: dual_1,
        explode: explode_1,
        skeleton: skeleton_1,
        boundary: boundary_1,
        connectedComponents: connectedComponents_1
    };

    //High level idea:
    // 1. Use Clarkson's incremental construction to find convex hull
    // 2. Point location in triangulation by jump and walk

    var ich = incrementalConvexHull;


    var compareCell = topology.compareCells;

    function Simplex(vertices, adjacent, boundary) {
        this.vertices = vertices;
        this.adjacent = adjacent;
        this.boundary = boundary;
        this.lastVisited = -1;
    }

    Simplex.prototype.flip = function() {
        var t = this.vertices[0];
        this.vertices[0] = this.vertices[1];
        this.vertices[1] = t;
        var u = this.adjacent[0];
        this.adjacent[0] = this.adjacent[1];
        this.adjacent[1] = u;
    };

    function GlueFacet(vertices, cell, index) {
        this.vertices = vertices;
        this.cell = cell;
        this.index = index;
    }

    function compareGlue(a, b) {
        return compareCell(a.vertices, b.vertices)
    }

    function bakeOrient(d) {
        var code = ["function orient(){var tuple=this.tuple;return test("];
        for(var i=0; i<=d; ++i) {
            if(i > 0) {
                code.push(",");
            }
            code.push("tuple[", i, "]");
        }
        code.push(")}return orient");
        var proc = new Function("test", code.join(""));
        var test = orientation_1[d+1];
        if(!test) {
            test = orientation_1;
        }
        return proc(test)
    }

    var BAKED = [];

    function Triangulation(dimension, vertices, simplices) {
        this.dimension = dimension;
        this.vertices = vertices;
        this.simplices = simplices;
        this.interior = simplices.filter(function(c) {
            return !c.boundary
        });

        this.tuple = new Array(dimension+1);
        for(var i=0; i<=dimension; ++i) {
            this.tuple[i] = this.vertices[i];
        }

        var o = BAKED[dimension];
        if(!o) {
            o = BAKED[dimension] = bakeOrient(dimension);
        }
        this.orient = o;
    }

    var proto$1 = Triangulation.prototype;

    //Degenerate situation where we are on boundary, but coplanar to face
    proto$1.handleBoundaryDegeneracy = function(cell, point) {
        var d = this.dimension;
        var n = this.vertices.length - 1;
        var tuple = this.tuple;
        var verts = this.vertices;

        //Dumb solution: Just do dfs from boundary cell until we find any peak, or terminate
        var toVisit = [ cell ];
        cell.lastVisited = -n;
        while(toVisit.length > 0) {
            cell = toVisit.pop();
            var cellVerts = cell.vertices;
            var cellAdj = cell.adjacent;
            for(var i=0; i<=d; ++i) {
                var neighbor = cellAdj[i];
                if(!neighbor.boundary || neighbor.lastVisited <= -n) {
                    continue
                }
                var nv = neighbor.vertices;
                for(var j=0; j<=d; ++j) {
                    var vv = nv[j];
                    if(vv < 0) {
                        tuple[j] = point;
                    } else {
                        tuple[j] = verts[vv];
                    }
                }
                var o = this.orient();
                if(o > 0) {
                    return neighbor
                }
                neighbor.lastVisited = -n;
                if(o === 0) {
                    toVisit.push(neighbor);
                }
            }
        }
        return null
    };

    proto$1.walk = function(point, random) {
        //Alias local properties
        var n = this.vertices.length - 1;
        var d = this.dimension;
        var verts = this.vertices;
        var tuple = this.tuple;

        //Compute initial jump cell
        var initIndex = random ? (this.interior.length * Math.random())|0 : (this.interior.length-1);
        var cell = this.interior[ initIndex ];

        //Start walking
        outerLoop:
            while(!cell.boundary) {
                var cellVerts = cell.vertices;
                var cellAdj = cell.adjacent;

                for(var i=0; i<=d; ++i) {
                    tuple[i] = verts[cellVerts[i]];
                }
                cell.lastVisited = n;

                //Find farthest adjacent cell
                for(var i=0; i<=d; ++i) {
                    var neighbor = cellAdj[i];
                    if(neighbor.lastVisited >= n) {
                        continue
                    }
                    var prev = tuple[i];
                    tuple[i] = point;
                    var o = this.orient();
                    tuple[i] = prev;
                    if(o < 0) {
                        cell = neighbor;
                        continue outerLoop
                    } else {
                        if(!neighbor.boundary) {
                            neighbor.lastVisited = n;
                        } else {
                            neighbor.lastVisited = -n;
                        }
                    }
                }
                return
            }

        return cell
    };

    proto$1.addPeaks = function(point, cell) {
        var n = this.vertices.length - 1;
        var d = this.dimension;
        var verts = this.vertices;
        var tuple = this.tuple;
        var interior = this.interior;
        var simplices = this.simplices;

        //Walking finished at boundary, time to add peaks
        var tovisit = [ cell ];

        //Stretch initial boundary cell into a peak
        cell.lastVisited = n;
        cell.vertices[cell.vertices.indexOf(-1)] = n;
        cell.boundary = false;
        interior.push(cell);

        //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done
        var glueFacets = [];

        //Do a traversal of the boundary walking outward from starting peak
        while(tovisit.length > 0) {
            //Pop off peak and walk over adjacent cells
            var cell = tovisit.pop();
            var cellVerts = cell.vertices;
            var cellAdj = cell.adjacent;
            var indexOfN = cellVerts.indexOf(n);
            if(indexOfN < 0) {
                continue
            }

            for(var i=0; i<=d; ++i) {
                if(i === indexOfN) {
                    continue
                }

                //For each boundary neighbor of the cell
                var neighbor = cellAdj[i];
                if(!neighbor.boundary || neighbor.lastVisited >= n) {
                    continue
                }

                var nv = neighbor.vertices;

                //Test if neighbor is a peak
                if(neighbor.lastVisited !== -n) {
                    //Compute orientation of p relative to each boundary peak
                    var indexOfNeg1 = 0;
                    for(var j=0; j<=d; ++j) {
                        if(nv[j] < 0) {
                            indexOfNeg1 = j;
                            tuple[j] = point;
                        } else {
                            tuple[j] = verts[nv[j]];
                        }
                    }
                    var o = this.orient();

                    //Test if neighbor cell is also a peak
                    if(o > 0) {
                        nv[indexOfNeg1] = n;
                        neighbor.boundary = false;
                        interior.push(neighbor);
                        tovisit.push(neighbor);
                        neighbor.lastVisited = n;
                        continue
                    } else {
                        neighbor.lastVisited = -n;
                    }
                }

                var na = neighbor.adjacent;

                //Otherwise, replace neighbor with new face
                var vverts = cellVerts.slice();
                var vadj = cellAdj.slice();
                var ncell = new Simplex(vverts, vadj, true);
                simplices.push(ncell);

                //Connect to neighbor
                var opposite = na.indexOf(cell);
                if(opposite < 0) {
                    continue
                }
                na[opposite] = ncell;
                vadj[indexOfN] = neighbor;

                //Connect to cell
                vverts[i] = -1;
                vadj[i] = cell;
                cellAdj[i] = ncell;

                //Flip facet
                ncell.flip();

                //Add to glue list
                for(var j=0; j<=d; ++j) {
                    var uu = vverts[j];
                    if(uu < 0 || uu === n) {
                        continue
                    }
                    var nface = new Array(d-1);
                    var nptr = 0;
                    for(var k=0; k<=d; ++k) {
                        var vv = vverts[k];
                        if(vv < 0 || k === j) {
                            continue
                        }
                        nface[nptr++] = vv;
                    }
                    glueFacets.push(new GlueFacet(nface, ncell, j));
                }
            }
        }

        //Glue boundary facets together
        glueFacets.sort(compareGlue);

        for(var i=0; i+1<glueFacets.length; i+=2) {
            var a = glueFacets[i];
            var b = glueFacets[i+1];
            var ai = a.index;
            var bi = b.index;
            if(ai < 0 || bi < 0) {
                continue
            }
            a.cell.adjacent[a.index] = b.cell;
            b.cell.adjacent[b.index] = a.cell;
        }
    };

    proto$1.insert = function(point, random) {
        //Add point
        var verts = this.vertices;
        verts.push(point);

        var cell = this.walk(point, random);
        if(!cell) {
            return
        }

        //Alias local properties
        var d = this.dimension;
        var tuple = this.tuple;

        //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary
        for(var i=0; i<=d; ++i) {
            var vv = cell.vertices[i];
            if(vv < 0) {
                tuple[i] = point;
            } else {
                tuple[i] = verts[vv];
            }
        }
        var o = this.orient(tuple);
        if(o < 0) {
            return
        } else if(o === 0) {
            cell = this.handleBoundaryDegeneracy(cell, point);
            if(!cell) {
                return
            }
        }

        //Add peaks
        this.addPeaks(point, cell);
    };

    //Extract all boundary cells
    proto$1.boundary = function() {
        var d = this.dimension;
        var boundary = [];
        var cells = this.simplices;
        var nc = cells.length;
        for(var i=0; i<nc; ++i) {
            var c = cells[i];
            if(c.boundary) {
                var bcell = new Array(d);
                var cv = c.vertices;
                var ptr = 0;
                var parity = 0;
                for(var j=0; j<=d; ++j) {
                    if(cv[j] >= 0) {
                        bcell[ptr++] = cv[j];
                    } else {
                        parity = j&1;
                    }
                }
                if(parity === (d&1)) {
                    var t = bcell[0];
                    bcell[0] = bcell[1];
                    bcell[1] = t;
                }
                boundary.push(bcell);
            }
        }
        return boundary
    };

    function incrementalConvexHull(points, randomSearch) {
        var n = points.length;
        if(n === 0) {
            throw new Error("Must have at least d+1 points")
        }
        var d = points[0].length;
        if(n <= d) {
            throw new Error("Must input at least d+1 points")
        }

        //FIXME: This could be degenerate, but need to select d+1 non-coplanar points to bootstrap process
        var initialSimplex = points.slice(0, d+1);

        //Make sure initial simplex is positively oriented
        var o = orientation_1.apply(void 0, initialSimplex);
        if(o === 0) {
            throw new Error("Input not in general position")
        }
        var initialCoords = new Array(d+1);
        for(var i=0; i<=d; ++i) {
            initialCoords[i] = i;
        }
        if(o < 0) {
            initialCoords[0] = 1;
            initialCoords[1] = 0;
        }

        //Create initial topological index, glue pointers together (kind of messy)
        var initialCell = new Simplex(initialCoords, new Array(d+1), false);
        var boundary = initialCell.adjacent;
        var list = new Array(d+2);
        for(var i=0; i<=d; ++i) {
            var verts = initialCoords.slice();
            for(var j=0; j<=d; ++j) {
                if(j === i) {
                    verts[j] = -1;
                }
            }
            var t = verts[0];
            verts[0] = verts[1];
            verts[1] = t;
            var cell = new Simplex(verts, new Array(d+1), true);
            boundary[i] = cell;
            list[i] = cell;
        }
        list[d+1] = initialCell;
        for(var i=0; i<=d; ++i) {
            var verts = boundary[i].vertices;
            var adj = boundary[i].adjacent;
            for(var j=0; j<=d; ++j) {
                var v = verts[j];
                if(v < 0) {
                    adj[j] = initialCell;
                    continue
                }
                for(var k=0; k<=d; ++k) {
                    if(boundary[k].vertices.indexOf(v) < 0) {
                        adj[j] = boundary[k];
                    }
                }
            }
        }

        //Initialize triangles
        var triangles = new Triangulation(d, initialSimplex, list);

        //Insert remaining points
        var useRandom = !!randomSearch;
        for(var i=d+1; i<n; ++i) {
            triangles.insert(points[i], useRandom);
        }

        //Extract boundary cells
        return triangles.boundary()
    }

    function unique_pred(list, compare) {
        var ptr = 1
            , len = list.length
            , a=list[0], b=list[0];
        for(var i=1; i<len; ++i) {
            b = a;
            a = list[i];
            if(compare(a, b)) {
                if(i === ptr) {
                    ptr++;
                    continue
                }
                list[ptr++] = a;
            }
        }
        list.length = ptr;
        return list
    }

    function unique_eq(list) {
        var ptr = 1
            , len = list.length
            , a=list[0], b = list[0];
        for(var i=1; i<len; ++i, b=a) {
            b = a;
            a = list[i];
            if(a !== b) {
                if(i === ptr) {
                    ptr++;
                    continue
                }
                list[ptr++] = a;
            }
        }
        list.length = ptr;
        return list
    }

    function unique$1(list, compare, sorted) {
        if(list.length === 0) {
            return list
        }
        if(compare) {
            if(!sorted) {
                list.sort(compare);
            }
            return unique_pred(list, compare)
        }
        if(!sorted) {
            list.sort();
        }
        return unique_eq(list)
    }

    var uniq = unique$1;

    var triangulate_1 = triangulate;

    function LiftedPoint(p, i) {
        this.point = p;
        this.index = i;
    }

    function compareLifted(a, b) {
        var ap = a.point;
        var bp = b.point;
        var d = ap.length;
        for(var i=0; i<d; ++i) {
            var s = bp[i] - ap[i];
            if(s) {
                return s
            }
        }
        return 0
    }

    function triangulate1D(n, points, includePointAtInfinity) {
        if(n === 1) {
            if(includePointAtInfinity) {
                return [ [-1, 0] ]
            } else {
                return []
            }
        }
        var lifted = points.map(function(p, i) {
            return [ p[0], i ]
        });
        lifted.sort(function(a,b) {
            return a[0] - b[0]
        });
        var cells = new Array(n - 1);
        for(var i=1; i<n; ++i) {
            var a = lifted[i-1];
            var b = lifted[i];
            cells[i-1] = [ a[1], b[1] ];
        }
        if(includePointAtInfinity) {
            cells.push(
                [ -1, cells[0][1], ],
                [ cells[n-1][1], -1 ]);
        }
        return cells
    }

    function triangulate(points, includePointAtInfinity) {
        var n = points.length;
        if(n === 0) {
            return []
        }

        var d = points[0].length;
        if(d < 1) {
            return []
        }

        //Special case:  For 1D we can just sort the points
        if(d === 1) {
            return triangulate1D(n, points, includePointAtInfinity)
        }

        //Lift points, sort
        var lifted = new Array(n);
        var upper = 1.0;
        for(var i=0; i<n; ++i) {
            var p = points[i];
            var x = new Array(d+1);
            var l = 0.0;
            for(var j=0; j<d; ++j) {
                var v = p[j];
                x[j] = v;
                l += v * v;
            }
            x[d] = l;
            lifted[i] = new LiftedPoint(x, i);
            upper = Math.max(l, upper);
        }
        uniq(lifted, compareLifted);

        //Double points
        n = lifted.length;

        //Create new list of points
        var dpoints = new Array(n + d + 1);
        var dindex = new Array(n + d + 1);

        //Add steiner points at top
        var u = (d+1) * (d+1) * upper;
        var y = new Array(d+1);
        for(var i=0; i<=d; ++i) {
            y[i] = 0.0;
        }
        y[d] = u;

        dpoints[0] = y.slice();
        dindex[0] = -1;

        for(var i=0; i<=d; ++i) {
            var x = y.slice();
            x[i] = 1;
            dpoints[i+1] = x;
            dindex[i+1] = -1;
        }

        //Copy rest of the points over
        for(var i=0; i<n; ++i) {
            var h = lifted[i];
            dpoints[i + d + 1] = h.point;
            dindex[i + d + 1] =  h.index;
        }

        //Construct convex hull
        var hull = ich(dpoints, false);
        if(includePointAtInfinity) {
            hull = hull.filter(function(cell) {
                var count = 0;
                for(var j=0; j<=d; ++j) {
                    var v = dindex[cell[j]];
                    if(v < 0) {
                        if(++count >= 2) {
                            return false
                        }
                    }
                    cell[j] = v;
                }
                return true
            });
        } else {
            hull = hull.filter(function(cell) {
                for(var i=0; i<=d; ++i) {
                    var v = dindex[cell[i]];
                    if(v < 0) {
                        return false
                    }
                    cell[i] = v;
                }
                return true
            });
        }

        if(d & 1) {
            for(var i=0; i<hull.length; ++i) {
                var h = hull[i];
                var x = h[0];
                h[0] = h[1];
                h[1] = x;
            }
        }

        return hull
    }

    function dupe_array(count, value, i) {
        var c = count[i]|0;
        if(c <= 0) {
            return []
        }
        var result = new Array(c), j;
        if(i === count.length-1) {
            for(j=0; j<c; ++j) {
                result[j] = value;
            }
        } else {
            for(j=0; j<c; ++j) {
                result[j] = dupe_array(count, value, i+1);
            }
        }
        return result
    }

    function dupe_number(count, value) {
        var result, i;
        result = new Array(count);
        for(i=0; i<count; ++i) {
            result[i] = value;
        }
        return result
    }

    function dupe(count, value) {
        if(typeof value === "undefined") {
            value = 0;
        }
        switch(typeof count) {
            case "number":
                if(count > 0) {
                    return dupe_number(count|0, value)
                }
                break
            case "object":
                if(typeof (count.length) === "number") {
                    return dupe_array(count, value, 0)
                }
                break
        }
        return []
    }

    var dup = dupe;

    var compress = compressExpansion;

    function compressExpansion(e) {
        var m = e.length;
        var Q = e[e.length-1];
        var bottom = m;
        for(var i=m-2; i>=0; --i) {
            var a = Q;
            var b = e[i];
            Q = a + b;
            var bv = Q - a;
            var q = b - bv;
            if(q) {
                e[--bottom] = Q;
                Q = q;
            }
        }
        var top = 0;
        for(var i=bottom; i<m; ++i) {
            var a = e[i];
            var b = Q;
            Q = a + b;
            var bv = Q - a;
            var q = b - bv;
            if(q) {
                e[top++] = q;
            }
        }
        e[top++] = Q;
        e.length = top;
        return e
    }

    var robustDeterminant = createCommonjsModule(function (module) {






        var NUM_EXPANDED = 6;

        function cofactor(m, c) {
            var result = new Array(m.length-1);
            for(var i=1; i<m.length; ++i) {
                var r = result[i-1] = new Array(m.length-1);
                for(var j=0,k=0; j<m.length; ++j) {
                    if(j === c) {
                        continue
                    }
                    r[k++] = m[i][j];
                }
            }
            return result
        }

        function matrix(n) {
            var result = new Array(n);
            for(var i=0; i<n; ++i) {
                result[i] = new Array(n);
                for(var j=0; j<n; ++j) {
                    result[i][j] = ["m[", i, "][", j, "]"].join("");
                }
            }
            return result
        }

        function sign(n) {
            if(n & 1) {
                return "-"
            }
            return ""
        }

        function generateSum(expr) {
            if(expr.length === 1) {
                return expr[0]
            } else if(expr.length === 2) {
                return ["sum(", expr[0], ",", expr[1], ")"].join("")
            } else {
                var m = expr.length>>1;
                return ["sum(", generateSum(expr.slice(0, m)), ",", generateSum(expr.slice(m)), ")"].join("")
            }
        }

        function determinant(m) {
            if(m.length === 2) {
                return ["sum(prod(", m[0][0], ",", m[1][1], "),prod(-", m[0][1], ",", m[1][0], "))"].join("")
            } else {
                var expr = [];
                for(var i=0; i<m.length; ++i) {
                    expr.push(["scale(", determinant(cofactor(m, i)), ",", sign(i), m[0][i], ")"].join(""));
                }
                return generateSum(expr)
            }
        }

        function compileDeterminant(n) {
            var proc = new Function("sum", "scale", "prod", "compress", [
                "function robustDeterminant",n, "(m){return compress(",
                determinant(matrix(n)),
                ")};return robustDeterminant", n].join(""));
            return proc(robustSum, robustScale, twoProduct_1, compress)
        }

        var CACHE = [
            function robustDeterminant0() { return [0] },
            function robustDeterminant1(m) { return [m[0][0]] }
        ];

        function generateDispatch() {
            while(CACHE.length < NUM_EXPANDED) {
                CACHE.push(compileDeterminant(CACHE.length));
            }
            var procArgs = [];
            var code = ["function robustDeterminant(m){switch(m.length){"];
            for(var i=0; i<NUM_EXPANDED; ++i) {
                procArgs.push("det" + i);
                code.push("case ", i, ":return det", i, "(m);");
            }
            code.push("}\
var det=CACHE[m.length];\
if(!det)\
det=CACHE[m.length]=gen(m.length);\
return det(m);\
}\
return robustDeterminant");
            procArgs.push("CACHE", "gen", code.join(""));
            var proc = Function.apply(undefined, procArgs);
            module.exports = proc.apply(undefined, CACHE.concat([CACHE, compileDeterminant]));
            for(var i=0; i<CACHE.length; ++i) {
                module.exports[i] = CACHE[i];
            }
        }

        generateDispatch();
    });

    var linsolve = createCommonjsModule(function (module) {



        var NUM_EXPAND = 6;

        function generateSolver(n) {
            var funcName = "robustLinearSolve" + n + "d";
            var code = ["function ", funcName, "(A,b){return ["];
            for(var i=0; i<n; ++i) {
                code.push("det([");
                for(var j=0; j<n; ++j) {
                    if(j > 0) {
                        code.push(",");
                    }
                    code.push("[");
                    for(var k=0; k<n; ++k) {
                        if(k > 0) {
                            code.push(",");
                        }
                        if(k === i) {
                            code.push("+b[", j, "]");
                        } else {
                            code.push("+A[", j, "][", k, "]");
                        }
                    }
                    code.push("]");
                }
                code.push("]),");
            }
            code.push("det(A)]}return ", funcName);
            var proc = new Function("det", code.join(""));
            if(n < 6) {
                return proc(robustDeterminant[n])
            }
            return proc(robustDeterminant)
        }

        function robustLinearSolve0d() {
            return [ 0 ]
        }

        function robustLinearSolve1d(A, b) {
            return [ [ b[0] ], [ A[0][0] ] ]
        }

        var CACHE = [
            robustLinearSolve0d,
            robustLinearSolve1d
        ];

        function generateDispatch() {
            while(CACHE.length < NUM_EXPAND) {
                CACHE.push(generateSolver(CACHE.length));
            }
            var procArgs = [];
            var code = ["function dispatchLinearSolve(A,b){switch(A.length){"];
            for(var i=0; i<NUM_EXPAND; ++i) {
                procArgs.push("s" + i);
                code.push("case ", i, ":return s", i, "(A,b);");
            }
            code.push("}var s=CACHE[A.length];if(!s)s=CACHE[A.length]=g(A.length);return s(A,b)}return dispatchLinearSolve");
            procArgs.push("CACHE", "g", code.join(""));
            var proc = Function.apply(undefined, procArgs);
            module.exports = proc.apply(undefined, CACHE.concat([CACHE, generateSolver]));
            for(var i=0; i<NUM_EXPAND; ++i) {
                module.exports[i] = CACHE[i];
            }
        }

        generateDispatch();
    });

    function dot(a, b) {
        var s = 0.0;
        var d = a.length;
        for(var i=0; i<d; ++i) {
            s += a[i] * b[i];
        }
        return s
    }

    function barycentricCircumcenter(points) {
        var N = points.length;
        if(N === 0) {
            return []
        }

        var D = points[0].length;
        var A = dup([points.length+1, points.length+1], 1.0);
        var b = dup([points.length+1], 1.0);
        A[N][N] = 0.0;
        for(var i=0; i<N; ++i) {
            for(var j=0; j<=i; ++j) {
                A[j][i] = A[i][j] = 2.0 * dot(points[i], points[j]);
            }
            b[i] = dot(points[i], points[i]);
        }
        var x = linsolve(A, b);

        var denom = 0.0;
        var h = x[N+1];
        for(var i=0; i<h.length; ++i) {
            denom += h[i];
        }

        var y = new Array(N);
        for(var i=0; i<N; ++i) {
            var h = x[i];
            var numer = 0.0;
            for(var j=0; j<h.length; ++j) {
                numer += h[j];
            }
            y[i] =  numer / denom;
        }

        return y
    }

    function circumcenter$1(points) {
        if(points.length === 0) {
            return []
        }
        var D = points[0].length;
        var result = dup([D]);
        var weights = barycentricCircumcenter(points);
        for(var i=0; i<points.length; ++i) {
            for(var j=0; j<D; ++j) {
                result[j] += points[i][j] * weights[i];
            }
        }
        return result
    }

    circumcenter$1.barycenetric = barycentricCircumcenter;
    var circumcenter_1 = circumcenter$1;

    var crad = circumradius$1;



    function circumradius$1(points) {
        var center = circumcenter_1(points);
        var avgDist = 0.0;
        for(var i=0; i<points.length; ++i) {
            var p = points[i];
            for(var j=0; j<center.length; ++j) {
                avgDist += Math.pow(p[j] - center[j], 2);
            }
        }
        return Math.sqrt(avgDist / points.length)
    }

    var alpha = alphaComplex;




    function alphaComplex(alpha, points) {
        return triangulate_1(points).filter(function(cell) {
            var simplex = new Array(cell.length);
            for(var i=0; i<cell.length; ++i) {
                simplex[i] = points[cell[i]];
            }
            return crad(simplex) * alpha < 1
        })
    }

    var boundary_1$1 = boundary$1;

    function boundary$1 (cells) {
        var i, j, k;
        var n = cells.length;
        var sz = 0;
        for (i = 0; i < n; ++i) {
            sz += cells[i].length;
        }
        var result = new Array(sz);
        var ptr = 0;
        for (i = 0; i < n; ++i) {
            var c = cells[i];
            var d = c.length;
            for (j = 0; j < d; ++j) {
                var b = result[ptr++] = new Array(d - 1);
                var p = 0;
                for (k = 0; k < d; ++k) {
                    if (k === j) {
                        continue
                    }
                    b[p++] = c[k];
                }
                if (j & 1) {
                    var tmp = b[1];
                    b[1] = b[0];
                    b[0] = tmp;
                }
            }
        }
        return result
    }

    var compare$2 = compareCells$1;

    var min$2 = Math.min;

    function compareInt$1(a, b) {
        return a - b
    }

    function compareCells$1(a, b) {
        var n = a.length
            , t = a.length - b.length;
        if(t) {
            return t
        }
        switch(n) {
            case 0:
                return 0
            case 1:
                return a[0] - b[0]
            case 2:
                return (a[0]+a[1]-b[0]-b[1]) ||
                    min$2(a[0],a[1]) - min$2(b[0],b[1])
            case 3:
                var l1 = a[0]+a[1]
                    , m1 = b[0]+b[1];
                t = l1+a[2] - (m1+b[2]);
                if(t) {
                    return t
                }
                var l0 = min$2(a[0], a[1])
                    , m0 = min$2(b[0], b[1]);
                return min$2(l0, a[2]) - min$2(m0, b[2]) ||
                    min$2(l0+a[2], l1) - min$2(m0+b[2], m1)
            case 4:
                var aw=a[0], ax=a[1], ay=a[2], az=a[3]
                    , bw=b[0], bx=b[1], by=b[2], bz=b[3];
                return (aw+ax+ay+az)-(bw+bx+by+bz) ||
                    min$2(aw,ax,ay,az)-min$2(bw,bx,by,bz,bw) ||
                    min$2(aw+ax,aw+ay,aw+az,ax+ay,ax+az,ay+az) -
                    min$2(bw+bx,bw+by,bw+bz,bx+by,bx+bz,by+bz) ||
                    min$2(aw+ax+ay,aw+ax+az,aw+ay+az,ax+ay+az) -
                    min$2(bw+bx+by,bw+bx+bz,bw+by+bz,bx+by+bz)
            default:
                var as = a.slice().sort(compareInt$1);
                var bs = b.slice().sort(compareInt$1);
                for(var i=0; i<n; ++i) {
                    t = as[i] - bs[i];
                    if(t) {
                        return t
                    }
                }
                return 0
        }
    }

    var orientation_1$1 = orientation;

    function orientation(s) {
        var p = 1;
        for(var i=1; i<s.length; ++i) {
            for(var j=0; j<i; ++j) {
                if(s[i] < s[j]) {
                    p = -p;
                } else if(s[j] === s[i]) {
                    return 0
                }
            }
        }
        return p
    }

    var compare$3 = compareOrientedCells;

    function compareOrientedCells(a, b) {
        return compare$2(a, b) || orientation_1$1(a) - orientation_1$1(b)
    }

    var reduce = reduceCellComplex;

    function reduceCellComplex(cells) {
        cells.sort(compare$3);
        var n = cells.length;
        var ptr = 0;
        for(var i=0; i<n; ++i) {
            var c = cells[i];
            var o = orientation_1$1(c);
            if(o === 0) {
                continue
            }
            if(ptr > 0) {
                var f = cells[ptr-1];
                if(compare$2(c, f) === 0 &&
                    orientation_1$1(f)    !== o) {
                    ptr -= 1;
                    continue
                }
            }
            cells[ptr++] = c;
        }
        cells.length = ptr;
        return cells
    }

    var boundary_1$2 = boundary$2;




    function boundary$2(cells) {
        return reduce(boundary_1$1(cells))
    }

    var alpha$1 = alphaShape;




    function alphaShape(alpha$$1, points) {
        return boundary_1$2(alpha(alpha$$1, points))
    }

    function area(polygon) {
        var i = -1,
            n = polygon.length,
            a,
            b = polygon[n - 1],
            area = 0;

        while (++i < n) {
            a = b;
            b = polygon[i];
            area += a[1] * b[0] - a[0] * b[1];
        }

        return area / 2;
    }

    // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of

    function length(polygon) {
        var i = -1,
            n = polygon.length,
            b = polygon[n - 1],
            xa,
            ya,
            xb = b[0],
            yb = b[1],
            perimeter = 0;

        while (++i < n) {
            xa = xb;
            ya = yb;
            b = polygon[i];
            xb = b[0];
            yb = b[1];
            xa -= xb;
            ya -= yb;
            perimeter += Math.sqrt(xa * xa + ya * ya);
        }

        return perimeter;
    }

    function concaveHull(alpha, sites) {
        //check if the sites are on the same line
        if (isA2DLine(sites)) {
            //Just simply returns that sites as concave hull
            return [sites];
        }
        let cells = alpha$1(alpha, sites);
        //Switch to another delaunay + cut long edge algorithms
        if (cells.length === 0) {
            cells = concaveHull1(sites, 1 / alpha);
        }
        let hulls = [];
        processCells(cells, hulls);
        hulls = hulls.map(h => {
            //Get vertices
            let vertices = Array.from(h).map(item => {
                return sites[item];
            });
            return sortVerticies(vertices);
        });
        return hulls;
    }

    function concaveHullArea(hulls) {
        let total = 0;
        hulls.forEach(h => {
            total += Math.abs(area(h));//Still need to use Math.abs here since for the case of line => the sort vertices may return very small negative values
        });
        return total;
    }

    function concaveHullLength(hulls) {
        let total = 0;
        hulls.forEach(h => {
            total += length(h);
        });
        return total;
    }

    function convexHull(sites) {
        //check if the sites are on the same line
        if (isA2DLine(sites)) {
            //Just simply returns that sites as concave hull
            return sites;
        }
        const cells = alpha$1(0, sites);
        let h = Array.from(new Set(cells.flat()));
        //Get vertices
        let vertices = Array.from(h).map(item => {
            return sites[item];
        });
        return sortVerticies(vertices);
    }

    function convexHullArea(hull$$1) {
        return Math.abs(area(hull$$1));//Still need to use Math.abs here since for the case of line => the sort vertices may return very small negative values
    }

    //<editor-fold desc="Util to convert cells to hulls">
    function putCellToHulls(cell, hulls) {
        for (let i = 0; i < hulls.length; i++) {
            let hull$$1 = hulls[i];
            if (hull$$1.has(cell[0])) {
                hull$$1.add(cell[1]);
                return true;
            } else if (hull$$1.has(cell[1])) {
                hull$$1.add(cell[0]);
                return true;
            }
        }
        return false;
    }

    function processCells(cells, hulls) {
        if (cells.length === 0) {
            return;
        }
        //If loop through all cells but can't put into any hull then need to create new hull
        let processedIndice = [];
        cells.forEach((cell, i) => {
            if (putCellToHulls(cell, hulls)) {
                processedIndice.push(i);
            }
        });
        //If loop through all of them but none got put into the cells => we need to take first one from cells to create a new hull.
        if (processedIndice.length == 0) {
            //Put first one in the hull
            let cell = cells.shift();
            const hull$$1 = new Set(cell);
            hulls.push(hull$$1);
        } else {
            //Remove the processed items and continue.
            cells = cells.filter((v, i) => processedIndice.indexOf(i) < 0);
        }
        //Do this recursively
        processCells(cells, hulls);
    }

    function sortVerticies(points) {
        let center = findCentroid(points);
        points.sort((a, b) => {
            let a1 = (toDegrees(Math.atan2(a[0] - center[0], a[1] - center[1])) + 360) % 360;
            let a2 = (toDegrees(Math.atan2(b[0] - center[0], b[1] - center[1])) + 360) % 360;
            return Math.round(a1 - a2);
        });
        return points;

        function toDegrees(angle) {
            return angle * (180 / Math.PI);
        }

        function findCentroid(points) {
            let x = 0;
            let y = 0;
            points.forEach(p => {
                x += p[0];
                y += p[1];
            });
            let center = [];
            center.push(x / points.length);
            center.push(y / points.length);
            return center;
        }
    }

    //</editor-fold>

    //<editor-fold desc="Another way of calculating concave hull, basing on delaunay and removing long length">
    //Adapted from: https://bl.ocks.org/emeeks/9aa0478cf739164c9005
    function concaveHull1(sites, longEdge) {
        //TODO: Consider to reuse the previous delaunay result (but how to pass to this in a proper way)
        let delaunay = Delaunay.from(sites);
        //Remove the long distance edges
        let cells = [];
        longEdge = longEdge - 10e-3;//Substract it here since it will be added later
        let triangles = delaunay.triangles;
        //TODO: May need to check to convert from delaunay.points (x0, y0, x1, y1, ...) or take directly from sites like this.
        let points = sites;
        while (cells.length <= 0) {
            longEdge = longEdge + 10e-3;
            for (let i = 0; i < triangles.length; i += 3) {
                for (let j = 0; j < 3; j++) {
                    let d = distance(points[triangles[i + j]], points[triangles[i + (j + 1) % 3]]);
                    if (d < longEdge) {
                        cells.push([triangles[i + j], triangles[i + (j + 1) % 3]]);
                    }
                }
            }
        }
        //do the edge count
        let edgeCount = {};
        cells.forEach(edge => {
            let theKey = edge.sort().join(',');
            edgeCount[theKey] = edgeCount[theKey] ? edgeCount[theKey] : 0 + 1;
        });
        //Filter the inner edges (duplicated).
        cells = cells.filter(edge => {
            let theKey = edge.sort().join(',');
            return edgeCount[theKey] === 1;
        });
        //Next we remove the duplicated edges => only take the unique points.
        // cells = _.uniq(cells, false, d => d.sort().join(','));
        return cells;
    }

    //</editor-fold>

    //

    class Convex {
        constructor(tree, alpha) {
            this.tree = tree;
            this.alpha = 1/alpha;
        }

        /**
         * Returns convex score
         * @returns {number}
         */
        score() {
            let concaveArea = concaveHullArea(this.concaveHull());
            let convexArea = convexHullArea(this.convexHull());
            if(convexArea===0){
                return 0;
            }
            return concaveArea / convexArea;
        }

        concaveHull() {
            if(!this.cch){
                //Clone the tree to avoid modifying it
                let tree = JSON.parse(JSON.stringify(this.tree));
                let sites = tree.nodes.map(d => d.id);
                let cch = concaveHull(this.alpha, sites);
                // while(cch.length == 0   ){
                //     // //Add a random factor to avoid removing all points
                //     // const newSites = sites.map(p=>{
                //     //     let newP = [];
                //     //     for (let i = 0; i < p.length; i++) {
                //     //         newP[i] = p[i] + (Math.random() - 0.5)*10e-5;
                //     //     }
                //     //     return newP;
                //     // });
                //     // cch = concaveHull(this.alpha, newSites);
                //     //Change alpha a little bit
                //     // this.alpha = this.alpha - 10e-3;
                //     // cch = concaveHull(this.alpha, sites);
                //
                //     //switch to delaunay way of calculating alpha shape.
                //     cch = concaveHull1(scagnostics.delaunay, 1/this.alpha);
                // }
                this.cch = cch;
            }
            return this.cch;
        }

        convexHull() {
            if(!this.cvh){
                //Clone the tree to avoid modifying it
                let tree = JSON.parse(JSON.stringify(this.tree));
                let sites = tree.nodes.map(d => d.id);
                this.cvh = convexHull(sites);
            }
            return this.cvh;
        }
    }

    class Skinny {
        constructor(alphaHull) {
            //Clone it in order to avoid modifying it.
            this.alphaHull = alphaHull.slice();
        }
        /**
         * Returns skinny score
         * @returns {number}
         */
        score() {
            return 1 - Math.sqrt(4*Math.PI*concaveHullArea(this.alphaHull))/concaveHullLength(this.alphaHull);
        }
    }

    class Stringy {
        constructor(tree) {
            //Clone the tree to avoid modifying it
            this.tree = JSON.parse(JSON.stringify(tree));
        }

        /**
         * Returns striated score
         * @returns {number}
         */
        score() {
            //Loop through the nodes.
            let verticesCount = this.tree.nodes.length;
            let v2Count = this.getAllV2Corners().length;
            let v1Count = this.getAllV1s().length;
            return v2Count/(verticesCount-v1Count);
        }

        /**
         * This function returns corners (three vertices) of vertices of degree two in the for mat of
         * point1, point2, point3 => point1 is the the vertex with degree two (two edges connected to it are [point1, point2] and [point1, point3] (order of the points in each edge is not important)).
         * @returns {Array}
         */
        getAllV2Corners(){
            return getAllV2CornersFromTree(this.tree);
        }

        /**
         * This function returns
         * @returns {Array}
         */
        getAllV1s(){
            return getAllV1sFromTree(this.tree);
        }
    }

    class Monotonic {
        constructor(points) {
            //Clone it in order to avoid modifying it.
            this.points = points.slice(0);
        }
        /**
         * Returns monotonic score
         * @returns {number}
         */
        score() {
            let xArr = [];
            let yArr = [];
            this.points.forEach(p=>{
                xArr.push(p[0]);
                yArr.push(p[1]);
            });
            let r = computeSpearmans(xArr, yArr);
            return Math.pow(r, 2);

            /**Adopted from: https://bl.ocks.org/nkullman/f65d5619843dc22e061d957249121408**/
            function computeSpearmans(arrX, arrY) {
                // simple error handling for input arrays of nonequal lengths
                if (arrX.length !== arrY.length) { return null; }

                // number of observations
                let n = arrX.length;

                // rank datasets
                let xRanked = rankArray(arrX),
                    yRanked = rankArray(arrY);

                // sum of distances between ranks
                let dsq = 0;
                for (let i = 0; i < n; i++) {
                    dsq += Math.pow(xRanked[i] - yRanked[i], 2);
                }

                // compute correction for ties
                let xTies = countTies(arrX),
                    yTies = countTies(arrY);
                let xCorrection = 0,
                    yCorrection = 0;
                for (let tieLength in xTies) {
                    xCorrection += xTies[tieLength] * tieLength * (Math.pow(tieLength, 2) - 1);
                }
                xCorrection /= 12.0;
                for (let tieLength in yTies) {
                    yCorrection += yTies[tieLength] * tieLength * (Math.pow(tieLength, 2) - 1);
                }
                yCorrection /= 12.0;

                // denominator
                let denominator = n * (Math.pow(n, 2) - 1) / 6.0;

                // compute rho
                let rho = denominator - dsq - xCorrection - yCorrection;

                let x = (denominator - 2 * xCorrection) * (denominator - 2 * yCorrection);

                if(x<=0){
                    return 0;
                }else{
                    rho /= Math.sqrt(x);
                }

                return rho;
            }
            /** Computes the rank array for arr, where each entry in arr is
             * assigned a value 1 thru n, where n is arr.length.
             *
             * Tied entries in arr are each given the average rank of the ties.
             * Lower ranks are not increased
             */
            function rankArray(arr) {

                // ranking without averaging
                let sorted = arr.slice().sort(function (a, b) { return b - a });
                let ranks = arr.slice().map(function (v) { return sorted.indexOf(v) + 1 });

                // counts of each rank
                let counts = {};
                ranks.forEach(function (x) { counts[x] = (counts[x] || 0) + 1; });

                // average duplicates
                ranks = ranks.map(function (x) { return x + 0.5 * ((counts[x] || 0) - 1); });

                return ranks;
            }
            /** Counts the number of ties in arr, and returns
             * an object with
             * a key for each tie length (an entry n for each n-way tie) and
             * a value corresponding to the number of key-way (n-way) ties
             */
            function countTies(arr) {
                let ties = {},
                    arrSorted = arr.slice().sort(),
                    currValue = arrSorted[0],
                    tieLength = 1;

                for (let i = 1; i < arrSorted.length; i++) {
                    if (arrSorted[i] === currValue) {
                        tieLength++;
                    } else {
                        if (tieLength > 1) {
                            if (ties[tieLength] === undefined) ties[tieLength] = 0;
                            ties[tieLength]++;
                        }
                        currValue = arrSorted[i];
                        tieLength = 1;
                    }
                }
                if (tieLength > 1) {
                    if (ties[tieLength] === undefined) ties[tieLength] = 0;
                    ties[tieLength]++;
                }
                return ties;
            }
        }
    }

    class Normalizer {
        constructor(points) {
            this.points = points.slice(0);
            let [xArr, yArr] = [this.xArr, this.yArr] = underscore.unzip(this.points),
                maxX = this.maxX = underscore.max(xArr),
                minX = this.minX = underscore.min(xArr),
                maxY = this.maxY = underscore.max(yArr),
                minY = this.minY = underscore.min(yArr),
                rangeX = this.rangeX = (maxX!=minX) ? maxX - minX: 1,
                rangeY = this.rangeY = (maxY!=minY) ? maxY - minY: 1,
                normalizedXArr = this.normalizedXArr = xArr.map(x => (x - minX) / rangeX),
                normalizedYArr = this.normalizedYArr = yArr.map(y => (y - minY) / rangeY);
            this.normalizedPoints = underscore.zip(normalizedXArr, normalizedYArr);
            //Add one step to pass the data over if there is.
            let length = this.points.length;
            for (let i = 0; i < length; i++) {
                this.normalizedPoints[i].data = this.points[i].data;
            }
        }

        /**
         * Input a set of points in this scale range [0, 1] and will be scaled back to
         * - Original scale ([minX, maxX], [minY, maxY])
         * @param points
         */
        scaleBackPoints(points) {
            return points.map(point=>{
                return this.scaleBackPoint(point);
            });
        }
        /**
         * Input a single point in this scale range [0, 1] and will be scaled back to
         * - Original scale ([minX, maxX], [minY, maxY])
         * @param points
         */
        scaleBackPoint(point) {
            let xs = point[0],
                x = this.rangeX * xs + this.minX,
                ys = point[1],
                y = this.rangeY * ys + this.minY;
            return [x, y];
        }
    }

    class LeaderBinner{
        constructor(points, radius){
            //TODO: Should check if there are more than 3 unique values here or even after the binning.
            //TODO: May need to clone the points to avoid modifying it, but we don't do to reserve other data or to make the process faster
            // //Clone these to avoid modifying them
            // this.points = points.map(p=>p.slice(0));
            this.points = points;
            this.radius = radius;
        }
        get leaders(){
            let self = this;
            let theLeaders = [];
            //find all the leaders
            this.points.forEach(point=>{
                let leader = closestLeader(theLeaders, point);
                if(!leader){
                    let newLeader = [];
                    newLeader.x = point[0];
                    newLeader.y = point[1];
                    theLeaders.push(newLeader);
                }
            });
            //now do this again to set the closest leader.
            this.points.forEach(point=>{
                let leader = closestLeader(theLeaders, point);
                leader.push(point);
            });
            return theLeaders;
            function closestLeader(leaders, point){
                let length = leaders.length;
                let minDistance = 2;//select 2 since normalized distance can't  be greater than 2.
                let theLeader = null;
                for (let i = 0; i < length; ++i) {
                    let l = leaders[i];
                    let d = distance([l.x, l.y], point);
                    if(d< self.radius){
                        if(d<minDistance){
                            minDistance = d;
                            theLeader = l;
                        }
                    }
                }
                return theLeader;

                // let distances = leaders.map(l=>distance([l.x, l.y], point));
                // //Filter the distance to be <= the radius
                // let copiedDistances = distances.filter(d=>d<self.radius);
                // if(copiedDistances.length===0){
                //     return null;
                // }
                // let theDistance = _.min(distances);
                // let theLeader = leaders[distances.indexOf(theDistance)];
                // return theLeader;
            }
        }
    }

    //Inspired from https://github.com/d3/d3-hexbin/blob/master/src/hexbin.js
    function Binner(){
        let thirdPi = Math.PI/3,
            angles = [0, thirdPi, 2*thirdPi, 3*thirdPi, 4*thirdPi, 5*thirdPi];

        function pointX(d){
            return d[0];
        }
        function pointY(d){
            return d[1];
        }

        var x0 = 0,
            y0 = 0,
            x1 = 1,
            y1 = 1,
            x = pointX,
            y = pointY,
            r,
            dx,
            dy;

        function hexbin(points){
            var binsById = {}, bins = [], i, n = points.length;

            for (i = 0; i < n; ++i) {
                if (isNaN(px = +x.call(null, point = points[i], i, points))
                    || isNaN(py = +y.call(null, point, i, points))) continue;

                var point,
                    px,
                    py,
                    pj = Math.round(py = py / dy),
                    pi = Math.round(px = px / dx - (pj & 1) / 2),
                    py1 = py - pj;

                if (Math.abs(py1) * 3 > 1) {
                    var px1 = px - pi,
                        pi2 = pi + (px < pi ? -1 : 1) / 2,
                        pj2 = pj + (py < pj ? -1 : 1),
                        px2 = px - pi2,
                        py2 = py - pj2;
                    if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;
                }

                var id = pi + "-" + pj, bin = binsById[id];
                if (bin) bin.push(point);
                else {
                    bins.push(bin = binsById[id] = [point]);
                    bin.x = (pi + (pj & 1) / 2) * dx;
                    bin.y = pj * dy;
                    //TODO: fix this since there are results with bin.x, bin.y > 1 => we may need to do the rounding.
                    // if(bin.x>1){bin.x = 1;}
                    // if(bin.y>1){bin.y =1;}
                }
            }

            return bins;
        }
        function hexagon(radius){
            var x0 = 0, y0 = 0;
            return angles.map(function(angle) {
                var x1 = Math.sin(angle) * radius,
                    y1 = -Math.cos(angle) * radius,
                    dx = x1 - x0,
                    dy = y1 - y0;
                x0 = x1, y0 = y1;

                return [dx, dy];
            });
        }

        //Export it
        this.hexbin = hexbin;
        this.hexagon = function(radius){
            return "m" + hexagon(radius == null ? r : +radius).join("l") + "z";
        };
        this.centers = function(){
            var centers = [],
                j = Math.round(y0 / dy),
                i = Math.round(x0 / dx);
            for (var y = j * dy; y < y1 + r; y += dy, ++j) {
                for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {
                    centers.push([x, y]);
                }
            }
            return centers;
        };
        this.mesh = function(){
            var fragment = hexagon(r).slice(0, 4).join("l");
            return hexbin.centers().map(function(p) { return "M" + p + "m" + fragment; }).join("");
        };
        //Setters/getters
        this.x = function(_){
            return arguments.length ? (x = _, this) : x;
        };
        this.y = function(_){
            return arguments.length ? (y = _, this) : y;
        };
        this.radius = function(_){
            return arguments.length ? (r= +_, dx = r * 2 * Math.sin(thirdPi), dy = r*1.5, this): r;
        };
        this.size = function(_) {
            return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], this) : [x1 - x0, y1 - y0];
        };
        this.extent = function(_){
            return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], this): [[x0, y0], [x1, y1]];
        };

        return this.radius(1);
    }

    class RectangularBinner {
        constructor(points, gridNumber) {
            //TODO: Should check if there are more than 3 unique values here or even after the binning.
            //TODO: May need to clone the points to avoid modifying it, but we don't do to reserve other data or to make the process faster
            // //Clone these to avoid modifying them
            // this.points = points.map(p=>p.slice(0));
            this.points = points;
            this.gridNumber = gridNumber;
            this.gridSize = 1.0 / gridNumber;
        }

        get rectangles() {
            let points = this.points;
            let gridNumber = this.gridNumber;
            let gridSize = 1.0 / gridNumber;
            let bins = [];
            for (let i = 0; i < gridNumber; i++) {
                let b = [];
                for (let j = 0; j < gridNumber; j++) {
                    b = [];//bin as an empty array.
                }
                bins.push(b);
            }

            let n = points.length;
            for (let pi = 0; pi < n; pi++) {
                let point = points[pi];
                let x = point[0];
                let y = point[1];
                let j = x == 1 ? gridNumber - 1 : Math.floor(x / gridSize);
                let i = y == 0 ? gridNumber - 1 : Math.floor((1 - y) / gridSize);
                bins[i][j].push(point);
            }
            return bins;
        }
    }

    if (!window) {
        window = self;
    }
    (function (window) {
        /**
         * initialize a scagnostic object
         * @param inputPoints   {*[][]} set of points from the scatter plot
         * @param options   Scagnostics options {binType,startBinGridSize, isNormalized, isBinned, outlyingUpperBound, minBins, maxBins}
         * @return scag Scagnostics object with scores and intermediate computation results.
         */
        window.scagnostics = function (inputPoints, options = {}) {
            let thisInstance = this;
            let binType = options.binType,
                startBinGridSize = options.startBinGridSize,
                isNormalized = options.isNormalized,
                isBinned = options.isBinned,
                outlyingUpperBound = options.outlyingUpperBound,
                minBins = options.minBins,
                maxBins = options.maxBins;
            //Clone it to avoid modifying it.
            let points = inputPoints.slice(0);
            let normalizedPoints = points;
            /******This section is about normalizing the data******/
            if (!isNormalized) {
                let normalizer = new Normalizer(points);
                normalizedPoints = normalizer.normalizedPoints;
            }
            outputValue("normalizedPoints", normalizedPoints);
            /******This section is about finding number of bins and binners******/
            let sites = null;
            let bins = null;
            let binner = null;
            let binSize = null;
            let binRadius = 0;

            if (!isBinned) {//Only do the binning if needed.
                if (!startBinGridSize) {
                    startBinGridSize = 40;
                }
                bins = [];
                //Default number of bins
                let minNumOfBins = 50;
                let maxNumOfBins = 500;
                if (minBins) {
                    minNumOfBins = minBins;
                }
                if (maxBins) {
                    maxNumOfBins = maxBins;
                }
                //Don't do the binning if the unique set of values are less than 50. Just return the unique set.
                let uniqueKeys = underscore.uniq(normalizedPoints.map(p => p.join(',')));
                let groups = underscore.groupBy(normalizedPoints, p => p.join(','));
                if (uniqueKeys.length < minNumOfBins) {
                    uniqueKeys.forEach(key => {
                        let bin = groups[key];
                        //Take the coordinate of the first point in the group to be the bin leader (they should have the same points actually=> so just take the first one.
                        bin.x = bin[0][0];
                        bin.y = bin[0][1];
                        bin.binRadius = 0;
                        bins.push(bin);
                    });
                } else {
                    do {
                        //Start with 40x40 bins, and divided by 2 every time there are more than maxNumberofBins none empty cells, increase 5 (+5) if less than minNumberOfBins
                        if (binSize === null) {
                            binSize = startBinGridSize;
                        } else if (bins.length > maxNumOfBins) {
                            binSize = binSize / 2;
                        } else if (bins.length < minNumOfBins) {
                            binSize = binSize + 5;
                        }
                        if (binType === "hexagon") {
                            // This section uses hexagon binning
                            let shortDiagonal = 1 / binSize;
                            binRadius = shortDiagonal / Math.sqrt(2);
                            // binRadius = shortDiagonal / (2 * Math.sin(Math.PI / 3));
                            binner = new Binner().radius(binRadius).extent([[0, 0], [1, 1]]);//extent from [0, 0] to [1, 1] since we already normalized data.
                            bins = binner.hexbin(normalizedPoints);
                        } else if (binType === "rectangular") {
                            // This section uses hexagon binning
                            let binWidth = 1 / binSize;
                            binRadius = binWidth;
                            binner = new RectangularBinner(normalizedPoints, binSize);
                            bins = binner.rectangles();
                        } else if (!binType || binType === "leader") {
                            // This section uses leader binner
                            binRadius = 1 / (binSize * 2);
                            binner = new LeaderBinner(normalizedPoints, binRadius);
                            bins = binner.leaders;
                        }
                    } while (bins.length > maxNumOfBins || bins.length < minNumOfBins);
                }
                sites = bins.map(d => [d.x, d.y]); //=>sites are the set of centers of all bins
                /******This section is about the binning and binning results******/
                outputValue("binner", binner);
                outputValue("bins", bins);
                outputValue("binSize", binSize);
                outputValue("binRadius", binRadius);
            } else {
                sites = normalizedPoints;
            }

            outputValue("binnedSites", sites);

            /******This section is about the triangulating and triangulating results******/

                // Triangulation calculation
                // If it is a line then we don't do the triangulation
            let delaunay = delaunayFromPoints(sites);
            let triangles = delaunay.triangles;
            let triangleCoordinates = delaunay.triangleCoordinates();
            //Assigning output values
            outputValue("delaunay", delaunay);
            outputValue("triangles", triangles);
            outputValue("triangleCoordinates", triangleCoordinates);

            /******This section is about the spanning tree and spanning tree results******/
                //Spanning tree calculation
            let graph = createGraph(triangleCoordinates);
            let mstree = mst(graph);
            //Assigning the output values
            outputValue("graph", graph);
            outputValue("mst", mstree);

            /******This section is about the outlying score and outlying score results******/
            let outlying = new Outlying(mstree);
            let outlyingScore = outlying.score();
            outlyingUpperBound = outlying.upperBound;
            let outlyingLinks = outlying.links();
            let outlyingPoints = outlying.points();
            let noOutlyingTree = outlying.removeOutlying();
            outputValue("outlyingScore", outlyingScore);
            outputValue("outlyingUpperBound", outlyingUpperBound);
            outputValue("outlyingLinks", outlyingLinks);
            outputValue("outlyingPoints", outlyingPoints);
            outputValue("noOutlyingTree", noOutlyingTree);

            /******This section is about the skewed score and skewed score results******/
            let skewed = new Skewed(noOutlyingTree);
            outputValue("skewedScore", skewed.score());

            /******This section is about the sparse score and sparse score results******/
            let sparse = new Sparse(noOutlyingTree);
            outputValue("sparseScore", sparse.score());

            /******This section is about the clumpy score and clumpy score results******/
                //TODO: Check this again, we may put in either original or no outlying tree => currently using original since need to keep the long edges which connect the clusters
                // let clumpy = new Clumpy(mstree);
            let clumpy = new Clumpy(noOutlyingTree);
            outputValue("clumpy", clumpy);
            outputValue("clumpyScore", clumpy.score());

            /******This section is about the striated score and striated score results******/
            let striated = new Striated(noOutlyingTree);
            let v2Corners = striated.getAllV2Corners();
            let obtuseV2Corners = striated.getAllObtuseV2Corners();
            outputValue("striatedScore", striated.score());
            outputValue("v2Corners", v2Corners);
            outputValue("obtuseV2Corners", obtuseV2Corners);

            /******This section is about the convex hull and convex hull results******/
            let convex = new Convex(noOutlyingTree, outlyingUpperBound);
            let convexHull = convex.convexHull();
            outputValue("convexHull", convexHull);

            /******This section is about the concave hull and concave hull results******/
            let concaveHull = convex.concaveHull();
            outputValue("concaveHull", concaveHull);

            /******This section is about the convex score and convex score results******/
            let convexScore = convex.score();
            outputValue("convexScore", convexScore);

            /******This section is about the skinny score and skinny score results******/
            let skinny = new Skinny(concaveHull);
            let skinnyScore = skinny.score();
            outputValue("skinnyScore", skinnyScore);

            /******This section is about the stringy score and stringy score results******/
            let stringy = new Stringy(noOutlyingTree);
            let v1s = stringy.getAllV1s();
            let stringyScore = stringy.score();
            outputValue("v1s", v1s);
            outputValue("stringyScore", stringyScore);

            /******This section is about the monotonic score and monotonic score results******/
            let monotonic = new Monotonic(noOutlyingTree.nodes.map(n => n.id));
            let monotonicScore = monotonic.score();
            outputValue("monotonicScore", monotonicScore);

            return this;

            function outputValue(name, value) {
                thisInstance[name] = value;
            }
        };

    })(window);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhZ25vc3RpY3MubWluLmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9rcnVza2FsLW1zdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW1wbGUtc3RhdGlzdGljcy9kaXN0L3NpbXBsZS1zdGF0aXN0aWNzLm1qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvY2x1bXB5LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlbGF1bmF0b3IvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZGVsYXVuYXkvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZGVsYXVuYXkvc3JjL3BvbHlnb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZGVsYXVuYXkvc3JjL3Zvcm9ub2kuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZGVsYXVuYXkvc3JjL2RlbGF1bmF5LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9kZWxhdW5heS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvb3V0bHlpbmcuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL3NrZXdlZC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvc3BhcnNlLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9zdHJpYXRlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90d28tcHJvZHVjdC90d28tcHJvZHVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yb2J1c3Qtc3VtL3JvYnVzdC1zdW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHdvLXN1bS90d28tc3VtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvYnVzdC1zY2FsZS9yb2J1c3Qtc2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9idXN0LXN1YnRyYWN0L3JvYnVzdC1kaWZmLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvYnVzdC1vcmllbnRhdGlvbi9vcmllbnRhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9iaXQtdHdpZGRsZS90d2lkZGxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3VuaW9uLWZpbmQvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2ltcGxpY2lhbC1jb21wbGV4L3RvcG9sb2d5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2luY3JlbWVudGFsLWNvbnZleC1odWxsL2ljaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy91bmlxL3VuaXEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZGVsYXVuYXktdHJpYW5ndWxhdGUvdHJpYW5ndWxhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZHVwL2R1cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yb2J1c3QtY29tcHJlc3MvY29tcHJlc3MuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9idXN0LWRldGVybWluYW50L3JvYnVzdC1kZXRlcm1pbmFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yb2J1c3QtbGluZWFyLXNvbHZlL2xpbnNvbHZlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NpcmN1bWNlbnRlci9jaXJjdW1jZW50ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2lyY3VtcmFkaXVzL2NyYWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYWxwaGEtY29tcGxleC9hbHBoYS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9ib3VuZGFyeS1jZWxscy9ib3VuZGFyeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jb21wYXJlLWNlbGwvY29tcGFyZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jZWxsLW9yaWVudGF0aW9uL29yaWVudGF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBhcmUtb3JpZW50ZWQtY2VsbC9jb21wYXJlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlZHVjZS1zaW1wbGljaWFsLWNvbXBsZXgvcmVkdWNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3NpbXBsaWNpYWwtY29tcGxleC1ib3VuZGFyeS9ib3VuZGFyeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9hbHBoYS1zaGFwZS9hbHBoYS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9hcmVhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2Nyb3NzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2xlbmd0aC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvaHVsbHMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2NvbnZleC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvc2tpbm55LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9zdHJpbmd5LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9tb25vdG9uaWMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL25vcm1hbGl6ZXIuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2xlYWRlcmJpbm5lci5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvYmlubmVyLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9yZWN0YW5ndWxhcmJpbm5lci5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL3NjYWdub3N0aWNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICAgICBVbmRlcnNjb3JlLmpzIDEuOS4xXG4vLyAgICAgaHR0cDovL3VuZGVyc2NvcmVqcy5vcmdcbi8vICAgICAoYykgMjAwOS0yMDE4IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4vLyAgICAgVW5kZXJzY29yZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIC8vIEJhc2VsaW5lIHNldHVwXG4gIC8vIC0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gRXN0YWJsaXNoIHRoZSByb290IG9iamVjdCwgYHdpbmRvd2AgKGBzZWxmYCkgaW4gdGhlIGJyb3dzZXIsIGBnbG9iYWxgXG4gIC8vIG9uIHRoZSBzZXJ2ZXIsIG9yIGB0aGlzYCBpbiBzb21lIHZpcnR1YWwgbWFjaGluZXMuIFdlIHVzZSBgc2VsZmBcbiAgLy8gaW5zdGVhZCBvZiBgd2luZG93YCBmb3IgYFdlYldvcmtlcmAgc3VwcG9ydC5cbiAgdmFyIHJvb3QgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGYgJiYgc2VsZiB8fFxuICAgICAgICAgICAgdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwuZ2xvYmFsID09PSBnbG9iYWwgJiYgZ2xvYmFsIHx8XG4gICAgICAgICAgICB0aGlzIHx8XG4gICAgICAgICAgICB7fTtcblxuICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYF9gIHZhcmlhYmxlLlxuICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fO1xuXG4gIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBTeW1ib2xQcm90byA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sLnByb3RvdHlwZSA6IG51bGw7XG5cbiAgLy8gQ3JlYXRlIHF1aWNrIHJlZmVyZW5jZSB2YXJpYWJsZXMgZm9yIHNwZWVkIGFjY2VzcyB0byBjb3JlIHByb3RvdHlwZXMuXG4gIHZhciBwdXNoID0gQXJyYXlQcm90by5wdXNoLFxuICAgICAgc2xpY2UgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgICAgdG9TdHJpbmcgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICAgIGhhc093blByb3BlcnR5ID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXIgbmF0aXZlSXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgICBuYXRpdmVLZXlzID0gT2JqZWN0LmtleXMsXG4gICAgICBuYXRpdmVDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4gIC8vIE5ha2VkIGZ1bmN0aW9uIHJlZmVyZW5jZSBmb3Igc3Vycm9nYXRlLXByb3RvdHlwZS1zd2FwcGluZy5cbiAgdmFyIEN0b3IgPSBmdW5jdGlvbigpe307XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGVpciBvbGQgbW9kdWxlIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0LlxuICAvLyAoYG5vZGVUeXBlYCBpcyBjaGVja2VkIHRvIGVuc3VyZSB0aGF0IGBtb2R1bGVgXG4gIC8vIGFuZCBgZXhwb3J0c2AgYXJlIG5vdCBIVE1MIGVsZW1lbnRzLilcbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmICFleHBvcnRzLm5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXztcbiAgICB9XG4gICAgZXhwb3J0cy5fID0gXztcbiAgfSBlbHNlIHtcbiAgICByb290Ll8gPSBfO1xuICB9XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxuICBfLlZFUlNJT04gPSAnMS45LjEnO1xuXG4gIC8vIEludGVybmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBlZmZpY2llbnQgKGZvciBjdXJyZW50IGVuZ2luZXMpIHZlcnNpb25cbiAgLy8gb2YgdGhlIHBhc3NlZC1pbiBjYWxsYmFjaywgdG8gYmUgcmVwZWF0ZWRseSBhcHBsaWVkIGluIG90aGVyIFVuZGVyc2NvcmVcbiAgLy8gZnVuY3Rpb25zLlxuICB2YXIgb3B0aW1pemVDYiA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgcmV0dXJuIGZ1bmM7XG4gICAgc3dpdGNoIChhcmdDb3VudCA9PSBudWxsID8gMyA6IGFyZ0NvdW50KSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgICAvLyBUaGUgMi1hcmd1bWVudCBjYXNlIGlzIG9taXR0ZWQgYmVjYXVzZSB3ZeKAmXJlIG5vdCB1c2luZyBpdC5cbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9O1xuICAgICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBidWlsdGluSXRlcmF0ZWU7XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgY2FsbGJhY2tzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdG8gZWFjaFxuICAvLyBlbGVtZW50IGluIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBkZXNpcmVkIHJlc3VsdCDigJQgZWl0aGVyIGBpZGVudGl0eWAsXG4gIC8vIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAoXy5pdGVyYXRlZSAhPT0gYnVpbHRpbkl0ZXJhdGVlKSByZXR1cm4gXy5pdGVyYXRlZSh2YWx1ZSwgY29udGV4dCk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBfLmlkZW50aXR5O1xuICAgIGlmIChfLmlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm4gb3B0aW1pemVDYih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpO1xuICAgIGlmIChfLmlzT2JqZWN0KHZhbHVlKSAmJiAhXy5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIF8ubWF0Y2hlcih2YWx1ZSk7XG4gICAgcmV0dXJuIF8ucHJvcGVydHkodmFsdWUpO1xuICB9O1xuXG4gIC8vIEV4dGVybmFsIHdyYXBwZXIgZm9yIG91ciBjYWxsYmFjayBnZW5lcmF0b3IuIFVzZXJzIG1heSBjdXN0b21pemVcbiAgLy8gYF8uaXRlcmF0ZWVgIGlmIHRoZXkgd2FudCBhZGRpdGlvbmFsIHByZWRpY2F0ZS9pdGVyYXRlZSBzaG9ydGhhbmQgc3R5bGVzLlxuICAvLyBUaGlzIGFic3RyYWN0aW9uIGhpZGVzIHRoZSBpbnRlcm5hbC1vbmx5IGFyZ0NvdW50IGFyZ3VtZW50LlxuICBfLml0ZXJhdGVlID0gYnVpbHRpbkl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gY2IodmFsdWUsIGNvbnRleHQsIEluZmluaXR5KTtcbiAgfTtcblxuICAvLyBTb21lIGZ1bmN0aW9ucyB0YWtlIGEgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50cywgb3IgYSBmZXcgZXhwZWN0ZWRcbiAgLy8gYXJndW1lbnRzIGF0IHRoZSBiZWdpbm5pbmcgYW5kIHRoZW4gYSB2YXJpYWJsZSBudW1iZXIgb2YgdmFsdWVzIHRvIG9wZXJhdGVcbiAgLy8gb24uIFRoaXMgaGVscGVyIGFjY3VtdWxhdGVzIGFsbCByZW1haW5pbmcgYXJndW1lbnRzIHBhc3QgdGhlIGZ1bmN0aW9u4oCZc1xuICAvLyBhcmd1bWVudCBsZW5ndGggKG9yIGFuIGV4cGxpY2l0IGBzdGFydEluZGV4YCksIGludG8gYW4gYXJyYXkgdGhhdCBiZWNvbWVzXG4gIC8vIHRoZSBsYXN0IGFyZ3VtZW50LiBTaW1pbGFyIHRvIEVTNuKAmXMgXCJyZXN0IHBhcmFtZXRlclwiLlxuICB2YXIgcmVzdEFyZ3VtZW50cyA9IGZ1bmN0aW9uKGZ1bmMsIHN0YXJ0SW5kZXgpIHtcbiAgICBzdGFydEluZGV4ID0gc3RhcnRJbmRleCA9PSBudWxsID8gZnVuYy5sZW5ndGggLSAxIDogK3N0YXJ0SW5kZXg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KGFyZ3VtZW50cy5sZW5ndGggLSBzdGFydEluZGV4LCAwKSxcbiAgICAgICAgICByZXN0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXggKyBzdGFydEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoc3RhcnRJbmRleCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpcywgcmVzdCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCBhcmd1bWVudHNbMF0sIHJlc3QpO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIHJlc3QpO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShzdGFydEluZGV4ICsgMSk7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBzdGFydEluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIGFyZ3Nbc3RhcnRJbmRleF0gPSByZXN0O1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSBhbm90aGVyLlxuICB2YXIgYmFzZUNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgIGlmICghXy5pc09iamVjdChwcm90b3R5cGUpKSByZXR1cm4ge307XG4gICAgaWYgKG5hdGl2ZUNyZWF0ZSkgcmV0dXJuIG5hdGl2ZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgIEN0b3IucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgIHZhciByZXN1bHQgPSBuZXcgQ3RvcjtcbiAgICBDdG9yLnByb3RvdHlwZSA9IG51bGw7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgc2hhbGxvd1Byb3BlcnR5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiA9PSBudWxsID8gdm9pZCAwIDogb2JqW2tleV07XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGFzID0gZnVuY3Rpb24ob2JqLCBwYXRoKSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwYXRoKTtcbiAgfVxuXG4gIHZhciBkZWVwR2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoKSB7XG4gICAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICAgIG9iaiA9IG9ialtwYXRoW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aCA/IG9iaiA6IHZvaWQgMDtcbiAgfTtcblxuICAvLyBIZWxwZXIgZm9yIGNvbGxlY3Rpb24gbWV0aG9kcyB0byBkZXRlcm1pbmUgd2hldGhlciBhIGNvbGxlY3Rpb25cbiAgLy8gc2hvdWxkIGJlIGl0ZXJhdGVkIGFzIGFuIGFycmF5IG9yIGFzIGFuIG9iamVjdC5cbiAgLy8gUmVsYXRlZDogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcbiAgLy8gQXZvaWRzIGEgdmVyeSBuYXN0eSBpT1MgOCBKSVQgYnVnIG9uIEFSTS02NC4gIzIwOTRcbiAgdmFyIE1BWF9BUlJBWV9JTkRFWCA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gIHZhciBnZXRMZW5ndGggPSBzaGFsbG93UHJvcGVydHkoJ2xlbmd0aCcpO1xuICB2YXIgaXNBcnJheUxpa2UgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChjb2xsZWN0aW9uKTtcbiAgICByZXR1cm4gdHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyAmJiBsZW5ndGggPj0gMCAmJiBsZW5ndGggPD0gTUFYX0FSUkFZX0lOREVYO1xuICB9O1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgcmF3IG9iamVjdHMgaW4gYWRkaXRpb24gdG8gYXJyYXktbGlrZXMuIFRyZWF0cyBhbGxcbiAgLy8gc3BhcnNlIGFycmF5LWxpa2VzIGFzIGlmIHRoZXkgd2VyZSBkZW5zZS5cbiAgXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGksIGxlbmd0aDtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50LlxuICBfLm1hcCA9IF8uY29sbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIHJlc3VsdHNbaW5kZXhdID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDcmVhdGUgYSByZWR1Y2luZyBmdW5jdGlvbiBpdGVyYXRpbmcgbGVmdCBvciByaWdodC5cbiAgdmFyIGNyZWF0ZVJlZHVjZSA9IGZ1bmN0aW9uKGRpcikge1xuICAgIC8vIFdyYXAgY29kZSB0aGF0IHJlYXNzaWducyBhcmd1bWVudCB2YXJpYWJsZXMgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0aGFuXG4gICAgLy8gdGhlIG9uZSB0aGF0IGFjY2Vzc2VzIGBhcmd1bWVudHMubGVuZ3RoYCB0byBhdm9pZCBhIHBlcmYgaGl0LiAoIzE5OTEpXG4gICAgdmFyIHJlZHVjZXIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBtZW1vLCBpbml0aWFsKSB7XG4gICAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgICAgaWYgKCFpbml0aWFsKSB7XG4gICAgICAgIG1lbW8gPSBvYmpba2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBkaXI7XG4gICAgICB9XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRlZShtZW1vLCBvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+PSAzO1xuICAgICAgcmV0dXJuIHJlZHVjZXIob2JqLCBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCA0KSwgbWVtbywgaW5pdGlhbCk7XG4gICAgfTtcbiAgfTtcblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuXG4gIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gY3JlYXRlUmVkdWNlKDEpO1xuXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuICBfLnJlZHVjZVJpZ2h0ID0gXy5mb2xkciA9IGNyZWF0ZVJlZHVjZSgtMSk7XG5cbiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLlxuICBfLmZpbmQgPSBfLmRldGVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIGtleUZpbmRlciA9IGlzQXJyYXlMaWtlKG9iaikgPyBfLmZpbmRJbmRleCA6IF8uZmluZEtleTtcbiAgICB2YXIga2V5ID0ga2V5RmluZGVyKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBpZiAoa2V5ICE9PSB2b2lkIDAgJiYga2V5ICE9PSAtMSkgcmV0dXJuIG9ialtrZXldO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuXG4gIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0cy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLlxuICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5uZWdhdGUoY2IocHJlZGljYXRlKSksIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmICghcHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYW55YC5cbiAgXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gaXRlbSAodXNpbmcgYD09PWApLlxuICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlc2AgYW5kIGBpbmNsdWRlYC5cbiAgXy5jb250YWlucyA9IF8uaW5jbHVkZXMgPSBfLmluY2x1ZGUgPSBmdW5jdGlvbihvYmosIGl0ZW0sIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggIT0gJ251bWJlcicgfHwgZ3VhcmQpIGZyb21JbmRleCA9IDA7XG4gICAgcmV0dXJuIF8uaW5kZXhPZihvYmosIGl0ZW0sIGZyb21JbmRleCkgPj0gMDtcbiAgfTtcblxuICAvLyBJbnZva2UgYSBtZXRob2QgKHdpdGggYXJndW1lbnRzKSBvbiBldmVyeSBpdGVtIGluIGEgY29sbGVjdGlvbi5cbiAgXy5pbnZva2UgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwgcGF0aCwgYXJncykge1xuICAgIHZhciBjb250ZXh0UGF0aCwgZnVuYztcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHBhdGgpKSB7XG4gICAgICBmdW5jID0gcGF0aDtcbiAgICB9IGVsc2UgaWYgKF8uaXNBcnJheShwYXRoKSkge1xuICAgICAgY29udGV4dFBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcbiAgICAgIHBhdGggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgIHZhciBtZXRob2QgPSBmdW5jO1xuICAgICAgaWYgKCFtZXRob2QpIHtcbiAgICAgICAgaWYgKGNvbnRleHRQYXRoICYmIGNvbnRleHRQYXRoLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnRleHQgPSBkZWVwR2V0KGNvbnRleHQsIGNvbnRleHRQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dCA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgICAgICBtZXRob2QgPSBjb250ZXh0W3BhdGhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ldGhvZCA9PSBudWxsID8gbWV0aG9kIDogbWV0aG9kLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBfLnByb3BlcnR5KGtleSkpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0XG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbmQob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsIHx8IHR5cGVvZiBpdGVyYXRlZSA9PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqWzBdICE9ICdvYmplY3QnICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlID4gcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2LCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHYsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkID4gbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSAtSW5maW5pdHkgJiYgcmVzdWx0ID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSBJbmZpbml0eSwgbGFzdENvbXB1dGVkID0gSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCB0eXBlb2YgaXRlcmF0ZWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIG9ialswXSAhPSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odiwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA8IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gSW5maW5pdHkgJiYgcmVzdWx0ID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHJlc3VsdCA9IHY7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLlxuICBfLnNodWZmbGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5zYW1wbGUob2JqLCBJbmZpbml0eSk7XG4gIH07XG5cbiAgLy8gU2FtcGxlICoqbioqIHJhbmRvbSB2YWx1ZXMgZnJvbSBhIGNvbGxlY3Rpb24gdXNpbmcgdGhlIG1vZGVybiB2ZXJzaW9uIG9mIHRoZVxuICAvLyBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZSkuXG4gIC8vIElmICoqbioqIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgYSBzaW5nbGUgcmFuZG9tIGVsZW1lbnQuXG4gIC8vIFRoZSBpbnRlcm5hbCBgZ3VhcmRgIGFyZ3VtZW50IGFsbG93cyBpdCB0byB3b3JrIHdpdGggYG1hcGAuXG4gIF8uc2FtcGxlID0gZnVuY3Rpb24ob2JqLCBuLCBndWFyZCkge1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHtcbiAgICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gXy52YWx1ZXMob2JqKTtcbiAgICAgIHJldHVybiBvYmpbXy5yYW5kb20ob2JqLmxlbmd0aCAtIDEpXTtcbiAgICB9XG4gICAgdmFyIHNhbXBsZSA9IGlzQXJyYXlMaWtlKG9iaikgPyBfLmNsb25lKG9iaikgOiBfLnZhbHVlcyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoc2FtcGxlKTtcbiAgICBuID0gTWF0aC5tYXgoTWF0aC5taW4obiwgbGVuZ3RoKSwgMCk7XG4gICAgdmFyIGxhc3QgPSBsZW5ndGggLSAxO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBuOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcmFuZCA9IF8ucmFuZG9tKGluZGV4LCBsYXN0KTtcbiAgICAgIHZhciB0ZW1wID0gc2FtcGxlW2luZGV4XTtcbiAgICAgIHNhbXBsZVtpbmRleF0gPSBzYW1wbGVbcmFuZF07XG4gICAgICBzYW1wbGVbcmFuZF0gPSB0ZW1wO1xuICAgIH1cbiAgICByZXR1cm4gc2FtcGxlLnNsaWNlKDAsIG4pO1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGxpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4KyssXG4gICAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZSh2YWx1ZSwga2V5LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IsIHBhcnRpdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gcGFydGl0aW9uID8gW1tdLCBbXV0gOiB7fTtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBrZXkgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIG9iaik7XG4gICAgICAgIGJlaGF2aW9yKHJlc3VsdCwgdmFsdWUsIGtleSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4gIC8vIHRvIGdyb3VwIGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3JpdGVyaW9uLlxuICBfLmdyb3VwQnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7IGVsc2UgcmVzdWx0W2tleV0gPSBbdmFsdWVdO1xuICB9KTtcblxuICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yXG4gIC8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cbiAgXy5pbmRleEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfSk7XG5cbiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzXG4gIC8vIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUgdG8gY291bnQgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAvLyBjcml0ZXJpb24uXG4gIF8uY291bnRCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChoYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSsrOyBlbHNlIHJlc3VsdFtrZXldID0gMTtcbiAgfSk7XG5cbiAgdmFyIHJlU3RyU3ltYm9sID0gL1teXFx1ZDgwMC1cXHVkZmZmXXxbXFx1ZDgwMC1cXHVkYmZmXVtcXHVkYzAwLVxcdWRmZmZdfFtcXHVkODAwLVxcdWRmZmZdL2c7XG4gIC8vIFNhZmVseSBjcmVhdGUgYSByZWFsLCBsaXZlIGFycmF5IGZyb20gYW55dGhpbmcgaXRlcmFibGUuXG4gIF8udG9BcnJheSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghb2JqKSByZXR1cm4gW107XG4gICAgaWYgKF8uaXNBcnJheShvYmopKSByZXR1cm4gc2xpY2UuY2FsbChvYmopO1xuICAgIGlmIChfLmlzU3RyaW5nKG9iaikpIHtcbiAgICAgIC8vIEtlZXAgc3Vycm9nYXRlIHBhaXIgY2hhcmFjdGVycyB0b2dldGhlclxuICAgICAgcmV0dXJuIG9iai5tYXRjaChyZVN0clN5bWJvbCk7XG4gICAgfVxuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSByZXR1cm4gXy5tYXAob2JqLCBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuXG4gIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7XG4gICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iaikgPyBvYmoubGVuZ3RoIDogXy5rZXlzKG9iaikubGVuZ3RoO1xuICB9O1xuXG4gIC8vIFNwbGl0IGEgY29sbGVjdGlvbiBpbnRvIHR3byBhcnJheXM6IG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgc2F0aXNmeSB0aGUgZ2l2ZW5cbiAgLy8gcHJlZGljYXRlLCBhbmQgb25lIHdob3NlIGVsZW1lbnRzIGFsbCBkbyBub3Qgc2F0aXNmeSB0aGUgcHJlZGljYXRlLlxuICBfLnBhcnRpdGlvbiA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIHBhc3MpIHtcbiAgICByZXN1bHRbcGFzcyA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgfSwgdHJ1ZSk7XG5cbiAgLy8gQXJyYXkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrXG4gIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8IDEpIHJldHVybiBuID09IG51bGwgPyB2b2lkIDAgOiBbXTtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbMF07XG4gICAgcmV0dXJuIF8uaW5pdGlhbChhcnJheSwgYXJyYXkubGVuZ3RoIC0gbik7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAobiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pKSk7XG4gIH07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPCAxKSByZXR1cm4gbiA9PSBudWxsID8gdm9pZCAwIDogW107XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBfLnJlc3QoYXJyYXksIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIG4pKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBmaXJzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYHRhaWxgIGFuZCBgZHJvcGAuXG4gIC8vIEVzcGVjaWFsbHkgdXNlZnVsIG9uIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nIGFuICoqbioqIHdpbGwgcmV0dXJuXG4gIC8vIHRoZSByZXN0IE4gdmFsdWVzIGluIHRoZSBhcnJheS5cbiAgXy5yZXN0ID0gXy50YWlsID0gXy5kcm9wID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKTtcbiAgfTtcblxuICAvLyBUcmltIG91dCBhbGwgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXkuXG4gIF8uY29tcGFjdCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBCb29sZWFuKTtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiBhIHJlY3Vyc2l2ZSBgZmxhdHRlbmAgZnVuY3Rpb24uXG4gIHZhciBmbGF0dGVuID0gZnVuY3Rpb24oaW5wdXQsIHNoYWxsb3csIHN0cmljdCwgb3V0cHV0KSB7XG4gICAgb3V0cHV0ID0gb3V0cHV0IHx8IFtdO1xuICAgIHZhciBpZHggPSBvdXRwdXQubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoaW5wdXQpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoXy5pc0FycmF5KHZhbHVlKSB8fCBfLmlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgLy8gRmxhdHRlbiBjdXJyZW50IGxldmVsIG9mIGFycmF5IG9yIGFyZ3VtZW50cyBvYmplY3QuXG4gICAgICAgIGlmIChzaGFsbG93KSB7XG4gICAgICAgICAgdmFyIGogPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGogPCBsZW4pIG91dHB1dFtpZHgrK10gPSB2YWx1ZVtqKytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZsYXR0ZW4odmFsdWUsIHNoYWxsb3csIHN0cmljdCwgb3V0cHV0KTtcbiAgICAgICAgICBpZHggPSBvdXRwdXQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QpIHtcbiAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciBqdXN0IG9uZSBsZXZlbC5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgZmFsc2UpO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFycmF5LCBvdGhlckFycmF5cykge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIG90aGVyQXJyYXlzKTtcbiAgfSk7XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBUaGUgZmFzdGVyIGFsZ29yaXRobSB3aWxsIG5vdCB3b3JrIHdpdGggYW4gaXRlcmF0ZWUgaWYgdGhlIGl0ZXJhdGVlXG4gIC8vIGlzIG5vdCBhIG9uZS10by1vbmUgZnVuY3Rpb24sIHNvIHByb3ZpZGluZyBhbiBpdGVyYXRlZSB3aWxsIGRpc2FibGVcbiAgLy8gdGhlIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLFxuICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7XG4gICAgICBpZiAoaXNTb3J0ZWQgJiYgIWl0ZXJhdGVlKSB7XG4gICAgICAgIGlmICghaSB8fCBzZWVuICE9PSBjb21wdXRlZCkgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmICghXy5jb250YWlucyhzZWVuLCBjb21wdXRlZCkpIHtcbiAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghXy5jb250YWlucyhyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mXG4gIC8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLnVuaW9uID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheXMpIHtcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJyYXlzLCB0cnVlLCB0cnVlKSk7XG4gIH0pO1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cbiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgIGlmIChfLmNvbnRhaW5zKHJlc3VsdCwgaXRlbSkpIGNvbnRpbnVlO1xuICAgICAgdmFyIGo7XG4gICAgICBmb3IgKGogPSAxOyBqIDwgYXJnc0xlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICghXy5jb250YWlucyhhcmd1bWVudHNbal0sIGl0ZW0pKSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChqID09PSBhcmdzTGVuZ3RoKSByZXN1bHQucHVzaChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuXG4gIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uXG4gIF8uZGlmZmVyZW5jZSA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXksIHJlc3QpIHtcbiAgICByZXN0ID0gZmxhdHRlbihyZXN0LCB0cnVlLCB0cnVlKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIENvbXBsZW1lbnQgb2YgXy56aXAuIFVuemlwIGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIGFuZCBncm91cHNcbiAgLy8gZWFjaCBhcnJheSdzIGVsZW1lbnRzIG9uIHNoYXJlZCBpbmRpY2VzLlxuICBfLnVuemlwID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgJiYgXy5tYXgoYXJyYXksIGdldExlbmd0aCkubGVuZ3RoIHx8IDA7XG4gICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gXy5wbHVjayhhcnJheSwgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmVcbiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG4gIF8uemlwID0gcmVzdEFyZ3VtZW50cyhfLnVuemlwKTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuIFBhc3NpbmcgYnkgcGFpcnMgaXMgdGhlIHJldmVyc2Ugb2YgXy5wYWlycy5cbiAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChsaXN0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gR2VuZXJhdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZmluZEluZGV4IGFuZCBmaW5kTGFzdEluZGV4IGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyID0gZnVuY3Rpb24oZGlyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGluZGV4IG9uIGFuIGFycmF5LWxpa2UgdGhhdCBwYXNzZXMgYSBwcmVkaWNhdGUgdGVzdC5cbiAgXy5maW5kSW5kZXggPSBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcigxKTtcbiAgXy5maW5kTGFzdEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoLTEpO1xuXG4gIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRlZShvYmopO1xuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbWlkXSkgPCB2YWx1ZSkgbG93ID0gbWlkICsgMTsgZWxzZSBoaWdoID0gbWlkO1xuICAgIH1cbiAgICByZXR1cm4gbG93O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGluZGV4T2YgYW5kIGxhc3RJbmRleE9mIGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZUluZGV4RmluZGVyID0gZnVuY3Rpb24oZGlyLCBwcmVkaWNhdGVGaW5kLCBzb3J0ZWRJbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgaXRlbSwgaWR4KSB7XG4gICAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICBpZiAodHlwZW9mIGlkeCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZGlyID4gMCkge1xuICAgICAgICAgIGkgPSBpZHggPj0gMCA/IGlkeCA6IE1hdGgubWF4KGlkeCArIGxlbmd0aCwgaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVuZ3RoID0gaWR4ID49IDAgPyBNYXRoLm1pbihpZHggKyAxLCBsZW5ndGgpIDogaWR4ICsgbGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzb3J0ZWRJbmRleCAmJiBpZHggJiYgbGVuZ3RoKSB7XG4gICAgICAgIGlkeCA9IHNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGFycmF5W2lkeF0gPT09IGl0ZW0gPyBpZHggOiAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtICE9PSBpdGVtKSB7XG4gICAgICAgIGlkeCA9IHByZWRpY2F0ZUZpbmQoc2xpY2UuY2FsbChhcnJheSwgaSwgbGVuZ3RoKSwgXy5pc05hTik7XG4gICAgICAgIHJldHVybiBpZHggPj0gMCA/IGlkeCArIGkgOiAtMTtcbiAgICAgIH1cbiAgICAgIGZvciAoaWR4ID0gZGlyID4gMCA/IGkgOiBsZW5ndGggLSAxOyBpZHggPj0gMCAmJiBpZHggPCBsZW5ndGg7IGlkeCArPSBkaXIpIHtcbiAgICAgICAgaWYgKGFycmF5W2lkeF0gPT09IGl0ZW0pIHJldHVybiBpZHg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigxLCBfLmZpbmRJbmRleCwgXy5zb3J0ZWRJbmRleCk7XG4gIF8ubGFzdEluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigtMSwgXy5maW5kTGFzdEluZGV4KTtcblxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4gIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4gIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChzdG9wID09IG51bGwpIHtcbiAgICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBpZiAoIXN0ZXApIHtcbiAgICAgIHN0ZXAgPSBzdG9wIDwgc3RhcnQgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgICB2YXIgcmFuZ2UgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkge1xuICAgICAgcmFuZ2VbaWR4XSA9IHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvLyBDaHVuayBhIHNpbmdsZSBhcnJheSBpbnRvIG11bHRpcGxlIGFycmF5cywgZWFjaCBjb250YWluaW5nIGBjb3VudGAgb3IgZmV3ZXJcbiAgLy8gaXRlbXMuXG4gIF8uY2h1bmsgPSBmdW5jdGlvbihhcnJheSwgY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCB8fCBjb3VudCA8IDEpIHJldHVybiBbXTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHNsaWNlLmNhbGwoYXJyYXksIGksIGkgKz0gY291bnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIERldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIGEgZnVuY3Rpb24gYXMgYSBjb25zdHJ1Y3RvclxuICAvLyBvciBhIG5vcm1hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gIHZhciBleGVjdXRlQm91bmQgPSBmdW5jdGlvbihzb3VyY2VGdW5jLCBib3VuZEZ1bmMsIGNvbnRleHQsIGNhbGxpbmdDb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCEoY2FsbGluZ0NvbnRleHQgaW5zdGFuY2VvZiBib3VuZEZ1bmMpKSByZXR1cm4gc291cmNlRnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB2YXIgc2VsZiA9IGJhc2VDcmVhdGUoc291cmNlRnVuYy5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBzb3VyY2VGdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIGlmIChfLmlzT2JqZWN0KHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4gIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWZcbiAgLy8gYXZhaWxhYmxlLlxuICBfLmJpbmQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uJyk7XG4gICAgdmFyIGJvdW5kID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihjYWxsQXJncykge1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoY2FsbEFyZ3MpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH0pO1xuXG4gIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcbiAgLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIF8gYWN0c1xuICAvLyBhcyBhIHBsYWNlaG9sZGVyIGJ5IGRlZmF1bHQsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmVcbiAgLy8gcHJlLWZpbGxlZC4gU2V0IGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIGZvciBhIGN1c3RvbSBwbGFjZWhvbGRlciBhcmd1bWVudC5cbiAgXy5wYXJ0aWFsID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihmdW5jLCBib3VuZEFyZ3MpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSBfLnBhcnRpYWwucGxhY2Vob2xkZXI7XG4gICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAwLCBsZW5ndGggPSBib3VuZEFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBhcmdzW2ldID0gYm91bmRBcmdzW2ldID09PSBwbGFjZWhvbGRlciA/IGFyZ3VtZW50c1twb3NpdGlvbisrXSA6IGJvdW5kQXJnc1tpXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGFyZ3VtZW50cy5sZW5ndGgpIGFyZ3MucHVzaChhcmd1bWVudHNbcG9zaXRpb24rK10pO1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgdGhpcywgdGhpcywgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH0pO1xuXG4gIF8ucGFydGlhbC5wbGFjZWhvbGRlciA9IF87XG5cbiAgLy8gQmluZCBhIG51bWJlciBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBSZW1haW5pbmcgYXJndW1lbnRzXG4gIC8vIGFyZSB0aGUgbWV0aG9kIG5hbWVzIHRvIGJlIGJvdW5kLiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXQgYWxsIGNhbGxiYWNrc1xuICAvLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAga2V5cyA9IGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKTtcbiAgICB2YXIgaW5kZXggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAoaW5kZXggPCAxKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMnKTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgb2JqW2tleV0gPSBfLmJpbmQob2JqW2tleV0sIG9iaik7XG4gICAgfVxuICB9KTtcblxuICAvLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLlxuICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHtcbiAgICB2YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGNhY2hlID0gbWVtb2l6ZS5jYWNoZTtcbiAgICAgIHZhciBhZGRyZXNzID0gJycgKyAoaGFzaGVyID8gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrZXkpO1xuICAgICAgaWYgKCFoYXMoY2FjaGUsIGFkZHJlc3MpKSBjYWNoZVthZGRyZXNzXSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBjYWNoZVthZGRyZXNzXTtcbiAgICB9O1xuICAgIG1lbW9pemUuY2FjaGUgPSB7fTtcbiAgICByZXR1cm4gbWVtb2l6ZTtcbiAgfTtcblxuICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4gIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbiAgXy5kZWxheSA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgd2FpdCk7XG4gIH0pO1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gXy5wYXJ0aWFsKF8uZGVsYXksIF8sIDEpO1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbiAgLy8gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlciBnb2luZyBtb3JlIHRoYW4gb25jZSBwZXIgYHdhaXRgIGR1cmF0aW9uO1xuICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuICAvLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbiAgXy50aHJvdHRsZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGltZW91dCwgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBfLm5vdygpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgfTtcblxuICAgIHZhciB0aHJvdHRsZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBub3cgPSBfLm5vdygpO1xuICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdztcbiAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB0aHJvdHRsZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBwcmV2aW91cyA9IDA7XG4gICAgICB0aW1lb3V0ID0gY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhyb3R0bGVkO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCByZXN1bHQ7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbihjb250ZXh0LCBhcmdzKSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGlmIChhcmdzKSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICB2YXIgZGVib3VuY2VkID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcmdzKSB7XG4gICAgICBpZiAodGltZW91dCkgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgY2FsbE5vdyA9ICF0aW1lb3V0O1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgIGlmIChjYWxsTm93KSByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IF8uZGVsYXkobGF0ZXIsIHdhaXQsIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgZGVib3VuY2VkLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4gIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmRcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikge1xuICAgIHJldHVybiBfLnBhcnRpYWwod3JhcHBlciwgZnVuYyk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgcGFzc2VkLWluIHByZWRpY2F0ZS5cbiAgXy5uZWdhdGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIGEgbGlzdCBvZiBmdW5jdGlvbnMsIGVhY2hcbiAgLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy5cbiAgXy5jb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHN0YXJ0ID0gYXJncy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpID0gc3RhcnQ7XG4gICAgICB2YXIgcmVzdWx0ID0gYXJnc1tzdGFydF0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdoaWxlIChpLS0pIHJlc3VsdCA9IGFyZ3NbaV0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBvbiBhbmQgYWZ0ZXIgdGhlIE50aCBjYWxsLlxuICBfLmFmdGVyID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCB1cCB0byAoYnV0IG5vdCBpbmNsdWRpbmcpIHRoZSBOdGggY2FsbC5cbiAgXy5iZWZvcmUgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHZhciBtZW1vO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzID4gMCkge1xuICAgICAgICBtZW1vID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgaWYgKHRpbWVzIDw9IDEpIGZ1bmMgPSBudWxsO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGF0IG1vc3Qgb25lIHRpbWUsIG5vIG1hdHRlciBob3dcbiAgLy8gb2Z0ZW4geW91IGNhbGwgaXQuIFVzZWZ1bCBmb3IgbGF6eSBpbml0aWFsaXphdGlvbi5cbiAgXy5vbmNlID0gXy5wYXJ0aWFsKF8uYmVmb3JlLCAyKTtcblxuICBfLnJlc3RBcmd1bWVudHMgPSByZXN0QXJndW1lbnRzO1xuXG4gIC8vIE9iamVjdCBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEtleXMgaW4gSUUgPCA5IHRoYXQgd29uJ3QgYmUgaXRlcmF0ZWQgYnkgYGZvciBrZXkgaW4gLi4uYCBhbmQgdGh1cyBtaXNzZWQuXG4gIHZhciBoYXNFbnVtQnVnID0gIXt0b1N0cmluZzogbnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyk7XG4gIHZhciBub25FbnVtZXJhYmxlUHJvcHMgPSBbJ3ZhbHVlT2YnLCAnaXNQcm90b3R5cGVPZicsICd0b1N0cmluZycsXG4gICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2hhc093blByb3BlcnR5JywgJ3RvTG9jYWxlU3RyaW5nJ107XG5cbiAgdmFyIGNvbGxlY3ROb25FbnVtUHJvcHMgPSBmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICB2YXIgbm9uRW51bUlkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGg7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gb2JqLmNvbnN0cnVjdG9yO1xuICAgIHZhciBwcm90byA9IF8uaXNGdW5jdGlvbihjb25zdHJ1Y3RvcikgJiYgY29uc3RydWN0b3IucHJvdG90eXBlIHx8IE9ialByb3RvO1xuXG4gICAgLy8gQ29uc3RydWN0b3IgaXMgYSBzcGVjaWFsIGNhc2UuXG4gICAgdmFyIHByb3AgPSAnY29uc3RydWN0b3InO1xuICAgIGlmIChoYXMob2JqLCBwcm9wKSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkga2V5cy5wdXNoKHByb3ApO1xuXG4gICAgd2hpbGUgKG5vbkVudW1JZHgtLSkge1xuICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tub25FbnVtSWR4XTtcbiAgICAgIGlmIChwcm9wIGluIG9iaiAmJiBvYmpbcHJvcF0gIT09IHByb3RvW3Byb3BdICYmICFfLmNvbnRhaW5zKGtleXMsIHByb3ApKSB7XG4gICAgICAgIGtleXMucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIG5hbWVzIG9mIGFuIG9iamVjdCdzIG93biBwcm9wZXJ0aWVzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgT2JqZWN0LmtleXNgLlxuICBfLmtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIGlmIChuYXRpdmVLZXlzKSByZXR1cm4gbmF0aXZlS2V5cyhvYmopO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKGhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIGFsbCB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuICBfLmFsbEtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gICAgLy8gQWhlbSwgSUUgPCA5LlxuICAgIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIG9iamVjdC5cbiAgLy8gSW4gY29udHJhc3QgdG8gXy5tYXAgaXQgcmV0dXJucyBhbiBvYmplY3QuXG4gIF8ubWFwT2JqZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0ge307XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIHJlc3VsdHNbY3VycmVudEtleV0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENvbnZlcnQgYW4gb2JqZWN0IGludG8gYSBsaXN0IG9mIGBba2V5LCB2YWx1ZV1gIHBhaXJzLlxuICAvLyBUaGUgb3Bwb3NpdGUgb2YgXy5vYmplY3QuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgLlxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFzc2lnbmVyIGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZUFzc2lnbmVyID0gZnVuY3Rpb24oa2V5c0Z1bmMsIGRlZmF1bHRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoZGVmYXVsdHMpIG9iaiA9IE9iamVjdChvYmopO1xuICAgICAgaWYgKGxlbmd0aCA8IDIgfHwgb2JqID09IG51bGwpIHJldHVybiBvYmo7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdLFxuICAgICAgICAgICAga2V5cyA9IGtleXNGdW5jKHNvdXJjZSksXG4gICAgICAgICAgICBsID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKCFkZWZhdWx0cyB8fCBvYmpba2V5XSA9PT0gdm9pZCAwKSBvYmpba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzKTtcblxuICAvLyBBc3NpZ25zIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBvd24gcHJvcGVydGllcyBpbiB0aGUgcGFzc2VkLWluIG9iamVjdChzKS5cbiAgLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ24pXG4gIF8uZXh0ZW5kT3duID0gXy5hc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihfLmtleXMpO1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGtleSBvbiBhbiBvYmplY3QgdGhhdCBwYXNzZXMgYSBwcmVkaWNhdGUgdGVzdC5cbiAgXy5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksIGtleTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2tleV0sIGtleSwgb2JqKSkgcmV0dXJuIGtleTtcbiAgICB9XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcGljayBoZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGBvYmpgIGhhcyBrZXkgYGtleWAuXG4gIHZhciBrZXlJbk9iaiA9IGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iaikge1xuICAgIHJldHVybiBrZXkgaW4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIHdoaXRlbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ucGljayA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9LCBpdGVyYXRlZSA9IGtleXNbMF07XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGtleXNbMV0pO1xuICAgICAga2V5cyA9IF8uYWxsS2V5cyhvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGtleUluT2JqO1xuICAgICAga2V5cyA9IGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKTtcbiAgICAgIG9iaiA9IE9iamVjdChvYmopO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgIGlmIChpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmopKSByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5vbWl0ID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICB2YXIgaXRlcmF0ZWUgPSBrZXlzWzBdLCBjb250ZXh0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpdGVyYXRlZSA9IF8ubmVnYXRlKGl0ZXJhdGVlKTtcbiAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIGNvbnRleHQgPSBrZXlzWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gXy5tYXAoZmxhdHRlbihrZXlzLCBmYWxzZSwgZmFsc2UpLCBTdHJpbmcpO1xuICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiAhXy5jb250YWlucyhrZXlzLCBrZXkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIF8ucGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgfSk7XG5cbiAgLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgXy5kZWZhdWx0cyA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cywgdHJ1ZSk7XG5cbiAgLy8gQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBnaXZlbiBwcm90b3R5cGUgb2JqZWN0LlxuICAvLyBJZiBhZGRpdGlvbmFsIHByb3BlcnRpZXMgYXJlIHByb3ZpZGVkIHRoZW4gdGhleSB3aWxsIGJlIGFkZGVkIHRvIHRoZVxuICAvLyBjcmVhdGVkIG9iamVjdC5cbiAgXy5jcmVhdGUgPSBmdW5jdGlvbihwcm90b3R5cGUsIHByb3BzKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICBpZiAocHJvcHMpIF8uZXh0ZW5kT3duKHJlc3VsdCwgcHJvcHMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LlxuICBfLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTtcbiAgfTtcblxuICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouXG4gIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluLCBpblxuICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbiAgXy50YXAgPSBmdW5jdGlvbihvYmosIGludGVyY2VwdG9yKSB7XG4gICAgaW50ZXJjZXB0b3Iob2JqKTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybnMgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmlzTWF0Y2ggPSBmdW5jdGlvbihvYmplY3QsIGF0dHJzKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMoYXR0cnMpLCBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAhbGVuZ3RoO1xuICAgIHZhciBvYmogPSBPYmplY3Qob2JqZWN0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChhdHRyc1trZXldICE9PSBvYmpba2V5XSB8fCAhKGtleSBpbiBvYmopKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxLCBkZWVwRXE7XG4gIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcbiAgICAvLyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgb25seSBlcXVhbCB0byBpdHNlbGYgKHN0cmljdCBjb21wYXJpc29uKS5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgaWYgKGEgIT09IGEpIHJldHVybiBiICE9PSBiO1xuICAgIC8vIEV4aGF1c3QgcHJpbWl0aXZlIGNoZWNrc1xuICAgIHZhciB0eXBlID0gdHlwZW9mIGE7XG4gICAgaWYgKHR5cGUgIT09ICdmdW5jdGlvbicgJiYgdHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gZGVlcEVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKTtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICBkZWVwRXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuICcnICsgYSA9PT0gJycgKyBiO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU4uXG4gICAgICAgIGlmICgrYSAhPT0gK2EpIHJldHVybiArYiAhPT0gK2I7XG4gICAgICAgIC8vIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3Igb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICAgIHJldHVybiArYSA9PT0gMCA/IDEgLyArYSA9PT0gMSAvIGIgOiArYSA9PT0gK2I7XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICByZXR1cm4gK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBTeW1ib2xdJzpcbiAgICAgICAgcmV0dXJuIFN5bWJvbFByb3RvLnZhbHVlT2YuY2FsbChhKSA9PT0gU3ltYm9sUHJvdG8udmFsdWVPZi5jYWxsKGIpO1xuICAgIH1cblxuICAgIHZhciBhcmVBcnJheXMgPSBjbGFzc05hbWUgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgaWYgKCFhcmVBcnJheXMpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHMgb3IgYEFycmF5YHNcbiAgICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgICBpZiAoYUN0b3IgIT09IGJDdG9yICYmICEoXy5pc0Z1bmN0aW9uKGFDdG9yKSAmJiBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoJ2NvbnN0cnVjdG9yJyBpbiBhICYmICdjb25zdHJ1Y3RvcicgaW4gYikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXG4gICAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXG5cbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICAgIGFTdGFjayA9IGFTdGFjayB8fCBbXTtcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cbiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09PSBiO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucHVzaChhKTtcbiAgICBiU3RhY2sucHVzaChiKTtcblxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBhU3RhY2ssIGJTdGFjaykpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhhKSwga2V5O1xuICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcyBiZWZvcmUgY29tcGFyaW5nIGRlZXAgZXF1YWxpdHkuXG4gICAgICBpZiAoXy5rZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgIGtleSA9IGtleXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKCEoaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSAmJiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIHJldHVybiBfLmtleXMob2JqKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG4gIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAsIGlzRXJyb3IsIGlzTWFwLCBpc1dlYWtNYXAsIGlzU2V0LCBpc1dlYWtTZXQuXG4gIF8uZWFjaChbJ0FyZ3VtZW50cycsICdGdW5jdGlvbicsICdTdHJpbmcnLCAnTnVtYmVyJywgJ0RhdGUnLCAnUmVnRXhwJywgJ0Vycm9yJywgJ1N5bWJvbCcsICdNYXAnLCAnV2Vha01hcCcsICdTZXQnLCAnV2Vha1NldCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgX1snaXMnICsgbmFtZV0gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUgPCA5KSwgd2hlcmVcbiAgLy8gdGhlcmUgaXNuJ3QgYW55IGluc3BlY3RhYmxlIFwiQXJndW1lbnRzXCIgdHlwZS5cbiAgaWYgKCFfLmlzQXJndW1lbnRzKGFyZ3VtZW50cykpIHtcbiAgICBfLmlzQXJndW1lbnRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gaGFzKG9iaiwgJ2NhbGxlZScpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuIFdvcmsgYXJvdW5kIHNvbWUgdHlwZW9mIGJ1Z3MgaW4gb2xkIHY4LFxuICAvLyBJRSAxMSAoIzE2MjEpLCBTYWZhcmkgOCAoIzE5MjkpLCBhbmQgUGhhbnRvbUpTICgjMjIzNikuXG4gIHZhciBub2RlbGlzdCA9IHJvb3QuZG9jdW1lbnQgJiYgcm9vdC5kb2N1bWVudC5jaGlsZE5vZGVzO1xuICBpZiAodHlwZW9mIC8uLyAhPSAnZnVuY3Rpb24nICYmIHR5cGVvZiBJbnQ4QXJyYXkgIT0gJ29iamVjdCcgJiYgdHlwZW9mIG5vZGVsaXN0ICE9ICdmdW5jdGlvbicpIHtcbiAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicgfHwgZmFsc2U7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElzIGEgZ2l2ZW4gb2JqZWN0IGEgZmluaXRlIG51bWJlcj9cbiAgXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhXy5pc1N5bWJvbChvYmopICYmIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7XG4gIH07XG5cbiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gP1xuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBpc05hTihvYmopO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xuICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGVxdWFsIHRvIG51bGw/XG4gIF8uaXNOdWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gbnVsbDtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIHVuZGVmaW5lZD9cbiAgXy5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHZvaWQgMDtcbiAgfTtcblxuICAvLyBTaG9ydGN1dCBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHByb3BlcnR5IGRpcmVjdGx5XG4gIC8vIG9uIGl0c2VsZiAoaW4gb3RoZXIgd29yZHMsIG5vdCBvbiBhIHByb3RvdHlwZSkuXG4gIF8uaGFzID0gZnVuY3Rpb24ob2JqLCBwYXRoKSB7XG4gICAgaWYgKCFfLmlzQXJyYXkocGF0aCkpIHtcbiAgICAgIHJldHVybiBoYXMob2JqLCBwYXRoKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwYXRoW2ldO1xuICAgICAgaWYgKG9iaiA9PSBudWxsIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmogPSBvYmpba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuICEhbGVuZ3RoO1xuICB9O1xuXG4gIC8vIFV0aWxpdHkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0c1xuICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0ZWVzLlxuICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLy8gUHJlZGljYXRlLWdlbmVyYXRpbmcgZnVuY3Rpb25zLiBPZnRlbiB1c2VmdWwgb3V0c2lkZSBvZiBVbmRlcnNjb3JlLlxuICBfLmNvbnN0YW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgfTtcblxuICBfLm5vb3AgPSBmdW5jdGlvbigpe307XG5cbiAgLy8gQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gcGFzc2VkIGFuIG9iamVjdCwgd2lsbCB0cmF2ZXJzZSB0aGF0IG9iamVjdOKAmXNcbiAgLy8gcHJvcGVydGllcyBkb3duIHRoZSBnaXZlbiBgcGF0aGAsIHNwZWNpZmllZCBhcyBhbiBhcnJheSBvZiBrZXlzIG9yIGluZGV4ZXMuXG4gIF8ucHJvcGVydHkgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgaWYgKCFfLmlzQXJyYXkocGF0aCkpIHtcbiAgICAgIHJldHVybiBzaGFsbG93UHJvcGVydHkocGF0aCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBkZWVwR2V0KG9iaiwgcGF0aCk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBHZW5lcmF0ZXMgYSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBvYmplY3QgdGhhdCByZXR1cm5zIGEgZ2l2ZW4gcHJvcGVydHkuXG4gIF8ucHJvcGVydHlPZiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7fTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiAhXy5pc0FycmF5KHBhdGgpID8gb2JqW3BhdGhdIDogZGVlcEdldChvYmosIHBhdGgpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIHByZWRpY2F0ZSBmb3IgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mXG4gIC8vIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLm1hdGNoZXIgPSBfLm1hdGNoZXMgPSBmdW5jdGlvbihhdHRycykge1xuICAgIGF0dHJzID0gXy5leHRlbmRPd24oe30sIGF0dHJzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gXy5pc01hdGNoKG9iaiwgYXR0cnMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gIC8vIExpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuXG4gIHZhciBlc2NhcGVNYXAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgICAnYCc6ICcmI3g2MDsnXG4gIH07XG4gIHZhciB1bmVzY2FwZU1hcCA9IF8uaW52ZXJ0KGVzY2FwZU1hcCk7XG5cbiAgLy8gRnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzIHRvL2Zyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuICB2YXIgY3JlYXRlRXNjYXBlciA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciBlc2NhcGVyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHJldHVybiBtYXBbbWF0Y2hdO1xuICAgIH07XG4gICAgLy8gUmVnZXhlcyBmb3IgaWRlbnRpZnlpbmcgYSBrZXkgdGhhdCBuZWVkcyB0byBiZSBlc2NhcGVkLlxuICAgIHZhciBzb3VyY2UgPSAnKD86JyArIF8ua2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpO1xuICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7XG4gICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTtcbiAgXy51bmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApO1xuXG4gIC8vIFRyYXZlcnNlcyB0aGUgY2hpbGRyZW4gb2YgYG9iamAgYWxvbmcgYHBhdGhgLiBJZiBhIGNoaWxkIGlzIGEgZnVuY3Rpb24sIGl0XG4gIC8vIGlzIGludm9rZWQgd2l0aCBpdHMgcGFyZW50IGFzIGNvbnRleHQuIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmaW5hbFxuICAvLyBjaGlsZCwgb3IgYGZhbGxiYWNrYCBpZiBhbnkgY2hpbGQgaXMgdW5kZWZpbmVkLlxuICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iaiwgcGF0aCwgZmFsbGJhY2spIHtcbiAgICBpZiAoIV8uaXNBcnJheShwYXRoKSkgcGF0aCA9IFtwYXRoXTtcbiAgICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgIHJldHVybiBfLmlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2suY2FsbChvYmopIDogZmFsbGJhY2s7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwcm9wID0gb2JqID09IG51bGwgPyB2b2lkIDAgOiBvYmpbcGF0aFtpXV07XG4gICAgICBpZiAocHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHByb3AgPSBmYWxsYmFjaztcbiAgICAgICAgaSA9IGxlbmd0aDsgLy8gRW5zdXJlIHdlIGRvbid0IGNvbnRpbnVlIGl0ZXJhdGluZy5cbiAgICAgIH1cbiAgICAgIG9iaiA9IF8uaXNGdW5jdGlvbihwcm9wKSA/IHByb3AuY2FsbChvYmopIDogcHJvcDtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLlxuICAvLyBVc2VmdWwgZm9yIHRlbXBvcmFyeSBET00gaWRzLlxuICB2YXIgaWRDb3VudGVyID0gMDtcbiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBpZCA9ICsraWRDb3VudGVyICsgJyc7XG4gICAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7XG4gIH07XG5cbiAgLy8gQnkgZGVmYXVsdCwgVW5kZXJzY29yZSB1c2VzIEVSQi1zdHlsZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLCBjaGFuZ2UgdGhlXG4gIC8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgXy50ZW1wbGF0ZVNldHRpbmdzID0ge1xuICAgIGV2YWx1YXRlOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgIGludGVycG9sYXRlOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGU6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgdmFyIGVzY2FwZVJlZ0V4cCA9IC9cXFxcfCd8XFxyfFxcbnxcXHUyMDI4fFxcdTIwMjkvZztcblxuICB2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIGVzY2FwZXNbbWF0Y2hdO1xuICB9O1xuXG4gIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uXG4gIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcbiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4gIC8vIE5COiBgb2xkU2V0dGluZ3NgIG9ubHkgZXhpc3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIHNldHRpbmdzLCBvbGRTZXR0aW5ncykge1xuICAgIGlmICghc2V0dGluZ3MgJiYgb2xkU2V0dGluZ3MpIHNldHRpbmdzID0gb2xkU2V0dGluZ3M7XG4gICAgc2V0dGluZ3MgPSBfLmRlZmF1bHRzKHt9LCBzZXR0aW5ncywgXy50ZW1wbGF0ZVNldHRpbmdzKTtcblxuICAgIC8vIENvbWJpbmUgZGVsaW1pdGVycyBpbnRvIG9uZSByZWd1bGFyIGV4cHJlc3Npb24gdmlhIGFsdGVybmF0aW9uLlxuICAgIHZhciBtYXRjaGVyID0gUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgZXNjYXBlQ2hhcik7XG4gICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgaWYgKGVzY2FwZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGVzY2FwZSArIFwiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGludGVycG9sYXRlICsgXCIpKT09bnVsbD8nJzpfX3QpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoZXZhbHVhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlICsgXCJcXG5fX3ArPSdcIjtcbiAgICAgIH1cblxuICAgICAgLy8gQWRvYmUgVk1zIG5lZWQgdGhlIG1hdGNoIHJldHVybmVkIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3Qgb2Zmc2V0LlxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG5cbiAgICBzb3VyY2UgPSBcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcIiArXG4gICAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgICAgc291cmNlICsgJ3JldHVybiBfX3A7XFxuJztcblxuICAgIHZhciByZW5kZXI7XG4gICAgdHJ5IHtcbiAgICAgIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB2YXIgYXJndW1lbnQgPSBzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJztcbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIGFyZ3VtZW50ICsgJyl7XFxuJyArIHNvdXJjZSArICd9JztcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvLyBBZGQgYSBcImNoYWluXCIgZnVuY3Rpb24uIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBpbnN0YW5jZSA9IF8ob2JqKTtcbiAgICBpbnN0YW5jZS5fY2hhaW4gPSB0cnVlO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgY2hhaW5SZXN1bHQgPSBmdW5jdGlvbihpbnN0YW5jZSwgb2JqKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLl9jaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqO1xuICB9O1xuXG4gIC8vIEFkZCB5b3VyIG93biBjdXN0b20gZnVuY3Rpb25zIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5taXhpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIF8uZWFjaChfLmZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IF9bbmFtZV0gPSBvYmpbbmFtZV07XG4gICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFt0aGlzLl93cmFwcGVkXTtcbiAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBfO1xuICB9O1xuXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgXy5taXhpbihfKTtcblxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XG4gICAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgb2JqKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgbWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LlxuICBfLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl93cmFwcGVkO1xuICB9O1xuXG4gIC8vIFByb3ZpZGUgdW53cmFwcGluZyBwcm94eSBmb3Igc29tZSBtZXRob2RzIHVzZWQgaW4gZW5naW5lIG9wZXJhdGlvbnNcbiAgLy8gc3VjaCBhcyBhcml0aG1ldGljIGFuZCBKU09OIHN0cmluZ2lmaWNhdGlvbi5cbiAgXy5wcm90b3R5cGUudmFsdWVPZiA9IF8ucHJvdG90eXBlLnRvSlNPTiA9IF8ucHJvdG90eXBlLnZhbHVlO1xuXG4gIF8ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLl93cmFwcGVkKTtcbiAgfTtcblxuICAvLyBBTUQgcmVnaXN0cmF0aW9uIGhhcHBlbnMgYXQgdGhlIGVuZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIEFNRCBsb2FkZXJzXG4gIC8vIHRoYXQgbWF5IG5vdCBlbmZvcmNlIG5leHQtdHVybiBzZW1hbnRpY3Mgb24gbW9kdWxlcy4gRXZlbiB0aG91Z2ggZ2VuZXJhbFxuICAvLyBwcmFjdGljZSBmb3IgQU1EIHJlZ2lzdHJhdGlvbiBpcyB0byBiZSBhbm9ueW1vdXMsIHVuZGVyc2NvcmUgcmVnaXN0ZXJzXG4gIC8vIGFzIGEgbmFtZWQgbW9kdWxlIGJlY2F1c2UsIGxpa2UgalF1ZXJ5LCBpdCBpcyBhIGJhc2UgbGlicmFyeSB0aGF0IGlzXG4gIC8vIHBvcHVsYXIgZW5vdWdoIHRvIGJlIGJ1bmRsZWQgaW4gYSB0aGlyZCBwYXJ0eSBsaWIsIGJ1dCBub3QgYmUgcGFydCBvZlxuICAvLyBhbiBBTUQgbG9hZCByZXF1ZXN0LiBUaG9zZSBjYXNlcyBjb3VsZCBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGFuXG4gIC8vIGFub255bW91cyBkZWZpbmUoKSBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGxvYWRlciByZXF1ZXN0LlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoJ3VuZGVyc2NvcmUnLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxufSgpKTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2JtZXJzaG9uLzI1YTc0ZjdiMWM3Y2JkMDdlNzQ1NmFmMWQyYzA3ZGExXG4vLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS3J1c2thbCUyN3NfYWxnb3JpdGhtXFxcbi8vIERlcGVuZHMgb24gRGlzam9pbnRTZXQuXG5pbXBvcnQgXyBmcm9tIFwidW5kZXJzY29yZVwiO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlIHRoZSBwYWlycyBiZXR3ZWVuIG5vZGUgYW5kIGl0cyBsaW5rcy5cbiAqXG4gKiBAcGFyYW0gbGlua3NcbiAqIEByZXR1cm5zIFtbXCJub2RlWCxub2RlWVwiLCBBcnJheShudW1iZXJPZkxpbmtzUmVsYXRlZFRvVGhlTm9kZXMpXV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhaXJOb2RlTGlua3MobGlua3MpIHtcbiAgICBsZXQgbmVzdGVkQnlOb2RlcyA9IHt9O1xuICAgIGxpbmtzLmZvckVhY2gobCA9PiB7XG4gICAgICAgIGxldCBzb3VyY2VLZXkgPSBsLnNvdXJjZS5qb2luKCcsJyk7XG4gICAgICAgIGlmICghbmVzdGVkQnlOb2Rlc1tzb3VyY2VLZXldKSB7XG4gICAgICAgICAgICBuZXN0ZWRCeU5vZGVzW3NvdXJjZUtleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBuZXN0ZWRCeU5vZGVzW3NvdXJjZUtleV0ucHVzaChsKTtcbiAgICAgICAgbGV0IHRhcmdldEtleSA9IGwudGFyZ2V0LmpvaW4oJywnKTtcbiAgICAgICAgaWYgKCFuZXN0ZWRCeU5vZGVzW3RhcmdldEtleV0pIHtcbiAgICAgICAgICAgIG5lc3RlZEJ5Tm9kZXNbdGFyZ2V0S2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG5lc3RlZEJ5Tm9kZXNbdGFyZ2V0S2V5XS5wdXNoKGwpO1xuICAgIH0pO1xuICAgIC8vUGFpciB0aGUgcmVzdWx0c1xuICAgIGxldCBwYWlyZWRSZXN1bHRzID0gXy5wYWlycyhuZXN0ZWRCeU5vZGVzKTtcbiAgICByZXR1cm4gcGFpcmVkUmVzdWx0cztcbn1cblxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBjb3JuZXJzICh0aHJlZSB2ZXJ0aWNlcykgb2YgdmVydGljZXMgb2YgZGVncmVlIHR3byBpbiB0aGUgZm9yIG1hdCBvZlxuICogcG9pbnQxLCBwb2ludDIsIHBvaW50MyA9PiBwb2ludDEgaXMgdGhlIHRoZSB2ZXJ0ZXggd2l0aCBkZWdyZWUgdHdvICh0d28gZWRnZXMgY29ubmVjdGVkIHRvIGl0IGFyZSBbcG9pbnQxLCBwb2ludDJdIGFuZCBbcG9pbnQxLCBwb2ludDNdIChvcmRlciBvZiB0aGUgcG9pbnRzIGluIGVhY2ggZWRnZSBpcyBub3QgaW1wb3J0YW50KSkuXG4gKiBAcGFyYW0gdHJlZVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxWMkNvcm5lcnNGcm9tVHJlZSh0cmVlKSB7XG4gICAgbGV0IHBhaXJlZFJlc3VsdHMgPSBwYWlyTm9kZUxpbmtzKHRyZWUubGlua3MpO1xuICAgIC8vR2V0IGFsbCBwYWlycyB3aXRoIGxlbmd0aCA9IDIgKFYyKVxuICAgIGxldCBhbGxWMiA9IHBhaXJlZFJlc3VsdHMuZmlsdGVyKHAgPT4gcFsxXS5sZW5ndGggPT0gMik7XG5cbiAgICBsZXQgYWxsQ29ybmVycyA9IGFsbFYyLm1hcCh2MiA9PiB7XG4gICAgICAgIGxldCBjb3JuZXIgPSBbXTtcbiAgICAgICAgLy9GaXJzdCBwb2ludCBpcyB0aGUgY29tbW9uIHZlcnRpY2VcbiAgICAgICAgY29ybmVyLnB1c2godjJbMF0uc3BsaXQoJywnKS5tYXAoZCA9PiArZCkpOy8vbWFwKGQ9PitkKSBpcyB0byBjb252ZXJ0IHRoZSBzdHJpbmdzIGludG8gZGlnaXRzXG4gICAgICAgIC8vUHVzaCB0aGUgc291cmNlIG9yIHRhcmdldCBpZiB0aGV5IGFyZSBub3QgdGhlIGNvbW1vbiB2ZXJ0aWNlcyBvZiB0aGUgdHdvIGVkZ2VzXG4gICAgICAgIHYyWzFdLmZvckVhY2gobGluayA9PiB7XG4gICAgICAgICAgICBpZiAobGluay5zb3VyY2Uuam9pbignLCcpICE9IHYyWzBdKSB7XG4gICAgICAgICAgICAgICAgY29ybmVyLnB1c2gobGluay5zb3VyY2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb3JuZXIucHVzaChsaW5rLnRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29ybmVyO1xuICAgIH0pO1xuICAgIHJldHVybiBhbGxDb3JuZXJzO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbGwgc2luZ2xlIGRlZ3JlZSB2ZXJ0aWNlcyBmcm9tIGEgdHJlZVxuICogQHBhcmFtIHRyZWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbFYxc0Zyb21UcmVlKHRyZWUpIHtcbiAgICBsZXQgcGFpcmVkUmVzdWx0cyA9IHBhaXJOb2RlTGlua3ModHJlZS5saW5rcyk7XG4gICAgLy9HZXQgYWxsIHBhaXJzIHdpdGggbGVuZ3RoID0gMSAoVjEpXG4gICAgbGV0IGFsbFYxID0gcGFpcmVkUmVzdWx0cy5maWx0ZXIocCA9PiBwWzFdLmxlbmd0aCA9PSAxKTtcbiAgICByZXR1cm4gYWxsVjEubWFwKHYxID0+IHYxWzBdLnNwbGl0KCcsJykubWFwKE51bWJlcikpO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbGwgdmVydGljZXMgd2l0aCBkZWdyZWUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIDJcbiAqIEBwYXJhbSB0cmVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxWMk9yR3JlYXRlckZyb21UcmVlKHRyZWUpIHtcbiAgICBsZXQgcGFpcmVkUmVzdWx0cyA9IHBhaXJOb2RlTGlua3ModHJlZS5saW5rcyk7XG4gICAgLy9HZXQgYWxsIHBhaXJzIHdpdGggbGVuZ3RoID49IDIgKFYyKVxuICAgIGxldCBhbGxHVEVWMiA9IHBhaXJlZFJlc3VsdHMuZmlsdGVyKHAgPT4gcFsxXS5sZW5ndGggPj0gMik7XG4gICAgcmV0dXJuIGFsbEdURVYyLm1hcCh2ID0+IHZbMF0uc3BsaXQoJywnKS5tYXAoTnVtYmVyKSk7XG59XG5cbi8qKlxuICogQWZ0ZXIgcmVtb3Zpbmcgb3V0bHlpbmcgbGlua3MgKE1TVCBtYXkgYmUgZGlzY29ubmVjdGVkLCB3ZSBuZWVkIHRvIGJ1aWxkIGEgbmV3IGNvbm5lY3RlZCB0cmVlKS5cbiAqIEBwYXJhbSBwb2ludHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RNU1RzKHRyZWUpe1xuICAgIGxldCBtc3RzID0gW107XG4gICAgLy9UYWtlIHRoZSBmaXJzdCBlZGdlID0+IGFkZCBhbGwgdG8gb25lIGZpcnN0IHN1YnRyZWUuXG4gICAgbGV0IGZpcnN0Tm9kZSA9IHRyZWUubGlua3NbMF0uc291cmNlO1xuICAgIHdoaWxlKDEpe1xuICAgICAgICBsZXQgc3VibXN0ID0ge307XG5cbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBhIGdyYXBoIGZyb20gbWVzaFxuICogQHBhcmFtIHRyaWFuZ2xlcyBpcyBpbmZvcm0gb2Ygc2V0IG9mIHRyaWFuZ2xlcyBhcyB0aGUgcmVzdWx0IGZyb20gZGVsYXVuYXkgdHJpYW5ndWxhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdyYXBoKHRyaWFuZ2xlcykge1xuXG4gICAgZnVuY3Rpb24gbWFrZUxpbmsoc291cmNlSWQsIHRhcmdldElkLCB3ZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHtcInNvdXJjZVwiOiBzb3VyY2VJZCwgXCJ0YXJnZXRcIjogdGFyZ2V0SWQsIFwid2VpZ2h0XCI6IHdlaWdodH07XG4gICAgfVxuXG4gICAgbGV0IGdyYXBoID0ge307XG4gICAgZ3JhcGgubm9kZXMgPSBbXTtcbiAgICBncmFwaC5saW5rcyA9IFtdO1xuICAgIC8vQ3JlYXRpbmcgbm9kZXNcbiAgICB0cmlhbmdsZXMuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IHRbaV07XG4gICAgICAgICAgICBpZiAoIWlkRXhpc3RzKGdyYXBoLm5vZGVzLCBpZCkpIHtcbiAgICAgICAgICAgICAgICBncmFwaC5ub2Rlcy5wdXNoKG1ha2VOb2RlKGlkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vQ3JlYXRpbmcgbGlua3NcbiAgICB0cmlhbmdsZXMuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwMSA9IHRbaV07XG4gICAgICAgICAgICBsZXQgcDIgPSB0WyhpICsgMSkgJSAzXTtcbiAgICAgICAgICAgIGxldCBpZDEgPSBwMTtcbiAgICAgICAgICAgIGxldCBpZDIgPSBwMjtcbiAgICAgICAgICAgIGxldCBkaXN0ID0gZGlzdGFuY2UocDEsIHAyKTtcbiAgICAgICAgICAgIGxldCBsaW5rID0gbWFrZUxpbmsoaWQxLCBpZDIsIGRpc3QpO1xuICAgICAgICAgICAgaWYgKCFsaW5rRXhpc3RzKGdyYXBoLmxpbmtzLCBsaW5rKSkge1xuICAgICAgICAgICAgICAgIGdyYXBoLmxpbmtzLnB1c2gobGluayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vVE9ETzogbWF5IHNvcnQgdGhlIGlkIGFscGhhYmV0aWNhbGx5ID0+IHdoZW4gY3JlYXRpbmcgPT4gc28gd2UgY2FuIGp1c3QgY2hlY2sgMSBjb25kaXRpb24gb25seS5cbiAgICBmdW5jdGlvbiBsaW5rRXhpc3RzKGxpbmtzLCBsaW5rKSB7XG4gICAgICAgIGxldCBsZW5ndGggPSBsaW5rcy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSBsZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgaWYgKGVxdWFsTGlua3MobGluaywgbGlua3NbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBncmFwaDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgICBsZXQgZHggPSBhWzBdIC0gYlswXSxcbiAgICAgICAgZHkgPSBhWzFdIC0gYlsxXTtcbiAgICAvL0ZvciBjb21wdXRlciBzdG9yYWdlIGlzc3VlLCBzb21lIGNvb3JkaW5hdGVzIG9mIHRoZSBzYW1lIGRpc3RhbmNlIG1heSByZXR1cm4gZGlmZmVyZW50IGRpc3RhbmNlcyBpZiB3ZSB1c2UgbG9uZyBmbG9hdGluZyBwb2ludFxuICAgIC8vU28gdGFrZSBvbmx5IDEwIGRpZ2l0cyBhZnRlciB0aGUgZmxvYXRpbmcgcG9pbnRzPT4gdGhpcyBpcyBwcmVjaXNlIGVub3VnaCBhbmQgc3RpbGwgaGF2ZSB0aGUgc2FtZSB2YWx1ZXMgZm9yIHR3byBkaWZmZXJlbnQgbGluZXMgb2YgdGhlIHNhbWUgZGlzdGFuY2VcbiAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnNxcnQoKGR4ICogZHgpICsgKGR5ICogZHkpKSAqIE1hdGgucG93KDEwLCAxMCkpIC8gTWF0aC5wb3coMTAsIDEwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsUG9pbnRzKGlkMSwgaWQyKSB7XG4gICAgcmV0dXJuIChpZDFbMF0gPT09IGlkMlswXSAmJiBpZDFbMV0gPT09IGlkMlsxXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbExpbmtzKGwxLCBsMikge1xuICAgIHJldHVybiAoZXF1YWxQb2ludHMobDEuc291cmNlLCBsMi5zb3VyY2UpICYmIGVxdWFsUG9pbnRzKGwxLnRhcmdldCwgbDIudGFyZ2V0KSkgfHxcbiAgICAgICAgKGVxdWFsUG9pbnRzKGwxLnNvdXJjZSwgbDIudGFyZ2V0KSAmJiBlcXVhbFBvaW50cyhsMS50YXJnZXQsIGwyLnNvdXJjZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaWRFeGlzdHMobm9kZXMsIGlkKSB7XG4gICAgbGV0IGxlbmd0aCA9IG5vZGVzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gbGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbGV0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKGVxdWFsUG9pbnRzKG5vZGUuaWQsIGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZU5vZGUoaWQpIHtcbiAgICByZXR1cm4ge1wiaWRcIjogaWR9O1xufVxuXG4vKipcbiAqIGNyZWF0ZSB0aGUgbXN0XG4gKiBAcGFyYW0gZ3JhcGg6IGluIGZvcm0gb2Ygbm9kZXMgYW5kIGxpbmtzXG4gKiBAcmV0dXJucyB7e25vZGVzOiAoc2VsZWN0aW9uX25vZGVzfG5vZGVzKSwgbGlua3M6IEFycmF5fX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1zdChncmFwaCkge1xuICAgIGxldCB2ZXJ0aWNlcyA9IGdyYXBoLm5vZGVzLFxuICAgICAgICBlZGdlcyA9IGdyYXBoLmxpbmtzLnNsaWNlKDApLFxuICAgICAgICBzZWxlY3RlZEVkZ2VzID0gW10sXG4gICAgICAgIGZvcmVzdCA9IG5ldyBEaXNqb2ludFNldCgpO1xuXG4gICAgLy8gRWFjaCB2ZXJ0ZXggYmVnaW5zIFwiZGlzY29ubmVjdGVkXCIgYW5kIGlzb2xhdGVkIGZyb20gYWxsIHRoZSBvdGhlcnMuXG4gICAgdmVydGljZXMuZm9yRWFjaCgodmVydGV4KSA9PiB7XG4gICAgICAgIGZvcmVzdC5tYWtlU2V0KHZlcnRleC5pZCk7XG4gICAgfSk7XG5cbiAgICAvLyBTb3J0IGVkZ2VzIGluIGRlc2NlbmRpbmcgb3JkZXIgb2Ygd2VpZ2h0LiBXZSB3aWxsIHBvcCBlZGdlcyBiZWdpbm5pbmdcbiAgICAvLyBmcm9tIHRoZSBlbmQgb2YgdGhlIGFycmF5LlxuICAgIGVkZ2VzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgcmV0dXJuIC0oYS53ZWlnaHQgLSBiLndlaWdodCk7XG4gICAgfSk7XG5cbiAgICB3aGlsZSAoZWRnZXMubGVuZ3RoICYmIGZvcmVzdC5zaXplKCkgPiAxKSB7XG4gICAgICAgIGxldCBlZGdlID0gZWRnZXMucG9wKCk7XG5cbiAgICAgICAgaWYgKGZvcmVzdC5maW5kKGVkZ2Uuc291cmNlKSAhPT0gZm9yZXN0LmZpbmQoZWRnZS50YXJnZXQpKSB7XG4gICAgICAgICAgICBmb3Jlc3QudW5pb24oZWRnZS5zb3VyY2UsIGVkZ2UudGFyZ2V0KTtcbiAgICAgICAgICAgIHNlbGVjdGVkRWRnZXMucHVzaChlZGdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGVzOiB2ZXJ0aWNlcyxcbiAgICAgICAgbGlua3M6IHNlbGVjdGVkRWRnZXNcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gRGlzam9pbnRTZXQoKSB7XG4gICAgdGhpcy5pbmRleF8gPSB7fTtcbn1cblxuZnVuY3Rpb24gTm9kZShpZCkge1xuICAgIHRoaXMuaWRfID0gaWQ7XG4gICAgdGhpcy5wYXJlbnRfID0gdGhpcztcbiAgICB0aGlzLnJhbmtfID0gMDtcbn1cblxuRGlzam9pbnRTZXQucHJvdG90eXBlLm1ha2VTZXQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZiAoIXRoaXMuaW5kZXhfW2lkXSkge1xuICAgICAgICBsZXQgY3JlYXRlZCA9IG5ldyBOb2RlKGlkKTtcbiAgICAgICAgdGhpcy5pbmRleF9baWRdID0gY3JlYXRlZDtcbiAgICB9XG59XG5cbi8vIFJldHVybnMgdGhlIGlkIG9mIHRoZSByZXByZXNlbnRhdGl2ZSBlbGVtZW50IG9mIHRoaXMgc2V0IHRoYXQgKGlkKVxuLy8gYmVsb25ncyB0by5cbkRpc2pvaW50U2V0LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKHRoaXMuaW5kZXhfW2lkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLmluZGV4X1tpZF0ucGFyZW50XztcbiAgICB3aGlsZSAoY3VycmVudCAhPT0gY3VycmVudC5wYXJlbnRfKSB7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudF87XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50LmlkXztcbn1cblxuRGlzam9pbnRTZXQucHJvdG90eXBlLnVuaW9uID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICBsZXQgeFJvb3QgPSB0aGlzLmluZGV4X1t0aGlzLmZpbmQoeCldO1xuICAgIGxldCB5Um9vdCA9IHRoaXMuaW5kZXhfW3RoaXMuZmluZCh5KV07XG5cbiAgICBpZiAoeFJvb3QgPT09IHVuZGVmaW5lZCB8fCB5Um9vdCA9PT0gdW5kZWZpbmVkIHx8IHhSb290ID09PSB5Um9vdCkge1xuICAgICAgICAvLyB4IGFuZCB5IGFscmVhZHkgYmVsb25nIHRvIHRoZSBzYW1lIHNldC5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh4Um9vdC5yYW5rIDwgeVJvb3QucmFuaykgeyAvLyBNb3ZlIHggaW50byB0aGUgc2V0IHkgaXMgYSBtZW1iZXIgb2YuXG4gICAgICAgIHhSb290LnBhcmVudF8gPSB5Um9vdDtcbiAgICB9IGVsc2UgaWYgKHlSb290LnJhbmtfIDwgeFJvb3QucmFua18pIHsgLy8gTW92ZSB5IGludG8gdGhlIHNldCB4IGlzIGEgbWVtYmVyIG9mLlxuICAgICAgICB5Um9vdC5wYXJlbnRfID0geFJvb3Q7XG4gICAgfSBlbHNlIHsgLy8gQXJiaXRyYXJpbHkgY2hvb3NlIHRvIG1vdmUgeSBpbnRvIHRoZSBzZXQgeCBpcyBhIG1lbWJlciBvZi5cbiAgICAgICAgeVJvb3QucGFyZW50XyA9IHhSb290O1xuICAgICAgICB4Um9vdC5yYW5rXysrO1xuICAgIH1cbn1cblxuLy8gUmV0dXJucyB0aGUgY3VycmVudCBudW1iZXIgb2YgZGlzam9pbnQgc2V0cy5cbkRpc2pvaW50U2V0LnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCB1bmlxdWVJbmRpY2VzID0ge307XG4gICAgT2JqZWN0LmtleXModGhpcy5pbmRleF8pLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICAgIHVuaXF1ZUluZGljZXNbaWRdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModW5pcXVlSW5kaWNlcykubGVuZ3RoO1xufVxuIiwiLyogQGZsb3cgKi9cblxuLyoqXG4gKiBbU2ltcGxlIGxpbmVhciByZWdyZXNzaW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NpbXBsZV9saW5lYXJfcmVncmVzc2lvbilcbiAqIGlzIGEgc2ltcGxlIHdheSB0byBmaW5kIGEgZml0dGVkIGxpbmVcbiAqIGJldHdlZW4gYSBzZXQgb2YgY29vcmRpbmF0ZXMuIFRoaXMgYWxnb3JpdGhtIGZpbmRzIHRoZSBzbG9wZSBhbmQgeS1pbnRlcmNlcHQgb2YgYSByZWdyZXNzaW9uIGxpbmVcbiAqIHVzaW5nIHRoZSBsZWFzdCBzdW0gb2Ygc3F1YXJlcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBkYXRhIGFuIGFycmF5IG9mIHR3by1lbGVtZW50IG9mIGFycmF5cyxcbiAqIGxpa2UgYFtbMCwgMV0sIFsyLCAzXV1gXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyBzbG9wZSBhbmQgaW50ZXJzZWN0IG9mIHJlZ3Jlc3Npb24gbGluZVxuICogQGV4YW1wbGVcbiAqIGxpbmVhclJlZ3Jlc3Npb24oW1swLCAwXSwgWzEsIDFdXSk7IC8vID0+IHsgbTogMSwgYjogMCB9XG4gKi9cbmZ1bmN0aW9uIGxpbmVhclJlZ3Jlc3Npb24oZGF0YS8qOiBBcnJheTxBcnJheTxudW1iZXI+PiAqLykvKjogeyBtOiBudW1iZXIsIGI6IG51bWJlciB9ICovIHtcblxuICAgIHZhciBtLCBiO1xuXG4gICAgLy8gU3RvcmUgZGF0YSBsZW5ndGggaW4gYSBsb2NhbCB2YXJpYWJsZSB0byByZWR1Y2VcbiAgICAvLyByZXBlYXRlZCBvYmplY3QgcHJvcGVydHkgbG9va3Vwc1xuICAgIHZhciBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgICAvL2lmIHRoZXJlJ3Mgb25seSBvbmUgcG9pbnQsIGFyYml0cmFyaWx5IGNob29zZSBhIHNsb3BlIG9mIDBcbiAgICAvL2FuZCBhIHktaW50ZXJjZXB0IG9mIHdoYXRldmVyIHRoZSB5IG9mIHRoZSBpbml0aWFsIHBvaW50IGlzXG4gICAgaWYgKGRhdGFMZW5ndGggPT09IDEpIHtcbiAgICAgICAgbSA9IDA7XG4gICAgICAgIGIgPSBkYXRhWzBdWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEluaXRpYWxpemUgb3VyIHN1bXMgYW5kIHNjb3BlIHRoZSBgbWAgYW5kIGBiYFxuICAgICAgICAvLyB2YXJpYWJsZXMgdGhhdCBkZWZpbmUgdGhlIGxpbmUuXG4gICAgICAgIHZhciBzdW1YID0gMCwgc3VtWSA9IDAsXG4gICAgICAgICAgICBzdW1YWCA9IDAsIHN1bVhZID0gMDtcblxuICAgICAgICAvLyBVc2UgbG9jYWwgdmFyaWFibGVzIHRvIGdyYWIgcG9pbnQgdmFsdWVzXG4gICAgICAgIC8vIHdpdGggbWluaW1hbCBvYmplY3QgcHJvcGVydHkgbG9va3Vwc1xuICAgICAgICB2YXIgcG9pbnQsIHgsIHk7XG5cbiAgICAgICAgLy8gR2F0aGVyIHRoZSBzdW0gb2YgYWxsIHggdmFsdWVzLCB0aGUgc3VtIG9mIGFsbFxuICAgICAgICAvLyB5IHZhbHVlcywgYW5kIHRoZSBzdW0gb2YgeF4yIGFuZCAoeCp5KSBmb3IgZWFjaFxuICAgICAgICAvLyB2YWx1ZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSW4gbWF0aCBub3RhdGlvbiwgdGhlc2Ugd291bGQgYmUgU1NfeCwgU1NfeSwgU1NfeHgsIGFuZCBTU194eVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcG9pbnQgPSBkYXRhW2ldO1xuICAgICAgICAgICAgeCA9IHBvaW50WzBdO1xuICAgICAgICAgICAgeSA9IHBvaW50WzFdO1xuXG4gICAgICAgICAgICBzdW1YICs9IHg7XG4gICAgICAgICAgICBzdW1ZICs9IHk7XG5cbiAgICAgICAgICAgIHN1bVhYICs9IHggKiB4O1xuICAgICAgICAgICAgc3VtWFkgKz0geCAqIHk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBgbWAgaXMgdGhlIHNsb3BlIG9mIHRoZSByZWdyZXNzaW9uIGxpbmVcbiAgICAgICAgbSA9ICgoZGF0YUxlbmd0aCAqIHN1bVhZKSAtIChzdW1YICogc3VtWSkpIC9cbiAgICAgICAgICAgICgoZGF0YUxlbmd0aCAqIHN1bVhYKSAtIChzdW1YICogc3VtWCkpO1xuXG4gICAgICAgIC8vIGBiYCBpcyB0aGUgeS1pbnRlcmNlcHQgb2YgdGhlIGxpbmUuXG4gICAgICAgIGIgPSAoc3VtWSAvIGRhdGFMZW5ndGgpIC0gKChtICogc3VtWCkgLyBkYXRhTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYm90aCB2YWx1ZXMgYXMgYW4gb2JqZWN0LlxuICAgIHJldHVybiB7XG4gICAgICAgIG06IG0sXG4gICAgICAgIGI6IGJcbiAgICB9O1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIEdpdmVuIHRoZSBvdXRwdXQgb2YgYGxpbmVhclJlZ3Jlc3Npb25gOiBhbiBvYmplY3RcbiAqIHdpdGggYG1gIGFuZCBgYmAgdmFsdWVzIGluZGljYXRpbmcgc2xvcGUgYW5kIGludGVyY2VwdCxcbiAqIHJlc3BlY3RpdmVseSwgZ2VuZXJhdGUgYSBsaW5lIGZ1bmN0aW9uIHRoYXQgdHJhbnNsYXRlc1xuICogeCB2YWx1ZXMgaW50byB5IHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWIgb2JqZWN0IHdpdGggYG1gIGFuZCBgYmAgbWVtYmVycywgcmVwcmVzZW50aW5nXG4gKiBzbG9wZSBhbmQgaW50ZXJzZWN0IG9mIGRlc2lyZWQgbGluZVxuICogQHJldHVybnMge0Z1bmN0aW9ufSBtZXRob2QgdGhhdCBjb21wdXRlcyB5LXZhbHVlIGF0IGFueSBnaXZlblxuICogeC12YWx1ZSBvbiB0aGUgbGluZS5cbiAqIEBleGFtcGxlXG4gKiB2YXIgbCA9IGxpbmVhclJlZ3Jlc3Npb25MaW5lKGxpbmVhclJlZ3Jlc3Npb24oW1swLCAwXSwgWzEsIDFdXSkpO1xuICogbCgwKSAvLyA9IDBcbiAqIGwoMikgLy8gPSAyXG4gKiBsaW5lYXJSZWdyZXNzaW9uTGluZSh7IGI6IDAsIG06IDEgfSkoMSk7IC8vID0+IDFcbiAqIGxpbmVhclJlZ3Jlc3Npb25MaW5lKHsgYjogMSwgbTogMSB9KSgxKTsgLy8gPT4gMlxuICovXG5mdW5jdGlvbiBsaW5lYXJSZWdyZXNzaW9uTGluZShtYi8qOiB7IGI6IG51bWJlciwgbTogbnVtYmVyIH0qLykvKjogRnVuY3Rpb24gKi8ge1xuICAgIC8vIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgY29tcHV0ZXMgYSBgeWAgdmFsdWUgZm9yIGVhY2hcbiAgICAvLyB4IHZhbHVlIGl0IGlzIGdpdmVuLCBiYXNlZCBvbiB0aGUgdmFsdWVzIG9mIGBiYCBhbmQgYGFgXG4gICAgLy8gdGhhdCB3ZSBqdXN0IGNvbXB1dGVkLlxuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBtYi5iICsgKG1iLm0gKiB4KTtcbiAgICB9O1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIE91ciBkZWZhdWx0IHN1bSBpcyB0aGUgW0thaGFuLUJhYnVza2EgYWxnb3JpdGhtXShodHRwczovL3BkZnMuc2VtYW50aWNzY2hvbGFyLm9yZy8xNzYwLzdkNDY3Y2RhMWQwMjc3YWQyNzJkZWIyMTEzNTMzMTMxZGMwOS5wZGYpLlxuICogVGhpcyBtZXRob2QgaXMgYW4gaW1wcm92ZW1lbnQgb3ZlciB0aGUgY2xhc3NpY2FsXG4gKiBbS2FoYW4gc3VtbWF0aW9uIGFsZ29yaXRobV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2FoYW5fc3VtbWF0aW9uX2FsZ29yaXRobSkuXG4gKiBJdCBhaW1zIGF0IGNvbXB1dGluZyB0aGUgc3VtIG9mIGEgbGlzdCBvZiBudW1iZXJzIHdoaWxlIGNvcnJlY3RpbmcgZm9yXG4gKiBmbG9hdGluZy1wb2ludCBlcnJvcnMuIFRyYWRpdGlvbmFsbHksIHN1bXMgYXJlIGNhbGN1bGF0ZWQgYXMgbWFueVxuICogc3VjY2Vzc2l2ZSBhZGRpdGlvbnMsIGVhY2ggb25lIHdpdGggaXRzIG93biBmbG9hdGluZy1wb2ludCByb3VuZG9mZi4gVGhlc2VcbiAqIGxvc3NlcyBpbiBwcmVjaXNpb24gYWRkIHVwIGFzIHRoZSBudW1iZXIgb2YgbnVtYmVycyBpbmNyZWFzZXMuIFRoaXMgYWx0ZXJuYXRpdmVcbiAqIGFsZ29yaXRobSBpcyBtb3JlIGFjY3VyYXRlIHRoYW4gdGhlIHNpbXBsZSB3YXkgb2YgY2FsY3VsYXRpbmcgc3VtcyBieSBzaW1wbGVcbiAqIGFkZGl0aW9uLlxuICpcbiAqIFRoaXMgcnVucyBvbiBgTyhuKWAsIGxpbmVhciB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybiB7bnVtYmVyfSBzdW0gb2YgYWxsIGlucHV0IG51bWJlcnNcbiAqIEBleGFtcGxlXG4gKiBzdW0oWzEsIDIsIDNdKTsgLy8gPT4gNlxuICovXG5mdW5jdGlvbiBzdW0oeC8qOiBBcnJheTxudW1iZXI+ICovKS8qOiBudW1iZXIgKi8ge1xuXG4gICAgLy8gSWYgdGhlIGFycmF5IGlzIGVtcHR5LCB3ZSBuZWVkbid0IGJvdGhlciBjb21wdXRpbmcgaXRzIHN1bVxuICAgIGlmICh4Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXppbmcgdGhlIHN1bSBhcyB0aGUgZmlyc3QgbnVtYmVyIGluIHRoZSBhcnJheVxuICAgIHZhciBzdW0gPSB4WzBdO1xuXG4gICAgLy8gS2VlcGluZyB0cmFjayBvZiB0aGUgZmxvYXRpbmctcG9pbnQgZXJyb3IgY29ycmVjdGlvblxuICAgIHZhciBjb3JyZWN0aW9uID0gMDtcblxuICAgIHZhciB0cmFuc2l0aW9uO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSBzdW0gKyB4W2ldO1xuXG4gICAgICAgIC8vIEhlcmUgd2UgbmVlZCB0byB1cGRhdGUgdGhlIGNvcnJlY3Rpb24gaW4gYSBkaWZmZXJlbnQgZmFzaGlvblxuICAgICAgICAvLyBpZiB0aGUgbmV3IGFic29sdXRlIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgYWJzb2x1dGUgc3VtXG4gICAgICAgIGlmIChNYXRoLmFicyhzdW0pID49IE1hdGguYWJzKHhbaV0pKSB7XG4gICAgICAgICAgICBjb3JyZWN0aW9uICs9ICgoc3VtIC0gdHJhbnNpdGlvbikgKyB4W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvcnJlY3Rpb24gKz0gKCh4W2ldIC0gdHJhbnNpdGlvbikgKyBzdW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VtID0gdHJhbnNpdGlvbjtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5pbmcgdGhlIGNvcnJlY3RlZCBzdW1cbiAgICByZXR1cm4gc3VtICsgY29ycmVjdGlvbjtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgbWVhbiwgX2Fsc28ga25vd24gYXMgYXZlcmFnZV8sXG4gKiBpcyB0aGUgc3VtIG9mIGFsbCB2YWx1ZXMgb3ZlciB0aGUgbnVtYmVyIG9mIHZhbHVlcy5cbiAqIFRoaXMgaXMgYSBbbWVhc3VyZSBvZiBjZW50cmFsIHRlbmRlbmN5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DZW50cmFsX3RlbmRlbmN5KTpcbiAqIGEgbWV0aG9kIG9mIGZpbmRpbmcgYSB0eXBpY2FsIG9yIGNlbnRyYWwgdmFsdWUgb2YgYSBzZXQgb2YgbnVtYmVycy5cbiAqXG4gKiBUaGlzIHJ1bnMgb24gYE8obilgLCBsaW5lYXIgdGltZSBpbiByZXNwZWN0IHRvIHRoZSBhcnJheVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBzYW1wbGUgb2Ygb25lIG9yIG1vcmUgZGF0YSBwb2ludHNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgdGhlIGxlbmd0aCBvZiB4IGlzIGxlc3MgdGhhbiBvbmVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IG1lYW5cbiAqIEBleGFtcGxlXG4gKiBtZWFuKFswLCAxMF0pOyAvLyA9PiA1XG4gKi9cbmZ1bmN0aW9uIG1lYW4oeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjogbnVtYmVyICovIHtcbiAgICAvLyBUaGUgbWVhbiBvZiBubyBudW1iZXJzIGlzIG51bGxcbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZWFuIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBkYXRhIHBvaW50Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1bSh4KSAvIHgubGVuZ3RoO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBzdW0gb2YgZGV2aWF0aW9ucyB0byB0aGUgTnRoIHBvd2VyLlxuICogV2hlbiBuPTIgaXQncyB0aGUgc3VtIG9mIHNxdWFyZWQgZGV2aWF0aW9ucy5cbiAqIFdoZW4gbj0zIGl0J3MgdGhlIHN1bSBvZiBjdWJlZCBkZXZpYXRpb25zLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geFxuICogQHBhcmFtIHtudW1iZXJ9IG4gcG93ZXJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHN1bSBvZiBudGggcG93ZXIgZGV2aWF0aW9uc1xuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgaW5wdXQgPSBbMSwgMiwgM107XG4gKiAvLyBzaW5jZSB0aGUgdmFyaWFuY2Ugb2YgYSBzZXQgaXMgdGhlIG1lYW4gc3F1YXJlZFxuICogLy8gZGV2aWF0aW9ucywgd2UgY2FuIGNhbGN1bGF0ZSB0aGF0IHdpdGggc3VtTnRoUG93ZXJEZXZpYXRpb25zOlxuICogc3VtTnRoUG93ZXJEZXZpYXRpb25zKGlucHV0LCAyKSAvIGlucHV0Lmxlbmd0aDtcbiAqL1xuZnVuY3Rpb24gc3VtTnRoUG93ZXJEZXZpYXRpb25zKHgvKjogQXJyYXk8bnVtYmVyPiAqLywgbi8qOiBudW1iZXIgKi8pLyo6IG51bWJlciAqLyB7XG4gICAgdmFyIG1lYW5WYWx1ZSA9IG1lYW4oeCksXG4gICAgICAgIHN1bSA9IDAsXG4gICAgICAgIHRlbXBWYWx1ZSxcbiAgICAgICAgaTtcblxuICAgIC8vIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uOiB3aGVuIG4gaXMgMiAod2UncmUgY29tcHV0aW5nIGEgbnVtYmVyIHNxdWFyZWQpLFxuICAgIC8vIG11bHRpcGx5aW5nIHRoZSBudW1iZXIgYnkgaXRzZWxmIGlzIHNpZ25pZmljYW50bHkgZmFzdGVyIHRoYW4gdXNpbmdcbiAgICAvLyB0aGUgTWF0aC5wb3cgbWV0aG9kLlxuICAgIGlmIChuID09PSAyKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0ZW1wVmFsdWUgPSB4W2ldIC0gbWVhblZhbHVlO1xuICAgICAgICAgICAgc3VtICs9IHRlbXBWYWx1ZSAqIHRlbXBWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdW0gKz0gTWF0aC5wb3coeFtpXSAtIG1lYW5WYWx1ZSwgbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3VtO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBbdmFyaWFuY2VdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFyaWFuY2UpXG4gKiBpcyB0aGUgc3VtIG9mIHNxdWFyZWQgZGV2aWF0aW9ucyBmcm9tIHRoZSBtZWFuLlxuICpcbiAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdmFyaWFuY2UsIG5vdCBzYW1wbGUgdmFyaWFuY2U6XG4gKiBzZWUgdGhlIGBzYW1wbGVWYXJpYW5jZWAgbWV0aG9kIGlmIHlvdSB3YW50IGEgc2FtcGxlIG1lYXN1cmUuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGEgcG9wdWxhdGlvbiBvZiBvbmUgb3IgbW9yZSBkYXRhIHBvaW50c1xuICogQHJldHVybnMge251bWJlcn0gdmFyaWFuY2U6IGEgdmFsdWUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8uXG4gKiB6ZXJvIGluZGljYXRlcyB0aGF0IGFsbCB2YWx1ZXMgYXJlIGlkZW50aWNhbC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB4J3MgbGVuZ3RoIGlzIDBcbiAqIEBleGFtcGxlXG4gKiB2YXJpYW5jZShbMSwgMiwgMywgNCwgNSwgNl0pOyAvLyA9PiAyLjkxNjY2NjY2NjY2NjY2NjVcbiAqL1xuZnVuY3Rpb24gdmFyaWFuY2UoeC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcbiAgICAvLyBUaGUgdmFyaWFuY2Ugb2Ygbm8gbnVtYmVycyBpcyBudWxsXG4gICAgaWYgKHgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndmFyaWFuY2UgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGRhdGEgcG9pbnQnKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBtZWFuIG9mIHNxdWFyZWQgZGV2aWF0aW9ucyBiZXR3ZWVuIHRoZVxuICAgIC8vIG1lYW4gdmFsdWUgYW5kIGVhY2ggdmFsdWUuXG4gICAgcmV0dXJuIHN1bU50aFBvd2VyRGV2aWF0aW9ucyh4LCAyKSAvIHgubGVuZ3RoO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBbc3RhbmRhcmQgZGV2aWF0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N0YW5kYXJkX2RldmlhdGlvbilcbiAqIGlzIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgdmFyaWFuY2UuIFRoaXMgaXMgYWxzbyBrbm93biBhcyB0aGUgcG9wdWxhdGlvblxuICogc3RhbmRhcmQgZGV2aWF0aW9uLiBJdCdzIHVzZWZ1bCBmb3IgbWVhc3VyaW5nIHRoZSBhbW91bnRcbiAqIG9mIHZhcmlhdGlvbiBvciBkaXNwZXJzaW9uIGluIGEgc2V0IG9mIHZhbHVlcy5cbiAqXG4gKiBTdGFuZGFyZCBkZXZpYXRpb24gaXMgb25seSBhcHByb3ByaWF0ZSBmb3IgZnVsbC1wb3B1bGF0aW9uIGtub3dsZWRnZTogZm9yXG4gKiBzYW1wbGVzIG9mIGEgcG9wdWxhdGlvbiwge0BsaW5rIHNhbXBsZVN0YW5kYXJkRGV2aWF0aW9ufSBpc1xuICogbW9yZSBhcHByb3ByaWF0ZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggaW5wdXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHN0YW5kYXJkIGRldmlhdGlvblxuICogQGV4YW1wbGVcbiAqIHZhcmlhbmNlKFsyLCA0LCA0LCA0LCA1LCA1LCA3LCA5XSk7IC8vID0+IDRcbiAqIHN0YW5kYXJkRGV2aWF0aW9uKFsyLCA0LCA0LCA0LCA1LCA1LCA3LCA5XSk7IC8vID0+IDJcbiAqL1xuZnVuY3Rpb24gc3RhbmRhcmREZXZpYXRpb24oeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgaWYgKHgubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB2YXIgdiA9IHZhcmlhbmNlKHgpO1xuICAgIHJldHVybiBNYXRoLnNxcnQodik7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFtSIFNxdWFyZWRdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29lZmZpY2llbnRfb2ZfZGV0ZXJtaW5hdGlvbilcbiAqIHZhbHVlIG9mIGRhdGEgY29tcGFyZWQgd2l0aCBhIGZ1bmN0aW9uIGBmYFxuICogaXMgdGhlIHN1bSBvZiB0aGUgc3F1YXJlZCBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZSBwcmVkaWN0aW9uXG4gKiBhbmQgdGhlIGFjdHVhbCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSB4IGlucHV0IGRhdGE6IHRoaXMgc2hvdWxkIGJlIGRvdWJseS1uZXN0ZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgZnVuY3Rpb24gY2FsbGVkIG9uIGBbaV1bMF1gIHZhbHVlcyB3aXRoaW4gdGhlIGRhdGFzZXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHItc3F1YXJlZCB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIHZhciBzYW1wbGVzID0gW1swLCAwXSwgWzEsIDFdXTtcbiAqIHZhciByZWdyZXNzaW9uTGluZSA9IGxpbmVhclJlZ3Jlc3Npb25MaW5lKGxpbmVhclJlZ3Jlc3Npb24oc2FtcGxlcykpO1xuICogclNxdWFyZWQoc2FtcGxlcywgcmVncmVzc2lvbkxpbmUpOyAvLyA9IDEgdGhpcyBsaW5lIGlzIGEgcGVyZmVjdCBmaXRcbiAqL1xuZnVuY3Rpb24gclNxdWFyZWQoeCAvKjogQXJyYXk8QXJyYXk8bnVtYmVyPj4gKi8sIGZ1bmMgLyo6IEZ1bmN0aW9uICovKSAvKjogbnVtYmVyICovIHtcbiAgICBpZiAoeC5sZW5ndGggPCAyKSB7IHJldHVybiAxOyB9XG5cbiAgICAvLyBDb21wdXRlIHRoZSBhdmVyYWdlIHkgdmFsdWUgZm9yIHRoZSBhY3R1YWxcbiAgICAvLyBkYXRhIHNldCBpbiBvcmRlciB0byBjb21wdXRlIHRoZVxuICAgIC8vIF90b3RhbCBzdW0gb2Ygc3F1YXJlc19cbiAgICB2YXIgc3VtID0gMCwgYXZlcmFnZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3VtICs9IHhbaV1bMV07XG4gICAgfVxuICAgIGF2ZXJhZ2UgPSBzdW0gLyB4Lmxlbmd0aDtcblxuICAgIC8vIENvbXB1dGUgdGhlIHRvdGFsIHN1bSBvZiBzcXVhcmVzIC0gdGhlXG4gICAgLy8gc3F1YXJlZCBkaWZmZXJlbmNlIGJldHdlZW4gZWFjaCBwb2ludFxuICAgIC8vIGFuZCB0aGUgYXZlcmFnZSBvZiBhbGwgcG9pbnRzLlxuICAgIHZhciBzdW1PZlNxdWFyZXMgPSAwO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgeC5sZW5ndGg7IGorKykge1xuICAgICAgICBzdW1PZlNxdWFyZXMgKz0gTWF0aC5wb3coYXZlcmFnZSAtIHhbal1bMV0sIDIpO1xuICAgIH1cblxuICAgIC8vIEZpbmFsbHkgZXN0aW1hdGUgdGhlIGVycm9yOiB0aGUgc3F1YXJlZFxuICAgIC8vIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgZXN0aW1hdGUgYW5kIHRoZSBhY3R1YWwgZGF0YVxuICAgIC8vIHZhbHVlIGF0IGVhY2ggcG9pbnQuXG4gICAgdmFyIGVyciA9IDA7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCB4Lmxlbmd0aDsgaysrKSB7XG4gICAgICAgIGVyciArPSBNYXRoLnBvdyh4W2tdWzFdIC0gZnVuYyh4W2tdWzBdKSwgMik7XG4gICAgfVxuXG4gICAgLy8gQXMgdGhlIGVycm9yIGdyb3dzIGxhcmdlciwgaXRzIHJhdGlvIHRvIHRoZVxuICAgIC8vIHN1bSBvZiBzcXVhcmVzIGluY3JlYXNlcyBhbmQgdGhlIHIgc3F1YXJlZFxuICAgIC8vIHZhbHVlIGdyb3dzIGxvd2VyLlxuICAgIHJldHVybiAxIC0gZXJyIC8gc3VtT2ZTcXVhcmVzO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBbbW9kZV0oaHR0cDovL2JpdC5seS9XNUs0WXQpIGlzIHRoZSBudW1iZXIgdGhhdCBhcHBlYXJzIGluIGEgbGlzdCB0aGUgaGlnaGVzdCBudW1iZXIgb2YgdGltZXMuXG4gKiBUaGVyZSBjYW4gYmUgbXVsdGlwbGUgbW9kZXMgaW4gYSBsaXN0OiBpbiB0aGUgZXZlbnQgb2YgYSB0aWUsIHRoaXNcbiAqIGFsZ29yaXRobSB3aWxsIHJldHVybiB0aGUgbW9zdCByZWNlbnRseSBzZWVuIG1vZGUuXG4gKlxuICogVGhpcyBpcyBhIFttZWFzdXJlIG9mIGNlbnRyYWwgdGVuZGVuY3ldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NlbnRyYWxfdGVuZGVuY3kpOlxuICogYSBtZXRob2Qgb2YgZmluZGluZyBhIHR5cGljYWwgb3IgY2VudHJhbCB2YWx1ZSBvZiBhIHNldCBvZiBudW1iZXJzLlxuICpcbiAqIFRoaXMgcnVucyBpbiBgTyhuKWAgYmVjYXVzZSB0aGUgaW5wdXQgaXMgc29ydGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc29ydGVkIGEgc2FtcGxlIG9mIG9uZSBvciBtb3JlIGRhdGEgcG9pbnRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBtb2RlXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgc29ydGVkIGlzIGVtcHR5XG4gKiBAZXhhbXBsZVxuICogbW9kZVNvcnRlZChbMCwgMCwgMV0pOyAvLyA9PiAwXG4gKi9cbmZ1bmN0aW9uIG1vZGVTb3J0ZWQoc29ydGVkIC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcblxuICAgIC8vIEhhbmRsZSBlZGdlIGNhc2VzOlxuICAgIC8vIFRoZSBtb2RlIG9mIGFuIGVtcHR5IGxpc3QgaXMgdW5kZWZpbmVkXG4gICAgaWYgKHNvcnRlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtb2RlIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBkYXRhIHBvaW50Jyk7XG4gICAgfSBlbHNlIGlmIChzb3J0ZWQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzb3J0ZWRbMF07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBhc3N1bWVzIGl0IGlzIGRlYWxpbmcgd2l0aCBhbiBhcnJheSBvZiBzaXplID4gMSwgc2luY2Ugc2l6ZVxuICAgIC8vIDAgYW5kIDEgYXJlIGhhbmRsZWQgaW1tZWRpYXRlbHkuIEhlbmNlIGl0IHN0YXJ0cyBhdCBpbmRleCAxIGluIHRoZVxuICAgIC8vIGFycmF5LlxuICAgIHZhciBsYXN0ID0gc29ydGVkWzBdLFxuICAgICAgICAvLyBzdG9yZSB0aGUgbW9kZSBhcyB3ZSBmaW5kIG5ldyBtb2Rlc1xuICAgICAgICB2YWx1ZSA9IE5hTixcbiAgICAgICAgLy8gc3RvcmUgaG93IG1hbnkgdGltZXMgd2UndmUgc2VlbiB0aGUgbW9kZVxuICAgICAgICBtYXhTZWVuID0gMCxcbiAgICAgICAgLy8gaG93IG1hbnkgdGltZXMgdGhlIGN1cnJlbnQgY2FuZGlkYXRlIGZvciB0aGUgbW9kZVxuICAgICAgICAvLyBoYXMgYmVlbiBzZWVuXG4gICAgICAgIHNlZW5UaGlzID0gMTtcblxuICAgIC8vIGVuZCBhdCBzb3J0ZWQubGVuZ3RoICsgMSB0byBmaXggdGhlIGNhc2UgaW4gd2hpY2ggdGhlIG1vZGUgaXNcbiAgICAvLyB0aGUgaGlnaGVzdCBudW1iZXIgdGhhdCBvY2N1cnMgaW4gdGhlIHNlcXVlbmNlLiB0aGUgbGFzdCBpdGVyYXRpb25cbiAgICAvLyBjb21wYXJlcyBzb3J0ZWRbaV0sIHdoaWNoIGlzIHVuZGVmaW5lZCwgdG8gdGhlIGhpZ2hlc3QgbnVtYmVyXG4gICAgLy8gaW4gdGhlIHNlcmllc1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc29ydGVkLmxlbmd0aCArIDE7IGkrKykge1xuICAgICAgICAvLyB3ZSdyZSBzZWVpbmcgYSBuZXcgbnVtYmVyIHBhc3MgYnlcbiAgICAgICAgaWYgKHNvcnRlZFtpXSAhPT0gbGFzdCkge1xuICAgICAgICAgICAgLy8gdGhlIGxhc3QgbnVtYmVyIGlzIHRoZSBuZXcgbW9kZSBzaW5jZSB3ZSBzYXcgaXQgbW9yZVxuICAgICAgICAgICAgLy8gb2Z0ZW4gdGhhbiB0aGUgb2xkIG9uZVxuICAgICAgICAgICAgaWYgKHNlZW5UaGlzID4gbWF4U2Vlbikge1xuICAgICAgICAgICAgICAgIG1heFNlZW4gPSBzZWVuVGhpcztcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWVuVGhpcyA9IDE7XG4gICAgICAgICAgICBsYXN0ID0gc29ydGVkW2ldO1xuICAgICAgICAvLyBpZiB0aGlzIGlzbid0IGEgbmV3IG51bWJlciwgaXQncyBvbmUgbW9yZSBvY2N1cnJlbmNlIG9mXG4gICAgICAgIC8vIHRoZSBwb3RlbnRpYWwgbW9kZVxuICAgICAgICB9IGVsc2UgeyBzZWVuVGhpcysrOyB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBTb3J0IGFuIGFycmF5IG9mIG51bWJlcnMgYnkgdGhlaXIgbnVtZXJpYyB2YWx1ZSwgZW5zdXJpbmcgdGhhdCB0aGVcbiAqIGFycmF5IGlzIG5vdCBjaGFuZ2VkIGluIHBsYWNlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgLnNvcnRcbiAqIGluIEphdmFTY3JpcHQgaXMgdG8gc29ydCBhcnJheXMgYXMgc3RyaW5nIHZhbHVlc1xuICpcbiAqICAgICBbMSwgMTAsIDEyLCAxMDIsIDIwXS5zb3J0KClcbiAqICAgICAvLyBvdXRwdXRcbiAqICAgICBbMSwgMTAsIDEwMiwgMTIsIDIwXVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dCBhcnJheVxuICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gc29ydGVkIGFycmF5XG4gKiBAcHJpdmF0ZVxuICogQGV4YW1wbGVcbiAqIG51bWVyaWNTb3J0KFszLCAyLCAxXSkgLy8gPT4gWzEsIDIsIDNdXG4gKi9cbmZ1bmN0aW9uIG51bWVyaWNTb3J0KHggLyo6IEFycmF5PG51bWJlcj4gKi8pIC8qOiBBcnJheTxudW1iZXI+ICovIHtcbiAgICByZXR1cm4geFxuICAgICAgICAvLyBlbnN1cmUgdGhlIGFycmF5IGlzIG5vdCBjaGFuZ2VkIGluLXBsYWNlXG4gICAgICAgIC5zbGljZSgpXG4gICAgICAgIC8vIGNvbXBhcmF0b3IgZnVuY3Rpb24gdGhhdCB0cmVhdHMgaW5wdXQgYXMgbnVtZXJpY1xuICAgICAgICAuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgIH0pO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBbbW9kZV0oaHR0cDovL2JpdC5seS9XNUs0WXQpIGlzIHRoZSBudW1iZXIgdGhhdCBhcHBlYXJzIGluIGEgbGlzdCB0aGUgaGlnaGVzdCBudW1iZXIgb2YgdGltZXMuXG4gKiBUaGVyZSBjYW4gYmUgbXVsdGlwbGUgbW9kZXMgaW4gYSBsaXN0OiBpbiB0aGUgZXZlbnQgb2YgYSB0aWUsIHRoaXNcbiAqIGFsZ29yaXRobSB3aWxsIHJldHVybiB0aGUgbW9zdCByZWNlbnRseSBzZWVuIG1vZGUuXG4gKlxuICogVGhpcyBpcyBhIFttZWFzdXJlIG9mIGNlbnRyYWwgdGVuZGVuY3ldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NlbnRyYWxfdGVuZGVuY3kpOlxuICogYSBtZXRob2Qgb2YgZmluZGluZyBhIHR5cGljYWwgb3IgY2VudHJhbCB2YWx1ZSBvZiBhIHNldCBvZiBudW1iZXJzLlxuICpcbiAqIFRoaXMgcnVucyBvbiBgTyhubG9nKG4pKWAgYmVjYXVzZSBpdCBuZWVkcyB0byBzb3J0IHRoZSBhcnJheSBpbnRlcm5hbGx5XG4gKiBiZWZvcmUgcnVubmluZyBhbiBgTyhuKWAgc2VhcmNoIHRvIGZpbmQgdGhlIG1vZGUuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBtb2RlXG4gKiBAZXhhbXBsZVxuICogbW9kZShbMCwgMCwgMV0pOyAvLyA9PiAwXG4gKi9cbmZ1bmN0aW9uIG1vZGUoeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgLy8gU29ydGluZyB0aGUgYXJyYXkgbGV0cyB1cyBpdGVyYXRlIHRocm91Z2ggaXQgYmVsb3cgYW5kIGJlIHN1cmVcbiAgICAvLyB0aGF0IGV2ZXJ5IHRpbWUgd2Ugc2VlIGEgbmV3IG51bWJlciBpdCdzIG5ldyBhbmQgd2UnbGwgbmV2ZXJcbiAgICAvLyBzZWUgdGhlIHNhbWUgbnVtYmVyIHR3aWNlXG4gICAgcmV0dXJuIG1vZGVTb3J0ZWQobnVtZXJpY1NvcnQoeCkpO1xufVxuXG4vKiBAZmxvdyAqL1xuLyogZ2xvYmFscyBNYXA6IGZhbHNlICovXG5cbi8qKlxuICogVGhlIFttb2RlXShodHRwOi8vYml0Lmx5L1c1SzRZdCkgaXMgdGhlIG51bWJlciB0aGF0IGFwcGVhcnMgaW4gYSBsaXN0IHRoZSBoaWdoZXN0IG51bWJlciBvZiB0aW1lcy5cbiAqIFRoZXJlIGNhbiBiZSBtdWx0aXBsZSBtb2RlcyBpbiBhIGxpc3Q6IGluIHRoZSBldmVudCBvZiBhIHRpZSwgdGhpc1xuICogYWxnb3JpdGhtIHdpbGwgcmV0dXJuIHRoZSBtb3N0IHJlY2VudGx5IHNlZW4gbW9kZS5cbiAqXG4gKiBtb2RlRmFzdCB1c2VzIGEgTWFwIG9iamVjdCB0byBrZWVwIHRyYWNrIG9mIHRoZSBtb2RlLCBpbnN0ZWFkIG9mIHRoZSBhcHByb2FjaFxuICogdXNlZCB3aXRoIGBtb2RlYCwgYSBzb3J0ZWQgYXJyYXkuIEFzIGEgcmVzdWx0LCBpdCBpcyBmYXN0ZXJcbiAqIHRoYW4gYG1vZGVgIGFuZCBzdXBwb3J0cyBhbnkgZGF0YSB0eXBlIHRoYXQgY2FuIGJlIGNvbXBhcmVkIHdpdGggYD09YC5cbiAqIEl0IGFsc28gcmVxdWlyZXMgYVxuICogW0phdmFTY3JpcHQgZW52aXJvbm1lbnQgd2l0aCBzdXBwb3J0IGZvciBNYXBdKGh0dHBzOi8va2FuZ2F4LmdpdGh1Yi5pby9jb21wYXQtdGFibGUvZXM2LyN0ZXN0LU1hcCksXG4gKiBhbmQgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiBNYXAgaXMgbm90IGF2YWlsYWJsZS5cbiAqXG4gKiBUaGlzIGlzIGEgW21lYXN1cmUgb2YgY2VudHJhbCB0ZW5kZW5jeV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2VudHJhbF90ZW5kZW5jeSk6XG4gKiBhIG1ldGhvZCBvZiBmaW5kaW5nIGEgdHlwaWNhbCBvciBjZW50cmFsIHZhbHVlIG9mIGEgc2V0IG9mIG51bWJlcnMuXG4gKlxuICogQHBhcmFtIHtBcnJheTwqPn0geCBhIHNhbXBsZSBvZiBvbmUgb3IgbW9yZSBkYXRhIHBvaW50c1xuICogQHJldHVybnMgez8qfSBtb2RlXG4gKiBAdGhyb3dzIHtSZWZlcmVuY2VFcnJvcn0gaWYgdGhlIEphdmFTY3JpcHQgZW52aXJvbm1lbnQgZG9lc24ndCBzdXBwb3J0IE1hcFxuICogQHRocm93cyB7RXJyb3J9IGlmIHggaXMgZW1wdHlcbiAqIEBleGFtcGxlXG4gKiBtb2RlRmFzdChbJ3JhYmJpdHMnLCAncmFiYml0cycsICdzcXVpcnJlbHMnXSk7IC8vID0+ICdyYWJiaXRzJ1xuICovXG5mdW5jdGlvbiBtb2RlRmFzdC8qOjo8VD4qLyh4IC8qOiBBcnJheTxUPiAqLykvKjogP1QgKi8ge1xuXG4gICAgLy8gVGhpcyBpbmRleCB3aWxsIHJlZmxlY3QgdGhlIGluY2lkZW5jZSBvZiBkaWZmZXJlbnQgdmFsdWVzLCBpbmRleGluZ1xuICAgIC8vIHRoZW0gbGlrZVxuICAgIC8vIHsgdmFsdWU6IGNvdW50IH1cbiAgICB2YXIgaW5kZXggPSBuZXcgTWFwKCk7XG5cbiAgICAvLyBBIHJ1bm5pbmcgYG1vZGVgIGFuZCB0aGUgbnVtYmVyIG9mIHRpbWVzIGl0IGhhcyBiZWVuIGVuY291bnRlcmVkLlxuICAgIHZhciBtb2RlO1xuICAgIHZhciBtb2RlQ291bnQgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDb3VudCA9IGluZGV4LmdldCh4W2ldKTtcbiAgICAgICAgaWYgKG5ld0NvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld0NvdW50ID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0NvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0NvdW50ID4gbW9kZUNvdW50KSB7XG4gICAgICAgICAgICBtb2RlID0geFtpXTtcbiAgICAgICAgICAgIG1vZGVDb3VudCA9IG5ld0NvdW50O1xuICAgICAgICB9XG4gICAgICAgIGluZGV4LnNldCh4W2ldLCBuZXdDb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKG1vZGVDb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21vZGUgcmVxdWlyZXMgYXQgbGFzdCBvbmUgZGF0YSBwb2ludCcpO1xuICAgIH1cblxuICAgIHJldHVybiBtb2RlO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBtaW4gaXMgdGhlIGxvd2VzdCBudW1iZXIgaW4gdGhlIGFycmF5LiBUaGlzIHJ1bnMgb24gYE8obilgLCBsaW5lYXIgdGltZSBpbiByZXNwZWN0IHRvIHRoZSBhcnJheVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBzYW1wbGUgb2Ygb25lIG9yIG1vcmUgZGF0YSBwb2ludHNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgdGhlIGxlbmd0aCBvZiB4IGlzIGxlc3MgdGhhbiBvbmVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IG1pbmltdW0gdmFsdWVcbiAqIEBleGFtcGxlXG4gKiBtaW4oWzEsIDUsIC0xMCwgMTAwLCAyXSk7IC8vID0+IC0xMFxuICovXG5mdW5jdGlvbiBtaW4oeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG5cbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtaW4gcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGRhdGEgcG9pbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB4WzBdO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBPbiB0aGUgZmlyc3QgaXRlcmF0aW9uIG9mIHRoaXMgbG9vcCwgbWluIGlzXG4gICAgICAgIC8vIHVuZGVmaW5lZCBhbmQgaXMgdGh1cyBtYWRlIHRoZSBtaW5pbXVtIGVsZW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICAgIGlmICh4W2ldIDwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlID0geFtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhpcyBjb21wdXRlcyB0aGUgbWF4aW11bSBudW1iZXIgaW4gYW4gYXJyYXkuXG4gKlxuICogVGhpcyBydW5zIG9uIGBPKG4pYCwgbGluZWFyIHRpbWUgaW4gcmVzcGVjdCB0byB0aGUgYXJyYXlcbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggc2FtcGxlIG9mIG9uZSBvciBtb3JlIGRhdGEgcG9pbnRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBtYXhpbXVtIHZhbHVlXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIHRoZSBsZW5ndGggb2YgeCBpcyBsZXNzIHRoYW4gb25lXG4gKiBAZXhhbXBsZVxuICogbWF4KFsxLCAyLCAzLCA0XSk7XG4gKiAvLyA9PiA0XG4gKi9cbmZ1bmN0aW9uIG1heCh4IC8qOiBBcnJheTxudW1iZXI+ICovKSAvKjpudW1iZXIqLyB7XG5cbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXggcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGRhdGEgcG9pbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB4WzBdO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBPbiB0aGUgZmlyc3QgaXRlcmF0aW9uIG9mIHRoaXMgbG9vcCwgbWF4IGlzXG4gICAgICAgIC8vIHVuZGVmaW5lZCBhbmQgaXMgdGh1cyBtYWRlIHRoZSBtYXhpbXVtIGVsZW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICAgIGlmICh4W2ldID4gdmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlID0geFtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhpcyBjb21wdXRlcyB0aGUgbWluaW11bSAmIG1heGltdW0gbnVtYmVyIGluIGFuIGFycmF5LlxuICpcbiAqIFRoaXMgcnVucyBvbiBgTyhuKWAsIGxpbmVhciB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIGFycmF5XG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IHNhbXBsZSBvZiBvbmUgb3IgbW9yZSBkYXRhIHBvaW50c1xuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IG1pbmltdW0gJiBtYXhpbXVtIHZhbHVlXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIHRoZSBsZW5ndGggb2YgeCBpcyBsZXNzIHRoYW4gb25lXG4gKiBAZXhhbXBsZVxuICogZXh0ZW50KFsxLCAyLCAzLCA0XSk7XG4gKiAvLyA9PiBbMSwgNF1cbiAqL1xuZnVuY3Rpb24gZXh0ZW50KHggLyo6IEFycmF5PG51bWJlcj4gKi8pIC8qOkFycmF5PG51bWJlcj4qLyB7XG5cbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHRlbnQgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGRhdGEgcG9pbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgbWluID0geFswXTtcbiAgICB2YXIgbWF4ID0geFswXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHhbaV0gPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHhbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHhbaV0gPCBtaW4pIHtcbiAgICAgICAgICAgIG1pbiA9IHhbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFttaW4sIG1heF07XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIG1pbmltdW0gaXMgdGhlIGxvd2VzdCBudW1iZXIgaW4gdGhlIGFycmF5LiBXaXRoIGEgc29ydGVkIGFycmF5LFxuICogdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGFycmF5IGlzIGFsd2F5cyB0aGUgc21hbGxlc3QsIHNvIHRoaXMgY2FsY3VsYXRpb25cbiAqIGNhbiBiZSBkb25lIGluIG9uZSBzdGVwLCBvciBjb25zdGFudCB0aW1lLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gbWluaW11bSB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIG1pblNvcnRlZChbLTEwMCwgLTEwLCAxLCAyLCA1XSk7IC8vID0+IC0xMDBcbiAqL1xuZnVuY3Rpb24gbWluU29ydGVkKHggLyo6IEFycmF5PG51bWJlcj4gKi8pLyo6IG51bWJlciAqLyB7XG4gICAgcmV0dXJuIHhbMF07XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIG1heGltdW0gaXMgdGhlIGhpZ2hlc3QgbnVtYmVyIGluIHRoZSBhcnJheS4gV2l0aCBhIHNvcnRlZCBhcnJheSxcbiAqIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIGFycmF5IGlzIGFsd2F5cyB0aGUgbGFyZ2VzdCwgc28gdGhpcyBjYWxjdWxhdGlvblxuICogY2FuIGJlIGRvbmUgaW4gb25lIHN0ZXAsIG9yIGNvbnN0YW50IHRpbWUuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBtYXhpbXVtIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogbWF4U29ydGVkKFstMTAwLCAtMTAsIDEsIDIsIDVdKTsgLy8gPT4gNVxuICovXG5mdW5jdGlvbiBtYXhTb3J0ZWQoeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgcmV0dXJuIHhbeC5sZW5ndGggLSAxXTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgZXh0ZW50IGlzIHRoZSBsb3dlc3QgJiBoaWdoZXN0IG51bWJlciBpbiB0aGUgYXJyYXkuIFdpdGggYSBzb3J0ZWQgYXJyYXksXG4gKiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkgaXMgYWx3YXlzIHRoZSBsb3dlc3Qgd2hpbGUgdGhlIGxhc3QgZWxlbWVudCBpcyBhbHdheXMgdGhlIGxhcmdlc3QsIHNvIHRoaXMgY2FsY3VsYXRpb25cbiAqIGNhbiBiZSBkb25lIGluIG9uZSBzdGVwLCBvciBjb25zdGFudCB0aW1lLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IG1pbmltdW0gJiBtYXhpbXVtIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogZXh0ZW50U29ydGVkKFstMTAwLCAtMTAsIDEsIDIsIDVdKTsgLy8gPT4gWy0xMDAsIDVdXG4gKi9cbmZ1bmN0aW9uIGV4dGVudFNvcnRlZCh4IC8qOiBBcnJheTxudW1iZXI+ICovKS8qOkFycmF5PG51bWJlcj4qLyB7XG4gICAgcmV0dXJuIFt4WzBdLCB4W3gubGVuZ3RoIC0gMV1dO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBzaW1wbGUgW3N1bV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3VtbWF0aW9uKSBvZiBhbiBhcnJheVxuICogaXMgdGhlIHJlc3VsdCBvZiBhZGRpbmcgYWxsIG51bWJlcnMgdG9nZXRoZXIsIHN0YXJ0aW5nIGZyb20gemVyby5cbiAqXG4gKiBUaGlzIHJ1bnMgb24gYE8obilgLCBsaW5lYXIgdGltZSBpbiByZXNwZWN0IHRvIHRoZSBhcnJheVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybiB7bnVtYmVyfSBzdW0gb2YgYWxsIGlucHV0IG51bWJlcnNcbiAqIEBleGFtcGxlXG4gKiBzdW1TaW1wbGUoWzEsIDIsIDNdKTsgLy8gPT4gNlxuICovXG5mdW5jdGlvbiBzdW1TaW1wbGUoeC8qOiBBcnJheTxudW1iZXI+ICovKS8qOiBudW1iZXIgKi8ge1xuICAgIHZhciB2YWx1ZSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlICs9IHhbaV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW3Byb2R1Y3RdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Byb2R1Y3RfKG1hdGhlbWF0aWNzKSkgb2YgYW4gYXJyYXlcbiAqIGlzIHRoZSByZXN1bHQgb2YgbXVsdGlwbHlpbmcgYWxsIG51bWJlcnMgdG9nZXRoZXIsIHN0YXJ0aW5nIHVzaW5nIG9uZSBhcyB0aGUgbXVsdGlwbGljYXRpdmUgaWRlbnRpdHkuXG4gKlxuICogVGhpcyBydW5zIG9uIGBPKG4pYCwgbGluZWFyIHRpbWUgaW4gcmVzcGVjdCB0byB0aGUgYXJyYXlcbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggaW5wdXRcbiAqIEByZXR1cm4ge251bWJlcn0gcHJvZHVjdCBvZiBhbGwgaW5wdXQgbnVtYmVyc1xuICogQGV4YW1wbGVcbiAqIHByb2R1Y3QoWzEsIDIsIDMsIDRdKTsgLy8gPT4gMjRcbiAqL1xuZnVuY3Rpb24gcHJvZHVjdCh4Lyo6IEFycmF5PG51bWJlcj4gKi8pLyo6IG51bWJlciAqLyB7XG4gICAgdmFyIHZhbHVlID0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgKj0geFtpXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIHF1YW50aWxlczogd2hlbiB5b3Uga25vd1xuICogdGhhdCB0aGUgb3JkZXIgaXMgc29ydGVkLCB5b3UgZG9uJ3QgbmVlZCB0byByZS1zb3J0IGl0LCBhbmQgdGhlIGNvbXB1dGF0aW9uc1xuICogYXJlIGZhc3Rlci5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggc2FtcGxlIG9mIG9uZSBvciBtb3JlIGRhdGEgcG9pbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gcCBkZXNpcmVkIHF1YW50aWxlOiBhIG51bWJlciBiZXR3ZWVuIDAgdG8gMSwgaW5jbHVzaXZlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBxdWFudGlsZSB2YWx1ZVxuICogQHRocm93cyB7RXJyb3J9IGlmIHAgaXggb3V0c2lkZSBvZiB0aGUgcmFuZ2UgZnJvbSAwIHRvIDFcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB4IGlzIGVtcHR5XG4gKiBAZXhhbXBsZVxuICogcXVhbnRpbGVTb3J0ZWQoWzMsIDYsIDcsIDgsIDgsIDksIDEwLCAxMywgMTUsIDE2LCAyMF0sIDAuNSk7IC8vID0+IDlcbiAqL1xuZnVuY3Rpb24gcXVhbnRpbGVTb3J0ZWQoeCAvKjogQXJyYXk8bnVtYmVyPiAqLywgcCAvKjogbnVtYmVyICovKS8qOiBudW1iZXIgKi8ge1xuICAgIHZhciBpZHggPSB4Lmxlbmd0aCAqIHA7XG4gICAgaWYgKHgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncXVhbnRpbGUgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGRhdGEgcG9pbnQuJyk7XG4gICAgfSBlbHNlIGlmIChwIDwgMCB8fCBwID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3F1YW50aWxlcyBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMScpO1xuICAgIH0gZWxzZSBpZiAocCA9PT0gMSkge1xuICAgICAgICAvLyBJZiBwIGlzIDEsIGRpcmVjdGx5IHJldHVybiB0aGUgbGFzdCBlbGVtZW50XG4gICAgICAgIHJldHVybiB4W3gubGVuZ3RoIC0gMV07XG4gICAgfSBlbHNlIGlmIChwID09PSAwKSB7XG4gICAgICAgIC8vIElmIHAgaXMgMCwgZGlyZWN0bHkgcmV0dXJuIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICAgIHJldHVybiB4WzBdO1xuICAgIH0gZWxzZSBpZiAoaWR4ICUgMSAhPT0gMCkge1xuICAgICAgICAvLyBJZiBwIGlzIG5vdCBpbnRlZ2VyLCByZXR1cm4gdGhlIG5leHQgZWxlbWVudCBpbiBhcnJheVxuICAgICAgICByZXR1cm4geFtNYXRoLmNlaWwoaWR4KSAtIDFdO1xuICAgIH0gZWxzZSBpZiAoeC5sZW5ndGggJSAyID09PSAwKSB7XG4gICAgICAgIC8vIElmIHRoZSBsaXN0IGhhcyBldmVuLWxlbmd0aCwgd2UnbGwgdGFrZSB0aGUgYXZlcmFnZSBvZiB0aGlzIG51bWJlclxuICAgICAgICAvLyBhbmQgdGhlIG5leHQgdmFsdWUsIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgICByZXR1cm4gKHhbaWR4IC0gMV0gKyB4W2lkeF0pIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGaW5hbGx5LCBpbiB0aGUgc2ltcGxlIGNhc2Ugb2YgYW4gaW50ZWdlciB2YWx1ZVxuICAgICAgICAvLyB3aXRoIGFuIG9kZC1sZW5ndGggbGlzdCwgcmV0dXJuIHRoZSB4IHZhbHVlIGF0IHRoZSBpbmRleC5cbiAgICAgICAgcmV0dXJuIHhbaWR4XTtcbiAgICB9XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogUmVhcnJhbmdlIGl0ZW1zIGluIGBhcnJgIHNvIHRoYXQgYWxsIGl0ZW1zIGluIGBbbGVmdCwga11gIHJhbmdlIGFyZSB0aGUgc21hbGxlc3QuXG4gKiBUaGUgYGtgLXRoIGVsZW1lbnQgd2lsbCBoYXZlIHRoZSBgKGsgLSBsZWZ0ICsgMSlgLXRoIHNtYWxsZXN0IHZhbHVlIGluIGBbbGVmdCwgcmlnaHRdYC5cbiAqXG4gKiBJbXBsZW1lbnRzIEZsb3lkLVJpdmVzdCBzZWxlY3Rpb24gYWxnb3JpdGhtIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zsb3lkLVJpdmVzdF9hbGdvcml0aG1cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGFyciBpbnB1dCBhcnJheVxuICogQHBhcmFtIHtudW1iZXJ9IGsgcGl2b3QgaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVmdF0gbGVmdCBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IFtyaWdodF0gcmlnaHQgaW5kZXhcbiAqIEByZXR1cm5zIHt2b2lkfSBtdXRhdGVzIGlucHV0IGFycmF5XG4gKiBAZXhhbXBsZVxuICogdmFyIGFyciA9IFs2NSwgMjgsIDU5LCAzMywgMjEsIDU2LCAyMiwgOTUsIDUwLCAxMiwgOTAsIDUzLCAyOCwgNzcsIDM5XTtcbiAqIHF1aWNrc2VsZWN0KGFyciwgOCk7XG4gKiAvLyA9IFszOSwgMjgsIDI4LCAzMywgMjEsIDEyLCAyMiwgNTAsIDUzLCA1NiwgNTksIDY1LCA5MCwgNzcsIDk1XVxuICovXG5mdW5jdGlvbiBxdWlja3NlbGVjdChhcnIvKjogQXJyYXk8bnVtYmVyPiAqLywgay8qOiBudW1iZXIgKi8sIGxlZnQvKjogP251bWJlciAqLywgcmlnaHQvKjogP251bWJlciAqLykvKjogdm9pZCAqLyB7XG4gICAgbGVmdCA9IGxlZnQgfHwgMDtcbiAgICByaWdodCA9IHJpZ2h0IHx8IChhcnIubGVuZ3RoIC0gMSk7XG5cbiAgICB3aGlsZSAocmlnaHQgPiBsZWZ0KSB7XG4gICAgICAgIC8vIDYwMCBhbmQgMC41IGFyZSBhcmJpdHJhcnkgY29uc3RhbnRzIGNob3NlbiBpbiB0aGUgb3JpZ2luYWwgcGFwZXIgdG8gbWluaW1pemUgZXhlY3V0aW9uIHRpbWVcbiAgICAgICAgaWYgKHJpZ2h0IC0gbGVmdCA+IDYwMCkge1xuICAgICAgICAgICAgdmFyIG4gPSByaWdodCAtIGxlZnQgKyAxO1xuICAgICAgICAgICAgdmFyIG0gPSBrIC0gbGVmdCArIDE7XG4gICAgICAgICAgICB2YXIgeiA9IE1hdGgubG9nKG4pO1xuICAgICAgICAgICAgdmFyIHMgPSAwLjUgKiBNYXRoLmV4cCgyICogeiAvIDMpO1xuICAgICAgICAgICAgdmFyIHNkID0gMC41ICogTWF0aC5zcXJ0KHogKiBzICogKG4gLSBzKSAvIG4pO1xuICAgICAgICAgICAgaWYgKG0gLSBuIC8gMiA8IDApIHNkICo9IC0xO1xuICAgICAgICAgICAgdmFyIG5ld0xlZnQgPSBNYXRoLm1heChsZWZ0LCBNYXRoLmZsb29yKGsgLSBtICogcyAvIG4gKyBzZCkpO1xuICAgICAgICAgICAgdmFyIG5ld1JpZ2h0ID0gTWF0aC5taW4ocmlnaHQsIE1hdGguZmxvb3IoayArIChuIC0gbSkgKiBzIC8gbiArIHNkKSk7XG4gICAgICAgICAgICBxdWlja3NlbGVjdChhcnIsIGssIG5ld0xlZnQsIG5ld1JpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ID0gYXJyW2tdO1xuICAgICAgICB2YXIgaSA9IGxlZnQ7XG4gICAgICAgIHZhciBqID0gcmlnaHQ7XG5cbiAgICAgICAgc3dhcChhcnIsIGxlZnQsIGspO1xuICAgICAgICBpZiAoYXJyW3JpZ2h0XSA+IHQpIHN3YXAoYXJyLCBsZWZ0LCByaWdodCk7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBqKSB7XG4gICAgICAgICAgICBzd2FwKGFyciwgaSwgaik7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB3aGlsZSAoYXJyW2ldIDwgdCkgaSsrO1xuICAgICAgICAgICAgd2hpbGUgKGFycltqXSA+IHQpIGotLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcnJbbGVmdF0gPT09IHQpIHN3YXAoYXJyLCBsZWZ0LCBqKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgICAgICBzd2FwKGFyciwgaiwgcmlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGogPD0gaykgbGVmdCA9IGogKyAxO1xuICAgICAgICBpZiAoayA8PSBqKSByaWdodCA9IGogLSAxO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3dhcChhcnIsIGksIGopIHtcbiAgICB2YXIgdG1wID0gYXJyW2ldO1xuICAgIGFycltpXSA9IGFycltqXTtcbiAgICBhcnJbal0gPSB0bXA7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFtxdWFudGlsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUXVhbnRpbGUpOlxuICogdGhpcyBpcyBhIHBvcHVsYXRpb24gcXVhbnRpbGUsIHNpbmNlIHdlIGFzc3VtZSB0byBrbm93IHRoZSBlbnRpcmVcbiAqIGRhdGFzZXQgaW4gdGhpcyBsaWJyYXJ5LiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICogW1F1YW50aWxlcyBvZiBhIFBvcHVsYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUXVhbnRpbGUjUXVhbnRpbGVzX29mX2FfcG9wdWxhdGlvbilcbiAqIGFsZ29yaXRobSBmcm9tIHdpa2lwZWRpYS5cbiAqXG4gKiBTYW1wbGUgaXMgYSBvbmUtZGltZW5zaW9uYWwgYXJyYXkgb2YgbnVtYmVycyxcbiAqIGFuZCBwIGlzIGVpdGhlciBhIGRlY2ltYWwgbnVtYmVyIGZyb20gMCB0byAxIG9yIGFuIGFycmF5IG9mIGRlY2ltYWxcbiAqIG51bWJlcnMgZnJvbSAwIHRvIDEuXG4gKiBJbiB0ZXJtcyBvZiBhIGsvcSBxdWFudGlsZSwgcCA9IGsvcSAtIGl0J3MganVzdCBkZWFsaW5nIHdpdGggZnJhY3Rpb25zIG9yIGRlYWxpbmdcbiAqIHdpdGggZGVjaW1hbCB2YWx1ZXMuXG4gKiBXaGVuIHAgaXMgYW4gYXJyYXksIHRoZSByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uIGlzIGFsc28gYW4gYXJyYXkgY29udGFpbmluZyB0aGUgYXBwcm9wcmlhdGVcbiAqIHF1YW50aWxlcyBpbiBpbnB1dCBvcmRlclxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBzYW1wbGUgb2Ygb25lIG9yIG1vcmUgbnVtYmVyc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+IHwgbnVtYmVyfSBwIHRoZSBkZXNpcmVkIHF1YW50aWxlLCBhcyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHF1YW50aWxlXG4gKiBAZXhhbXBsZVxuICogcXVhbnRpbGUoWzMsIDYsIDcsIDgsIDgsIDksIDEwLCAxMywgMTUsIDE2LCAyMF0sIDAuNSk7IC8vID0+IDlcbiAqL1xuZnVuY3Rpb24gcXVhbnRpbGUoeC8qOiBBcnJheTxudW1iZXI+ICovLCBwLyo6IEFycmF5PG51bWJlcj4gfCBudW1iZXIgKi8pLyo6IEFycmF5PG51bWJlcj4gfCBudW1iZXIgKi8ge1xuICAgIHZhciBjb3B5ID0geC5zbGljZSgpO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocCkpIHtcbiAgICAgICAgLy8gcmVhcnJhbmdlIGVsZW1lbnRzIHNvIHRoYXQgZWFjaCBlbGVtZW50IGNvcnJlc3BvbmRpbmcgdG8gYSByZXF1ZXN0ZWRcbiAgICAgICAgLy8gcXVhbnRpbGUgaXMgb24gYSBwbGFjZSBpdCB3b3VsZCBiZSBpZiB0aGUgYXJyYXkgd2FzIGZ1bGx5IHNvcnRlZFxuICAgICAgICBtdWx0aVF1YW50aWxlU2VsZWN0KGNvcHksIHApO1xuICAgICAgICAvLyBJbml0aWFsaXplIHRoZSByZXN1bHQgYXJyYXlcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgLy8gRm9yIGVhY2ggcmVxdWVzdGVkIHF1YW50aWxlXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0c1tpXSA9IHF1YW50aWxlU29ydGVkKGNvcHksIHBbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpZHggPSBxdWFudGlsZUluZGV4KGNvcHkubGVuZ3RoLCBwKTtcbiAgICAgICAgcXVhbnRpbGVTZWxlY3QoY29weSwgaWR4LCAwLCBjb3B5Lmxlbmd0aCAtIDEpO1xuICAgICAgICByZXR1cm4gcXVhbnRpbGVTb3J0ZWQoY29weSwgcCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBxdWFudGlsZVNlbGVjdChhcnIsIGssIGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGsgJSAxID09PSAwKSB7XG4gICAgICAgIHF1aWNrc2VsZWN0KGFyciwgaywgbGVmdCwgcmlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGsgPSBNYXRoLmZsb29yKGspO1xuICAgICAgICBxdWlja3NlbGVjdChhcnIsIGssIGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgcXVpY2tzZWxlY3QoYXJyLCBrICsgMSwgayArIDEsIHJpZ2h0KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG11bHRpUXVhbnRpbGVTZWxlY3QoYXJyLCBwKSB7XG4gICAgdmFyIGluZGljZXMgPSBbMF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluZGljZXMucHVzaChxdWFudGlsZUluZGV4KGFyci5sZW5ndGgsIHBbaV0pKTtcbiAgICB9XG4gICAgaW5kaWNlcy5wdXNoKGFyci5sZW5ndGggLSAxKTtcbiAgICBpbmRpY2VzLnNvcnQoY29tcGFyZSk7XG5cbiAgICB2YXIgc3RhY2sgPSBbMCwgaW5kaWNlcy5sZW5ndGggLSAxXTtcblxuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLmNlaWwoc3RhY2sucG9wKCkpO1xuICAgICAgICB2YXIgbCA9IE1hdGguZmxvb3Ioc3RhY2sucG9wKCkpO1xuICAgICAgICBpZiAociAtIGwgPD0gMSkgY29udGludWU7XG5cbiAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKChsICsgcikgLyAyKTtcbiAgICAgICAgcXVhbnRpbGVTZWxlY3QoYXJyLCBpbmRpY2VzW21dLCBpbmRpY2VzW2xdLCBpbmRpY2VzW3JdKTtcblxuICAgICAgICBzdGFjay5wdXNoKGwsIG0sIG0sIHIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xufVxuXG5mdW5jdGlvbiBxdWFudGlsZUluZGV4KGxlbiAvKjogbnVtYmVyICovLCBwIC8qOiBudW1iZXIgKi8pLyo6bnVtYmVyKi8ge1xuICAgIHZhciBpZHggPSBsZW4gKiBwO1xuICAgIGlmIChwID09PSAxKSB7XG4gICAgICAgIC8vIElmIHAgaXMgMSwgZGlyZWN0bHkgcmV0dXJuIHRoZSBsYXN0IGluZGV4XG4gICAgICAgIHJldHVybiBsZW4gLSAxO1xuICAgIH0gZWxzZSBpZiAocCA9PT0gMCkge1xuICAgICAgICAvLyBJZiBwIGlzIDAsIGRpcmVjdGx5IHJldHVybiB0aGUgZmlyc3QgaW5kZXhcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmIChpZHggJSAxICE9PSAwKSB7XG4gICAgICAgIC8vIElmIGluZGV4IGlzIG5vdCBpbnRlZ2VyLCByZXR1cm4gdGhlIG5leHQgaW5kZXggaW4gYXJyYXlcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChpZHgpIC0gMTtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDIgPT09IDApIHtcbiAgICAgICAgLy8gSWYgdGhlIGxpc3QgaGFzIGV2ZW4tbGVuZ3RoLCB3ZSdsbCByZXR1cm4gdGhlIG1pZGRsZSBvZiB0d28gaW5kaWNlc1xuICAgICAgICAvLyBhcm91bmQgcXVhbnRpbGUgdG8gaW5kaWNhdGUgdGhhdCB3ZSBuZWVkIGFuIGF2ZXJhZ2UgdmFsdWUgb2YgdGhlIHR3b1xuICAgICAgICByZXR1cm4gaWR4IC0gMC41O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZpbmFsbHksIGluIHRoZSBzaW1wbGUgY2FzZSBvZiBhbiBpbnRlZ2VyIGluZGV4XG4gICAgICAgIC8vIHdpdGggYW4gb2RkLWxlbmd0aCBsaXN0LCByZXR1cm4gdGhlIGluZGV4XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxufVxuXG4vKiBAZmxvdyAqL1xuLyogZXNsaW50IG5vLWJpdHdpc2U6IDAgKi9cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHF1YW50aWxlIGluIHdoaWNoIG9uZSB3b3VsZCBmaW5kIHRoZSBnaXZlbiB2YWx1ZSBpblxuICogdGhlIGdpdmVuIGFycmF5LiBXaXRoIGEgc29ydGVkIGFycmF5LCBsZXZlcmFnaW5nIGJpbmFyeSBzZWFyY2gsIHdlIGNhbiBmaW5kXG4gKiB0aGlzIGluZm9ybWF0aW9uIGluIGxvZ2FyaXRobWljIHRpbWUuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSB2YWx1ZSB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIHF1YW50aWxlUmFua1NvcnRlZChbMSwgMiwgMywgNF0sIDMpOyAvLyA9PiAwLjc1XG4gKiBxdWFudGlsZVJhbmtTb3J0ZWQoWzEsIDIsIDMsIDMsIDRdLCAzKTsgLy8gPT4gMC43XG4gKiBxdWFudGlsZVJhbmtTb3J0ZWQoWzEsIDIsIDMsIDRdLCA2KTsgLy8gPT4gMVxuICogcXVhbnRpbGVSYW5rU29ydGVkKFsxLCAyLCAzLCAzLCA1XSwgNCk7IC8vID0+IDAuOFxuICovXG5mdW5jdGlvbiBxdWFudGlsZVJhbmtTb3J0ZWQoXG4gICAgeCAvKjogQXJyYXk8bnVtYmVyPiAqLyxcbiAgICB2YWx1ZSAvKjogbnVtYmVyICovKS8qOiBudW1iZXIgKi8ge1xuXG4gICAgLy8gVmFsdWUgaXMgbGVzc2VyIHRoYW4gYW55IHZhbHVlIGluIHRoZSBhcnJheVxuICAgIGlmICh2YWx1ZSA8IHhbMF0pIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gVmFsdWUgaXMgZ3JlYXRlciB0aGFuIGFueSB2YWx1ZSBpbiB0aGUgYXJyYXlcbiAgICBpZiAodmFsdWUgPiB4W3gubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgdmFyIGwgPSBsb3dlckJvdW5kKHgsIHZhbHVlKTtcblxuICAgIC8vIFZhbHVlIGlzIG5vdCBpbiB0aGUgYXJyYXlcbiAgICBpZiAoeFtsXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGwgLyB4Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBsKys7XG5cbiAgICB2YXIgdSA9IHVwcGVyQm91bmQoeCwgdmFsdWUpO1xuXG4gICAgLy8gVGhlIHZhbHVlIGV4aXN0cyBvbmx5IG9uY2UgaW4gdGhlIGFycmF5XG4gICAgaWYgKHUgPT09IGwpIHtcbiAgICAgICAgcmV0dXJuIGwgLyB4Lmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBIZXJlLCB3ZSBhcmUgYmFzaWNhbGx5IGNvbXB1dGluZyB0aGUgbWVhbiBvZiB0aGUgcmFuZ2Ugb2YgaW5kaWNlc1xuICAgIC8vIGNvbnRhaW5pbmcgb3VyIHNlYXJjaGVkIHZhbHVlLiBCdXQsIGluc3RlYWQsIG9mIGluaXRpYWxpemluZyBhblxuICAgIC8vIGFycmF5IGFuZCBsb29waW5nIG92ZXIgaXQsIHRoZXJlIGlzIGEgZGVkaWNhdGVkIG1hdGggZm9ybXVsYSB0aGF0XG4gICAgLy8gd2UgYXBwbHkgYmVsb3cgdG8gZ2V0IHRoZSByZXN1bHQuXG4gICAgdmFyIHIgPSB1IC0gbCArIDE7XG4gICAgdmFyIHN1bSA9IChyICogKHUgKyBsKSkgLyAyO1xuICAgIHZhciBtZWFuID0gc3VtIC8gcjtcblxuICAgIHJldHVybiBtZWFuIC8geC5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGxvd2VyQm91bmQoeCwgdmFsdWUpIHtcbiAgICB2YXIgbWlkID0gMDtcbiAgICB2YXIgbG8gPSAwO1xuICAgIHZhciBoaSA9IHgubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuXG4gICAgICAgIGlmICh2YWx1ZSA8PSB4W21pZF0pIHtcbiAgICAgICAgICAgIGhpID0gbWlkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG8gPSAtfm1pZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsbztcbn1cblxuZnVuY3Rpb24gdXBwZXJCb3VuZCh4LCB2YWx1ZSkge1xuICAgIHZhciBtaWQgPSAwO1xuICAgIHZhciBsbyA9IDA7XG4gICAgdmFyIGhpID0geC5sZW5ndGg7XG5cbiAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG5cbiAgICAgICAgaWYgKHZhbHVlID49IHhbbWlkXSkge1xuICAgICAgICAgICAgbG8gPSAtfm1pZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhpID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcXVhbnRpbGUgaW4gd2hpY2ggb25lIHdvdWxkIGZpbmQgdGhlIGdpdmVuIHZhbHVlIGluXG4gKiB0aGUgZ2l2ZW4gYXJyYXkuIEl0IHdpbGwgcmVxdWlyZSB0byBjb3B5IGFuZCBzb3J0IHlvdXIgYXJyYXkgYmVmb3JlaGFuZCwgc29cbiAqIGlmIHlvdSBrbm93IHlvdXIgYXJyYXkgaXMgYWxyZWFkeSBzb3J0ZWQsIHlvdSB3b3VsZCByYXRoZXIgdXNlXG4gKiBgcXVhbnRpbGVSYW5rU29ydGVkYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggaW5wdXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHZhbHVlIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogcXVhbnRpbGVSYW5rKFs0LCAzLCAxLCAyXSwgMyk7IC8vID0+IDAuNzVcbiAqIHF1YW50aWxlUmFuayhbNCwgMywgMiwgMywgMV0sIDMpOyAvLyA9PiAwLjdcbiAqIHF1YW50aWxlUmFuayhbMiwgNCwgMSwgM10sIDYpOyAvLyA9PiAxXG4gKiBxdWFudGlsZVJhbmsoWzUsIDMsIDEsIDIsIDNdLCA0KTsgLy8gPT4gMC44XG4gKi9cbmZ1bmN0aW9uIHF1YW50aWxlUmFuayhcbiAgICB4IC8qOiBBcnJheTxudW1iZXI+ICovLFxuICAgIHZhbHVlIC8qOiBudW1iZXIgKi8pLyo6IG51bWJlciAqLyB7XG5cbiAgICAvLyBDbG9uaW5nIGFuZCBzb3J0aW5nIHRoZSBhcnJheVxuICAgIHZhciBzb3J0ZWRDb3B5ID0gbnVtZXJpY1NvcnQoeCk7XG5cbiAgICByZXR1cm4gcXVhbnRpbGVSYW5rU29ydGVkKHNvcnRlZENvcHksIHZhbHVlKTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW0ludGVycXVhcnRpbGUgcmFuZ2VdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJxdWFydGlsZV9yYW5nZSkgaXNcbiAqIGEgbWVhc3VyZSBvZiBzdGF0aXN0aWNhbCBkaXNwZXJzaW9uLCBvciBob3cgc2NhdHRlcmVkLCBzcHJlYWQsIG9yXG4gKiBjb25jZW50cmF0ZWQgYSBkaXN0cmlidXRpb24gaXMuIEl0J3MgY29tcHV0ZWQgYXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlblxuICogdGhlIHRoaXJkIHF1YXJ0aWxlIGFuZCBmaXJzdCBxdWFydGlsZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggc2FtcGxlIG9mIG9uZSBvciBtb3JlIG51bWJlcnNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGludGVycXVhcnRpbGUgcmFuZ2U6IHRoZSBzcGFuIGJldHdlZW4gbG93ZXIgYW5kIHVwcGVyIHF1YXJ0aWxlLFxuICogMC4yNSBhbmQgMC43NVxuICogQGV4YW1wbGVcbiAqIGludGVycXVhcnRpbGVSYW5nZShbMCwgMSwgMiwgM10pOyAvLyA9PiAyXG4gKi9cbmZ1bmN0aW9uIGludGVycXVhcnRpbGVSYW5nZSh4Lyo6IEFycmF5PG51bWJlcj4gKi8pIHtcbiAgICAvLyBJbnRlcnF1YXJ0aWxlIHJhbmdlIGlzIHRoZSBzcGFuIGJldHdlZW4gdGhlIHVwcGVyIHF1YXJ0aWxlLFxuICAgIC8vIGF0IGAwLjc1YCwgYW5kIGxvd2VyIHF1YXJ0aWxlLCBgMC4yNWBcbiAgICB2YXIgcTEgPSBxdWFudGlsZSh4LCAwLjc1KSxcbiAgICAgICAgcTIgPSBxdWFudGlsZSh4LCAwLjI1KTtcblxuICAgIGlmICh0eXBlb2YgcTEgPT09ICdudW1iZXInICYmIHR5cGVvZiBxMiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHExIC0gcTI7XG4gICAgfVxufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBbbWVkaWFuXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01lZGlhbikgaXNcbiAqIHRoZSBtaWRkbGUgbnVtYmVyIG9mIGEgbGlzdC4gVGhpcyBpcyBvZnRlbiBhIGdvb2QgaW5kaWNhdG9yIG9mICd0aGUgbWlkZGxlJ1xuICogd2hlbiB0aGVyZSBhcmUgb3V0bGllcnMgdGhhdCBza2V3IHRoZSBgbWVhbigpYCB2YWx1ZS5cbiAqIFRoaXMgaXMgYSBbbWVhc3VyZSBvZiBjZW50cmFsIHRlbmRlbmN5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DZW50cmFsX3RlbmRlbmN5KTpcbiAqIGEgbWV0aG9kIG9mIGZpbmRpbmcgYSB0eXBpY2FsIG9yIGNlbnRyYWwgdmFsdWUgb2YgYSBzZXQgb2YgbnVtYmVycy5cbiAqXG4gKiBUaGUgbWVkaWFuIGlzbid0IG5lY2Vzc2FyaWx5IG9uZSBvZiB0aGUgZWxlbWVudHMgaW4gdGhlIGxpc3Q6IHRoZSB2YWx1ZVxuICogY2FuIGJlIHRoZSBhdmVyYWdlIG9mIHR3byBlbGVtZW50cyBpZiB0aGUgbGlzdCBoYXMgYW4gZXZlbiBsZW5ndGhcbiAqIGFuZCB0aGUgdHdvIGNlbnRyYWwgdmFsdWVzIGFyZSBkaWZmZXJlbnQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBtZWRpYW4gdmFsdWVcbiAqIEBleGFtcGxlXG4gKiBtZWRpYW4oWzEwLCAyLCA1LCAxMDAsIDIsIDFdKTsgLy8gPT4gMy41XG4gKi9cbmZ1bmN0aW9uIG1lZGlhbih4IC8qOiBBcnJheTxudW1iZXI+ICovKS8qOiBudW1iZXIgKi8ge1xuICAgIHJldHVybiArcXVhbnRpbGUoeCwgMC41KTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW01lZGlhbiBBYnNvbHV0ZSBEZXZpYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVkaWFuX2Fic29sdXRlX2RldmlhdGlvbikgaXNcbiAqIGEgcm9idXN0IG1lYXN1cmUgb2Ygc3RhdGlzdGljYWxcbiAqIGRpc3BlcnNpb24uIEl0IGlzIG1vcmUgcmVzaWxpZW50IHRvIG91dGxpZXJzIHRoYW4gdGhlIHN0YW5kYXJkIGRldmlhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggaW5wdXQgYXJyYXlcbiAqIEByZXR1cm5zIHtudW1iZXJ9IG1lZGlhbiBhYnNvbHV0ZSBkZXZpYXRpb25cbiAqIEBleGFtcGxlXG4gKiBtZWRpYW5BYnNvbHV0ZURldmlhdGlvbihbMSwgMSwgMiwgMiwgNCwgNiwgOV0pOyAvLyA9PiAxXG4gKi9cbmZ1bmN0aW9uIG1lZGlhbkFic29sdXRlRGV2aWF0aW9uKHgvKjogQXJyYXk8bnVtYmVyPiAqLykvKjogbnVtYmVyICovIHtcbiAgICAvLyBUaGUgbWFkIG9mIG5vdGhpbmcgaXMgbnVsbFxuICAgIHZhciBtZWRpYW5WYWx1ZSA9IG1lZGlhbih4KSxcbiAgICAgICAgbWVkaWFuQWJzb2x1dGVEZXZpYXRpb25zID0gW107XG5cbiAgICAvLyBNYWtlIGEgbGlzdCBvZiBhYnNvbHV0ZSBkZXZpYXRpb25zIGZyb20gdGhlIG1lZGlhblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgICBtZWRpYW5BYnNvbHV0ZURldmlhdGlvbnMucHVzaChNYXRoLmFicyh4W2ldIC0gbWVkaWFuVmFsdWUpKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBtZWRpYW4gdmFsdWUgb2YgdGhhdCBsaXN0XG4gICAgcmV0dXJuIG1lZGlhbihtZWRpYW5BYnNvbHV0ZURldmlhdGlvbnMpO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFNwbGl0IGFuIGFycmF5IGludG8gY2h1bmtzIG9mIGEgc3BlY2lmaWVkIHNpemUuIFRoaXMgZnVuY3Rpb25cbiAqIGhhcyB0aGUgc2FtZSBiZWhhdmlvciBhcyBbUEhQJ3MgYXJyYXlfY2h1bmtdKGh0dHA6Ly9waHAubmV0L21hbnVhbC9lbi9mdW5jdGlvbi5hcnJheS1jaHVuay5waHApXG4gKiBmdW5jdGlvbiwgYW5kIHRodXMgd2lsbCBpbnNlcnQgc21hbGxlci1zaXplZCBjaHVua3MgYXQgdGhlIGVuZCBpZlxuICogdGhlIGlucHV0IHNpemUgaXMgbm90IGRpdmlzaWJsZSBieSB0aGUgY2h1bmsgc2l6ZS5cbiAqXG4gKiBgeGAgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXksIGFuZCBgY2h1bmtTaXplYCBhIG51bWJlci5cbiAqIFRoZSBgeGAgYXJyYXkgY2FuIGNvbnRhaW4gYW55IGtpbmQgb2YgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSB4IGEgc2FtcGxlXG4gKiBAcGFyYW0ge251bWJlcn0gY2h1bmtTaXplIHNpemUgb2YgZWFjaCBvdXRwdXQgYXJyYXkuIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyXG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk+fSBhIGNodW5rZWQgYXJyYXlcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBjaHVuayBzaXplIGlzIGxlc3MgdGhhbiAxIG9yIG5vdCBhbiBpbnRlZ2VyXG4gKiBAZXhhbXBsZVxuICogY2h1bmsoWzEsIDIsIDMsIDQsIDUsIDZdLCAyKTtcbiAqIC8vID0+IFtbMSwgMl0sIFszLCA0XSwgWzUsIDZdXVxuICovXG5mdW5jdGlvbiBjaHVuayh4Lyo6QXJyYXk8YW55PiovLCBjaHVua1NpemUvKjpudW1iZXIqLykvKjo/QXJyYXk8QXJyYXk8YW55Pj4qLyB7XG5cbiAgICAvLyBhIGxpc3Qgb2YgcmVzdWx0IGNodW5rcywgYXMgYXJyYXlzIGluIGFuIGFycmF5XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuXG4gICAgLy8gYGNodW5rU2l6ZWAgbXVzdCBiZSB6ZXJvIG9yIGhpZ2hlciAtIG90aGVyd2lzZSB0aGUgbG9vcCBiZWxvdyxcbiAgICAvLyBpbiB3aGljaCB3ZSBjYWxsIGBzdGFydCArPSBjaHVua1NpemVgLCB3aWxsIGxvb3AgaW5maW5pdGVseS5cbiAgICAvLyBTbywgd2UnbGwgZGV0ZWN0IGFuZCB0aHJvdyBpbiB0aGF0IGNhc2UgdG8gaW5kaWNhdGVcbiAgICAvLyBpbnZhbGlkIGlucHV0LlxuICAgIGlmIChjaHVua1NpemUgPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2h1bmsgc2l6ZSBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gICAgfVxuXG4gICAgaWYgKE1hdGguZmxvb3IoY2h1bmtTaXplKSAhPT0gY2h1bmtTaXplKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2h1bmsgc2l6ZSBtdXN0IGJlIGFuIGludGVnZXInKTtcbiAgICB9XG5cbiAgICAvLyBgc3RhcnRgIGlzIHRoZSBpbmRleCBhdCB3aGljaCBgLnNsaWNlYCB3aWxsIHN0YXJ0IHNlbGVjdGluZ1xuICAgIC8vIG5ldyBhcnJheSBlbGVtZW50c1xuICAgIGZvciAodmFyIHN0YXJ0ID0gMDsgc3RhcnQgPCB4Lmxlbmd0aDsgc3RhcnQgKz0gY2h1bmtTaXplKSB7XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggY2h1bmssIHNsaWNlIHRoYXQgcGFydCBvZiB0aGUgYXJyYXkgYW5kIGFkZCBpdFxuICAgICAgICAvLyB0byB0aGUgb3V0cHV0LiBUaGUgYC5zbGljZWAgZnVuY3Rpb24gZG9lcyBub3QgY2hhbmdlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBhcnJheS5cbiAgICAgICAgb3V0cHV0LnB1c2goeC5zbGljZShzdGFydCwgc3RhcnQgKyBjaHVua1NpemUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBTYW1wbGluZyB3aXRoIHJlcGxhY2VtZW50IGlzIGEgdHlwZSBvZiBzYW1wbGluZyB0aGF0IGFsbG93cyB0aGUgc2FtZVxuICogaXRlbSB0byBiZSBwaWNrZWQgb3V0IG9mIGEgcG9wdWxhdGlvbiBtb3JlIHRoYW4gb25jZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PCo+fSB4IGFuIGFycmF5IG9mIGFueSBraW5kIG9mIHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBjb3VudCBvZiBob3cgbWFueSBlbGVtZW50cyB0byB0YWtlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmFuZG9tU291cmNlPU1hdGgucmFuZG9tXSBhbiBvcHRpb25hbCBlbnRyb3B5IHNvdXJjZSB0aGF0XG4gKiByZXR1cm5zIG51bWJlcnMgYmV0d2VlbiAwIGluY2x1c2l2ZSBhbmQgMSBleGNsdXNpdmU6IHRoZSByYW5nZSBbMCwgMSlcbiAqIEByZXR1cm4ge0FycmF5fSBuIHNhbXBsZWQgaXRlbXMgZnJvbSB0aGUgcG9wdWxhdGlvblxuICogQGV4YW1wbGVcbiAqIHZhciB2YWx1ZXMgPSBbMSwgMiwgMywgNF07XG4gKiBzYW1wbGVXaXRoUmVwbGFjZW1lbnQodmFsdWVzLCAyKTsgLy8gcmV0dXJucyAyIHJhbmRvbSB2YWx1ZXMsIGxpa2UgWzIsIDRdO1xuICovXG5mdW5jdGlvbiBzYW1wbGVXaXRoUmVwbGFjZW1lbnQvKjo6PFQ+Ki8oXG4gICAgeC8qOiBBcnJheTxUPiAqLyxcbiAgICBuLyo6IG51bWJlciAqLyxcbiAgICByYW5kb21Tb3VyY2UvKjogP0Z1bmN0aW9uICovKSB7XG5cbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIGEgY3VzdG9tIHJhbmRvbSBudW1iZXIgc291cmNlIGNhbiBiZSBwcm92aWRlZCBpZiB5b3Ugd2FudCB0byB1c2VcbiAgICAvLyBhIGZpeGVkIHNlZWQgb3IgYW5vdGhlciByYW5kb20gbnVtYmVyIGdlbmVyYXRvciwgbGlrZVxuICAgIC8vIFtyYW5kb20tanNdKGh0dHBzOi8vd3d3Lm5wbWpzLm9yZy9wYWNrYWdlL3JhbmRvbS1qcylcbiAgICByYW5kb21Tb3VyY2UgPSByYW5kb21Tb3VyY2UgfHwgTWF0aC5yYW5kb207XG5cbiAgICB2YXIgbGVuZ3RoID0geC5sZW5ndGg7XG4gICAgdmFyIHNhbXBsZSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGluZGV4ID0gTWF0aC5mbG9vcihyYW5kb21Tb3VyY2UoKSAqIGxlbmd0aCk7XG5cbiAgICAgICAgc2FtcGxlLnB1c2goeFtpbmRleF0pO1xuICAgIH1cblxuICAgIHJldHVybiBzYW1wbGU7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogQSBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyJUUyJTgwJTkzWWF0ZXNfc2h1ZmZsZSlcbiAqIGluLXBsYWNlIC0gd2hpY2ggbWVhbnMgdGhhdCBpdCAqKndpbGwgY2hhbmdlIHRoZSBvcmRlciBvZiB0aGUgb3JpZ2luYWxcbiAqIGFycmF5IGJ5IHJlZmVyZW5jZSoqLlxuICpcbiAqIFRoaXMgaXMgYW4gYWxnb3JpdGhtIHRoYXQgZ2VuZXJhdGVzIGEgcmFuZG9tIFtwZXJtdXRhdGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVybXV0YXRpb24pXG4gKiBvZiBhIHNldC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSB4IHNhbXBsZSBvZiBvbmUgb3IgbW9yZSBudW1iZXJzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmFuZG9tU291cmNlPU1hdGgucmFuZG9tXSBhbiBvcHRpb25hbCBlbnRyb3B5IHNvdXJjZSB0aGF0XG4gKiByZXR1cm5zIG51bWJlcnMgYmV0d2VlbiAwIGluY2x1c2l2ZSBhbmQgMSBleGNsdXNpdmU6IHRoZSByYW5nZSBbMCwgMSlcbiAqIEByZXR1cm5zIHtBcnJheX0geFxuICogQGV4YW1wbGVcbiAqIHZhciB4ID0gWzEsIDIsIDMsIDRdO1xuICogc2h1ZmZsZUluUGxhY2UoeCk7XG4gKiAvLyB4IGlzIHNodWZmbGVkIHRvIGEgdmFsdWUgbGlrZSBbMiwgMSwgNCwgM11cbiAqL1xuZnVuY3Rpb24gc2h1ZmZsZUluUGxhY2UoeC8qOiBBcnJheTxhbnk+ICovLCByYW5kb21Tb3VyY2UvKjogP0Z1bmN0aW9uICovKS8qOiBBcnJheTxhbnk+ICovIHtcblxuICAgIC8vIGEgY3VzdG9tIHJhbmRvbSBudW1iZXIgc291cmNlIGNhbiBiZSBwcm92aWRlZCBpZiB5b3Ugd2FudCB0byB1c2VcbiAgICAvLyBhIGZpeGVkIHNlZWQgb3IgYW5vdGhlciByYW5kb20gbnVtYmVyIGdlbmVyYXRvciwgbGlrZVxuICAgIC8vIFtyYW5kb20tanNdKGh0dHBzOi8vd3d3Lm5wbWpzLm9yZy9wYWNrYWdlL3JhbmRvbS1qcylcbiAgICByYW5kb21Tb3VyY2UgPSByYW5kb21Tb3VyY2UgfHwgTWF0aC5yYW5kb207XG5cbiAgICAvLyBzdG9yZSB0aGUgY3VycmVudCBsZW5ndGggb2YgdGhlIHggdG8gZGV0ZXJtaW5lXG4gICAgLy8gd2hlbiBubyBlbGVtZW50cyByZW1haW4gdG8gc2h1ZmZsZS5cbiAgICB2YXIgbGVuZ3RoID0geC5sZW5ndGg7XG5cbiAgICAvLyB0ZW1wb3JhcnkgaXMgdXNlZCB0byBob2xkIGFuIGl0ZW0gd2hlbiBpdCBpcyBiZWluZ1xuICAgIC8vIHN3YXBwZWQgYmV0d2VlbiBpbmRpY2VzLlxuICAgIHZhciB0ZW1wb3Jhcnk7XG5cbiAgICAvLyBUaGUgaW5kZXggdG8gc3dhcCBhdCBlYWNoIHN0YWdlLlxuICAgIHZhciBpbmRleDtcblxuICAgIC8vIFdoaWxlIHRoZXJlIGFyZSBzdGlsbCBpdGVtcyB0byBzaHVmZmxlXG4gICAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gY2hvc2UgYSByYW5kb20gaW5kZXggd2l0aGluIHRoZSBzdWJzZXQgb2YgdGhlIGFycmF5XG4gICAgICAgIC8vIHRoYXQgaXMgbm90IHlldCBzaHVmZmxlZFxuICAgICAgICBpbmRleCA9IE1hdGguZmxvb3IocmFuZG9tU291cmNlKCkgKiBsZW5ndGgtLSk7XG5cbiAgICAgICAgLy8gc3RvcmUgdGhlIHZhbHVlIHRoYXQgd2UnbGwgbW92ZSB0ZW1wb3JhcmlseVxuICAgICAgICB0ZW1wb3JhcnkgPSB4W2xlbmd0aF07XG5cbiAgICAgICAgLy8gc3dhcCB0aGUgdmFsdWUgYXQgYHhbbGVuZ3RoXWAgd2l0aCBgeFtpbmRleF1gXG4gICAgICAgIHhbbGVuZ3RoXSA9IHhbaW5kZXhdO1xuICAgICAgICB4W2luZGV4XSA9IHRlbXBvcmFyeTtcbiAgICB9XG5cbiAgICByZXR1cm4geDtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBBIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXIlRTIlODAlOTNZYXRlc19zaHVmZmxlKVxuICogaXMgYSBmYXN0IHdheSB0byBjcmVhdGUgYSByYW5kb20gcGVybXV0YXRpb24gb2YgYSBmaW5pdGUgc2V0LiBUaGlzIGlzXG4gKiBhIGZ1bmN0aW9uIGFyb3VuZCBgc2h1ZmZsZV9pbl9wbGFjZWAgdGhhdCBhZGRzIHRoZSBndWFyYW50ZWUgdGhhdFxuICogaXQgd2lsbCBub3QgbW9kaWZ5IGl0cyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSB4IHNhbXBsZSBvZiAwIG9yIG1vcmUgbnVtYmVyc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JhbmRvbVNvdXJjZT1NYXRoLnJhbmRvbV0gYW4gb3B0aW9uYWwgZW50cm9weSBzb3VyY2UgdGhhdFxuICogcmV0dXJucyBudW1iZXJzIGJldHdlZW4gMCBpbmNsdXNpdmUgYW5kIDEgZXhjbHVzaXZlOiB0aGUgcmFuZ2UgWzAsIDEpXG4gKiBAcmV0dXJuIHtBcnJheX0gc2h1ZmZsZWQgdmVyc2lvbiBvZiBpbnB1dFxuICogQGV4YW1wbGVcbiAqIHZhciBzaHVmZmxlZCA9IHNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAqIHNodWZmbGVkOyAvLyA9IFsyLCAzLCAxLCA0XSBvciBhbnkgb3RoZXIgcmFuZG9tIHBlcm11dGF0aW9uXG4gKi9cbmZ1bmN0aW9uIHNodWZmbGUvKjo6PFQ+Ki8oeC8qOiBBcnJheTxUPiAqLywgcmFuZG9tU291cmNlLyo6ID9GdW5jdGlvbiAqLykge1xuICAgIC8vIHNsaWNlIHRoZSBvcmlnaW5hbCBhcnJheSBzbyB0aGF0IGl0IGlzIG5vdCBtb2RpZmllZFxuICAgIHZhciBzYW1wbGUgPSB4LnNsaWNlKCk7XG5cbiAgICAvLyBhbmQgdGhlbiBzaHVmZmxlIHRoYXQgc2hhbGxvdy1jb3BpZWQgYXJyYXksIGluIHBsYWNlXG4gICAgcmV0dXJuIHNodWZmbGVJblBsYWNlKHNhbXBsZS5zbGljZSgpLCByYW5kb21Tb3VyY2UpO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIFtzaW1wbGUgcmFuZG9tIHNhbXBsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TaW1wbGVfcmFuZG9tX3NhbXBsZSlcbiAqIGZyb20gYSBnaXZlbiBhcnJheSBvZiBgbmAgZWxlbWVudHMuXG4gKlxuICogVGhlIHNhbXBsZWQgdmFsdWVzIHdpbGwgYmUgaW4gYW55IG9yZGVyLCBub3QgbmVjZXNzYXJpbHkgdGhlIG9yZGVyXG4gKiB0aGV5IGFwcGVhciBpbiB0aGUgaW5wdXQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSB4IGlucHV0IGFycmF5LiBjYW4gY29udGFpbiBhbnkgdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gY291bnQgb2YgaG93IG1hbnkgZWxlbWVudHMgdG8gdGFrZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JhbmRvbVNvdXJjZT1NYXRoLnJhbmRvbV0gYW4gb3B0aW9uYWwgZW50cm9weSBzb3VyY2UgdGhhdFxuICogcmV0dXJucyBudW1iZXJzIGJldHdlZW4gMCBpbmNsdXNpdmUgYW5kIDEgZXhjbHVzaXZlOiB0aGUgcmFuZ2UgWzAsIDEpXG4gKiBAcmV0dXJuIHtBcnJheX0gc3Vic2V0IG9mIG4gZWxlbWVudHMgaW4gb3JpZ2luYWwgYXJyYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogdmFyIHZhbHVlcyA9IFsxLCAyLCA0LCA1LCA2LCA3LCA4LCA5XTtcbiAqIHNhbXBsZSh2YWx1ZXMsIDMpOyAvLyByZXR1cm5zIDMgcmFuZG9tIHZhbHVlcywgbGlrZSBbMiwgNSwgOF07XG4gKi9cbmZ1bmN0aW9uIHNhbXBsZS8qOjogPFQ+ICovKFxuICAgIHggLyo6IEFycmF5PFQ+ICovLFxuICAgIG4gLyo6IG51bWJlciAqLyxcbiAgICByYW5kb21Tb3VyY2UgLyo6ID9GdW5jdGlvbiAqLykgLyo6IEFycmF5PFQ+ICovIHtcbiAgICAvLyBzaHVmZmxlIHRoZSBvcmlnaW5hbCBhcnJheSB1c2luZyBhIGZpc2hlci15YXRlcyBzaHVmZmxlXG4gICAgdmFyIHNodWZmbGVkID0gc2h1ZmZsZSh4LCByYW5kb21Tb3VyY2UpO1xuXG4gICAgLy8gYW5kIHRoZW4gcmV0dXJuIGEgc3Vic2V0IG9mIGl0IC0gdGhlIGZpcnN0IGBuYCBlbGVtZW50cy5cbiAgICByZXR1cm4gc2h1ZmZsZWQuc2xpY2UoMCwgbik7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogRm9yIGEgc29ydGVkIGlucHV0LCBjb3VudGluZyB0aGUgbnVtYmVyIG9mIHVuaXF1ZSB2YWx1ZXNcbiAqIGlzIHBvc3NpYmxlIGluIGNvbnN0YW50IHRpbWUgYW5kIGNvbnN0YW50IG1lbW9yeS4gVGhpcyBpc1xuICogYSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIGFsZ29yaXRobS5cbiAqXG4gKiBWYWx1ZXMgYXJlIGNvbXBhcmVkIHdpdGggYD09PWAsIHNvIG9iamVjdHMgYW5kIG5vbi1wcmltaXRpdmUgb2JqZWN0c1xuICogYXJlIG5vdCBoYW5kbGVkIGluIGFueSBzcGVjaWFsIHdheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PCo+fSB4IGFuIGFycmF5IG9mIGFueSBraW5kIG9mIHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBjb3VudCBvZiB1bmlxdWUgdmFsdWVzXG4gKiBAZXhhbXBsZVxuICogdW5pcXVlQ291bnRTb3J0ZWQoWzEsIDIsIDNdKTsgLy8gPT4gM1xuICogdW5pcXVlQ291bnRTb3J0ZWQoWzEsIDEsIDFdKTsgLy8gPT4gMVxuICovXG5mdW5jdGlvbiB1bmlxdWVDb3VudFNvcnRlZCh4Lyo6IEFycmF5PGFueT4qLykvKjogbnVtYmVyICovIHtcbiAgICB2YXIgdW5pcXVlVmFsdWVDb3VudCA9IDAsXG4gICAgICAgIGxhc3RTZWVuVmFsdWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpID09PSAwIHx8IHhbaV0gIT09IGxhc3RTZWVuVmFsdWUpIHtcbiAgICAgICAgICAgIGxhc3RTZWVuVmFsdWUgPSB4W2ldO1xuICAgICAgICAgICAgdW5pcXVlVmFsdWVDb3VudCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmlxdWVWYWx1ZUNvdW50O1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBjb2x1bW4geCByb3cgbWF0cml4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gY29sdW1uc1xuICogQHBhcmFtIHtudW1iZXJ9IHJvd3NcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBtYXRyaXhcbiAqIEBleGFtcGxlXG4gKiBtYWtlTWF0cml4KDEwLCAxMCk7XG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXRyaXgoY29sdW1ucywgcm93cykge1xuICAgIHZhciBtYXRyaXggPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbHVtbnM7IGkrKykge1xuICAgICAgICB2YXIgY29sdW1uID0gW107XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcm93czsgaisrKSB7XG4gICAgICAgICAgICBjb2x1bW4ucHVzaCgwKTtcbiAgICAgICAgfVxuICAgICAgICBtYXRyaXgucHVzaChjb2x1bW4pO1xuICAgIH1cbiAgICByZXR1cm4gbWF0cml4O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBpbmNyZW1lbnRhbGx5IGNvbXB1dGVkIHZhbHVlcyBiYXNlZCBvbiB0aGUgc3VtcyBhbmQgc3VtcyBvZlxuICogc3F1YXJlcyBmb3IgdGhlIGRhdGEgYXJyYXlcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGpcbiAqIEBwYXJhbSB7bnVtYmVyfSBpXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHN1bXNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc3Vtc09mU3F1YXJlc1xuICogQHJldHVybiB7bnVtYmVyfVxuICogQGV4YW1wbGVcbiAqIHNzcSgwLCAxLCBbLTEsIDAsIDJdLCBbMSwgMSwgNV0pO1xuICovXG5mdW5jdGlvbiBzc3EoaiwgaSwgc3Vtcywgc3Vtc09mU3F1YXJlcykge1xuICAgIHZhciBzamk7IC8vIHMoaiwgaSlcbiAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgdmFyIG11amkgPSAoc3Vtc1tpXSAtIHN1bXNbaiAtIDFdKSAvIChpIC0gaiArIDEpOyAvLyBtdShqLCBpKVxuICAgICAgICBzamkgPSBzdW1zT2ZTcXVhcmVzW2ldIC0gc3Vtc09mU3F1YXJlc1tqIC0gMV0gLSAoaSAtIGogKyAxKSAqIG11amkgKiBtdWppO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNqaSA9IHN1bXNPZlNxdWFyZXNbaV0gLSBzdW1zW2ldICogc3Vtc1tpXSAvIChpICsgMSk7XG4gICAgfVxuICAgIGlmIChzamkgPCAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gc2ppO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgcmVjdXJzaXZlbHkgZGl2aWRlcyBhbmQgY29ucXVlcnMgY29tcHV0YXRpb25zXG4gKiBmb3IgY2x1c3RlciBqXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpTWluIE1pbmltdW0gaW5kZXggaW4gY2x1c3RlciB0byBiZSBjb21wdXRlZFxuICogQHBhcmFtIHtudW1iZXJ9IGlNYXggTWF4aW11bSBpbmRleCBpbiBjbHVzdGVyIHRvIGJlIGNvbXB1dGVkXG4gKiBAcGFyYW0ge251bWJlcn0gY2x1c3RlciBJbmRleCBvZiB0aGUgY2x1c3RlciBjdXJyZW50bHkgYmVpbmcgY29tcHV0ZWRcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IG1hdHJpeFxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gYmFja3RyYWNrTWF0cml4XG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHN1bXNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc3Vtc09mU3F1YXJlc1xuICovXG5mdW5jdGlvbiBmaWxsTWF0cml4Q29sdW1uKGlNaW4sIGlNYXgsIGNsdXN0ZXIsIG1hdHJpeCwgYmFja3RyYWNrTWF0cml4LCBzdW1zLCBzdW1zT2ZTcXVhcmVzKSB7XG4gICAgaWYgKGlNaW4gPiBpTWF4KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTdGFydCBhdCBtaWRwb2ludCBiZXR3ZWVuIGlNaW4gYW5kIGlNYXhcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKGlNaW4gKyBpTWF4KSAvIDIpO1xuXG4gICAgbWF0cml4W2NsdXN0ZXJdW2ldID0gbWF0cml4W2NsdXN0ZXIgLSAxXVtpIC0gMV07XG4gICAgYmFja3RyYWNrTWF0cml4W2NsdXN0ZXJdW2ldID0gaTtcblxuICAgIHZhciBqbG93ID0gY2x1c3RlcjsgLy8gdGhlIGxvd2VyIGVuZCBmb3IgalxuXG4gICAgaWYgKGlNaW4gPiBjbHVzdGVyKSB7XG4gICAgICAgIGpsb3cgPSBNYXRoLm1heChqbG93LCBiYWNrdHJhY2tNYXRyaXhbY2x1c3Rlcl1baU1pbiAtIDFdIHx8IDApO1xuICAgIH1cbiAgICBqbG93ID0gTWF0aC5tYXgoamxvdywgYmFja3RyYWNrTWF0cml4W2NsdXN0ZXIgLSAxXVtpXSB8fCAwKTtcblxuICAgIHZhciBqaGlnaCA9IGkgLSAxOyAvLyB0aGUgdXBwZXIgZW5kIGZvciBqXG4gICAgaWYgKGlNYXggPCBtYXRyaXgubGVuZ3RoIC0gMSkge1xuICAgICAgICBqaGlnaCA9IE1hdGgubWluKGpoaWdoLCBiYWNrdHJhY2tNYXRyaXhbY2x1c3Rlcl1baU1heCArIDFdIHx8IDApO1xuICAgIH1cblxuICAgIHZhciBzamk7XG4gICAgdmFyIHNqbG93aTtcbiAgICB2YXIgc3NxamxvdztcbiAgICB2YXIgc3NxajtcbiAgICBmb3IgKHZhciBqID0gamhpZ2g7IGogPj0gamxvdzsgLS1qKSB7XG4gICAgICAgIHNqaSA9IHNzcShqLCBpLCBzdW1zLCBzdW1zT2ZTcXVhcmVzKTtcblxuICAgICAgICBpZiAoc2ppICsgbWF0cml4W2NsdXN0ZXIgLSAxXVtqbG93IC0gMV0gPj0gbWF0cml4W2NsdXN0ZXJdW2ldKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4YW1pbmUgdGhlIGxvd2VyIGJvdW5kIG9mIHRoZSBjbHVzdGVyIGJvcmRlclxuICAgICAgICBzamxvd2kgPSBzc3EoamxvdywgaSwgc3Vtcywgc3Vtc09mU3F1YXJlcyk7XG5cbiAgICAgICAgc3NxamxvdyA9IHNqbG93aSArIG1hdHJpeFtjbHVzdGVyIC0gMV1bamxvdyAtIDFdO1xuXG4gICAgICAgIGlmIChzc3FqbG93IDwgbWF0cml4W2NsdXN0ZXJdW2ldKSB7XG4gICAgICAgICAgICAvLyBTaHJpbmsgdGhlIGxvd2VyIGJvdW5kXG4gICAgICAgICAgICBtYXRyaXhbY2x1c3Rlcl1baV0gPSBzc3FqbG93O1xuICAgICAgICAgICAgYmFja3RyYWNrTWF0cml4W2NsdXN0ZXJdW2ldID0gamxvdztcbiAgICAgICAgfVxuICAgICAgICBqbG93Kys7XG5cbiAgICAgICAgc3NxaiA9IHNqaSArIG1hdHJpeFtjbHVzdGVyIC0gMV1baiAtIDFdO1xuICAgICAgICBpZiAoc3NxaiA8IG1hdHJpeFtjbHVzdGVyXVtpXSkge1xuICAgICAgICAgICAgbWF0cml4W2NsdXN0ZXJdW2ldID0gc3NxajtcbiAgICAgICAgICAgIGJhY2t0cmFja01hdHJpeFtjbHVzdGVyXVtpXSA9IGo7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaWxsTWF0cml4Q29sdW1uKGlNaW4sIGkgLSAxLCBjbHVzdGVyLCBtYXRyaXgsIGJhY2t0cmFja01hdHJpeCwgc3Vtcywgc3Vtc09mU3F1YXJlcyk7XG4gICAgZmlsbE1hdHJpeENvbHVtbihpICsgMSwgaU1heCwgY2x1c3RlciwgbWF0cml4LCBiYWNrdHJhY2tNYXRyaXgsIHN1bXMsIHN1bXNPZlNxdWFyZXMpO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRoZSBtYWluIG1hdHJpY2VzIHVzZWQgaW4gQ2ttZWFucyBhbmQga2lja3NcbiAqIG9mZiB0aGUgZGl2aWRlIGFuZCBjb25xdWVyIGNsdXN0ZXIgY29tcHV0YXRpb24gc3RyYXRlZ3lcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBkYXRhIHNvcnRlZCBhcnJheSBvZiB2YWx1ZXNcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IG1hdHJpeFxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gYmFja3RyYWNrTWF0cml4XG4gKi9cbmZ1bmN0aW9uIGZpbGxNYXRyaWNlcyhkYXRhLCBtYXRyaXgsIGJhY2t0cmFja01hdHJpeCkge1xuICAgIHZhciBuVmFsdWVzID0gbWF0cml4WzBdLmxlbmd0aDtcblxuICAgIC8vIFNoaWZ0IHZhbHVlcyBieSB0aGUgbWVkaWFuIHRvIGltcHJvdmUgbnVtZXJpYyBzdGFiaWxpdHlcbiAgICB2YXIgc2hpZnQgPSBkYXRhW01hdGguZmxvb3IoblZhbHVlcyAvIDIpXTtcblxuICAgIC8vIEN1bXVsYXRpdmUgc3VtIGFuZCBjdW11bGF0aXZlIHN1bSBvZiBzcXVhcmVzIGZvciBhbGwgdmFsdWVzIGluIGRhdGEgYXJyYXlcbiAgICB2YXIgc3VtcyA9IFtdO1xuICAgIHZhciBzdW1zT2ZTcXVhcmVzID0gW107XG5cbiAgICAvLyBJbml0aWFsaXplIGZpcnN0IGNvbHVtbiBpbiBtYXRyaXggJiBiYWNrdHJhY2tNYXRyaXhcbiAgICBmb3IgKHZhciBpID0gMCwgc2hpZnRlZFZhbHVlOyBpIDwgblZhbHVlczsgKytpKSB7XG4gICAgICAgIHNoaWZ0ZWRWYWx1ZSA9IGRhdGFbaV0gLSBzaGlmdDtcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIHN1bXMucHVzaChzaGlmdGVkVmFsdWUpO1xuICAgICAgICAgICAgc3Vtc09mU3F1YXJlcy5wdXNoKHNoaWZ0ZWRWYWx1ZSAqIHNoaWZ0ZWRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdW1zLnB1c2goc3Vtc1tpIC0gMV0gKyBzaGlmdGVkVmFsdWUpO1xuICAgICAgICAgICAgc3Vtc09mU3F1YXJlcy5wdXNoKHN1bXNPZlNxdWFyZXNbaSAtIDFdICsgc2hpZnRlZFZhbHVlICogc2hpZnRlZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgZm9yIGNsdXN0ZXIgPSAwXG4gICAgICAgIG1hdHJpeFswXVtpXSA9IHNzcSgwLCBpLCBzdW1zLCBzdW1zT2ZTcXVhcmVzKTtcbiAgICAgICAgYmFja3RyYWNrTWF0cml4WzBdW2ldID0gMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSByZXN0IG9mIHRoZSBjb2x1bW5zXG4gICAgdmFyIGlNaW47XG4gICAgZm9yICh2YXIgY2x1c3RlciA9IDE7IGNsdXN0ZXIgPCBtYXRyaXgubGVuZ3RoOyArK2NsdXN0ZXIpIHtcbiAgICAgICAgaWYgKGNsdXN0ZXIgPCBtYXRyaXgubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaU1pbiA9IGNsdXN0ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBObyBuZWVkIHRvIGNvbXB1dGUgbWF0cml4W0stMV1bMF0gLi4uIG1hdHJpeFtLLTFdW04tMl1cbiAgICAgICAgICAgIGlNaW4gPSBuVmFsdWVzIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpbGxNYXRyaXhDb2x1bW4oaU1pbiwgblZhbHVlcyAtIDEsIGNsdXN0ZXIsIG1hdHJpeCwgYmFja3RyYWNrTWF0cml4LCBzdW1zLCBzdW1zT2ZTcXVhcmVzKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ2ttZWFucyBjbHVzdGVyaW5nIGlzIGFuIGltcHJvdmVtZW50IG9uIGhldXJpc3RpYy1iYXNlZCBjbHVzdGVyaW5nXG4gKiBhcHByb2FjaGVzIGxpa2UgSmVua3MuIFRoZSBhbGdvcml0aG0gd2FzIGRldmVsb3BlZCBpblxuICogW0hhaXpob3UgV2FuZyBhbmQgTWluZ3pob3UgU29uZ10oaHR0cDovL2pvdXJuYWwuci1wcm9qZWN0Lm9yZy9hcmNoaXZlLzIwMTEtMi9SSm91cm5hbF8yMDExLTJfV2FuZytTb25nLnBkZilcbiAqIGFzIGEgW2R5bmFtaWMgcHJvZ3JhbW1pbmddKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0R5bmFtaWNfcHJvZ3JhbW1pbmcpIGFwcHJvYWNoXG4gKiB0byB0aGUgcHJvYmxlbSBvZiBjbHVzdGVyaW5nIG51bWVyaWMgZGF0YSBpbnRvIGdyb3VwcyB3aXRoIHRoZSBsZWFzdFxuICogd2l0aGluLWdyb3VwIHN1bS1vZi1zcXVhcmVkLWRldmlhdGlvbnMuXG4gKlxuICogTWluaW1pemluZyB0aGUgZGlmZmVyZW5jZSB3aXRoaW4gZ3JvdXBzIC0gd2hhdCBXYW5nICYgU29uZyByZWZlciB0byBhc1xuICogYHdpdGhpbnNzYCwgb3Igd2l0aGluIHN1bS1vZi1zcXVhcmVzLCBtZWFucyB0aGF0IGdyb3VwcyBhcmUgb3B0aW1hbGx5XG4gKiBob21vZ2Vub3VzIHdpdGhpbiBhbmQgdGhlIGRhdGEgaXMgc3BsaXQgaW50byByZXByZXNlbnRhdGl2ZSBncm91cHMuXG4gKiBUaGlzIGlzIHZlcnkgdXNlZnVsIGZvciB2aXN1YWxpemF0aW9uLCB3aGVyZSB5b3UgbWF5IHdhbnQgdG8gcmVwcmVzZW50XG4gKiBhIGNvbnRpbnVvdXMgdmFyaWFibGUgaW4gZGlzY3JldGUgY29sb3Igb3Igc3R5bGUgZ3JvdXBzLiBUaGlzIGZ1bmN0aW9uXG4gKiBjYW4gcHJvdmlkZSBncm91cHMgdGhhdCBlbXBoYXNpemUgZGlmZmVyZW5jZXMgYmV0d2VlbiBkYXRhLlxuICpcbiAqIEJlaW5nIGEgZHluYW1pYyBhcHByb2FjaCwgdGhpcyBhbGdvcml0aG0gaXMgYmFzZWQgb24gdHdvIG1hdHJpY2VzIHRoYXRcbiAqIHN0b3JlIGluY3JlbWVudGFsbHktY29tcHV0ZWQgdmFsdWVzIGZvciBzcXVhcmVkIGRldmlhdGlvbnMgYW5kIGJhY2t0cmFja2luZ1xuICogaW5kZXhlcy5cbiAqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIENrbWVhbnMgMy40LjYsIHdoaWNoIGludHJvZHVjZWQgYSBuZXcgZGl2aWRlXG4gKiBhbmQgY29ucXVlciBhcHByb2FjaCB0aGF0IGltcHJvdmVkIHJ1bnRpbWUgZnJvbSBPKGtuXjIpIHRvIE8oa24gbG9nKG4pKS5cbiAqXG4gKiBVbmxpa2UgdGhlIFtvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9jcmFuLnItcHJvamVjdC5vcmcvd2ViL3BhY2thZ2VzL0NrbWVhbnMuMWQuZHAvaW5kZXguaHRtbCksXG4gKiB0aGlzIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IGluY2x1ZGUgYW55IGNvZGUgdG8gYXV0b21hdGljYWxseSBkZXRlcm1pbmVcbiAqIHRoZSBvcHRpbWFsIG51bWJlciBvZiBjbHVzdGVyczogdGhpcyBpbmZvcm1hdGlvbiBuZWVkcyB0byBiZSBleHBsaWNpdGx5XG4gKiBwcm92aWRlZC5cbiAqXG4gKiAjIyMgUmVmZXJlbmNlc1xuICogX0NrbWVhbnMuMWQuZHA6IE9wdGltYWwgay1tZWFucyBDbHVzdGVyaW5nIGluIE9uZSBEaW1lbnNpb24gYnkgRHluYW1pY1xuICogUHJvZ3JhbW1pbmdfIEhhaXpob3UgV2FuZyBhbmQgTWluZ3pob3UgU29uZyBJU1NOIDIwNzMtNDg1OVxuICpcbiAqIGZyb20gVGhlIFIgSm91cm5hbCBWb2wuIDMvMiwgRGVjZW1iZXIgMjAxMVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0IGRhdGEsIGFzIGFuIGFycmF5IG9mIG51bWJlciB2YWx1ZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBuQ2x1c3RlcnMgbnVtYmVyIG9mIGRlc2lyZWQgY2xhc3Nlcy4gVGhpcyBjYW5ub3QgYmVcbiAqIGdyZWF0ZXIgdGhhbiB0aGUgbnVtYmVyIG9mIHZhbHVlcyBpbiB0aGUgZGF0YSBhcnJheS5cbiAqIEByZXR1cm5zIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY2x1c3RlcmVkIGlucHV0XG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIG51bWJlciBvZiByZXF1ZXN0ZWQgY2x1c3RlcnMgaXMgaGlnaGVyIHRoYW4gdGhlIHNpemUgb2YgdGhlIGRhdGFcbiAqIEBleGFtcGxlXG4gKiBja21lYW5zKFstMSwgMiwgLTEsIDIsIDQsIDUsIDYsIC0xLCAyLCAtMV0sIDMpO1xuICogLy8gVGhlIGlucHV0LCBjbHVzdGVyZWQgaW50byBncm91cHMgb2Ygc2ltaWxhciBudW1iZXJzLlxuICogLy89IFtbLTEsIC0xLCAtMSwgLTFdLCBbMiwgMiwgMl0sIFs0LCA1LCA2XV0pO1xuICovXG5mdW5jdGlvbiBja21lYW5zKFxuICAgIHgvKjogQXJyYXk8bnVtYmVyPiAqLyxcbiAgICBuQ2x1c3RlcnMvKjogbnVtYmVyICovKS8qOiBBcnJheTxBcnJheTxudW1iZXI+PiAqLyB7XG5cbiAgICBpZiAobkNsdXN0ZXJzID4geC5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgZ2VuZXJhdGUgbW9yZSBjbGFzc2VzIHRoYW4gdGhlcmUgYXJlIGRhdGEgdmFsdWVzJyk7XG4gICAgfVxuXG4gICAgdmFyIHNvcnRlZCA9IG51bWVyaWNTb3J0KHgpLFxuICAgICAgICAvLyB3ZSdsbCB1c2UgdGhpcyBhcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgY2x1c3RlcnNcbiAgICAgICAgdW5pcXVlQ291bnQgPSB1bmlxdWVDb3VudFNvcnRlZChzb3J0ZWQpO1xuXG4gICAgLy8gaWYgYWxsIG9mIHRoZSBpbnB1dCB2YWx1ZXMgYXJlIGlkZW50aWNhbCwgdGhlcmUncyBvbmUgY2x1c3RlclxuICAgIC8vIHdpdGggYWxsIG9mIHRoZSBpbnB1dCBpbiBpdC5cbiAgICBpZiAodW5pcXVlQ291bnQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIFtzb3J0ZWRdO1xuICAgIH1cblxuICAgIC8vIG5hbWVkICdTJyBvcmlnaW5hbGx5XG4gICAgdmFyIG1hdHJpeCA9IG1ha2VNYXRyaXgobkNsdXN0ZXJzLCBzb3J0ZWQubGVuZ3RoKSxcbiAgICAgICAgLy8gbmFtZWQgJ0onIG9yaWdpbmFsbHlcbiAgICAgICAgYmFja3RyYWNrTWF0cml4ID0gbWFrZU1hdHJpeChuQ2x1c3RlcnMsIHNvcnRlZC5sZW5ndGgpO1xuXG4gICAgLy8gVGhpcyBpcyBhIGR5bmFtaWMgcHJvZ3JhbW1pbmcgd2F5IHRvIHNvbHZlIHRoZSBwcm9ibGVtIG9mIG1pbmltaXppbmdcbiAgICAvLyB3aXRoaW4tY2x1c3RlciBzdW0gb2Ygc3F1YXJlcy4gSXQncyBzaW1pbGFyIHRvIGxpbmVhciByZWdyZXNzaW9uXG4gICAgLy8gaW4gdGhpcyB3YXksIGFuZCB0aGlzIGNhbGN1bGF0aW9uIGluY3JlbWVudGFsbHkgY29tcHV0ZXMgdGhlXG4gICAgLy8gc3VtIG9mIHNxdWFyZXMgdGhhdCBhcmUgbGF0ZXIgcmVhZC5cbiAgICBmaWxsTWF0cmljZXMoc29ydGVkLCBtYXRyaXgsIGJhY2t0cmFja01hdHJpeCk7XG5cbiAgICAvLyBUaGUgcmVhbCB3b3JrIG9mIENrbWVhbnMgY2x1c3RlcmluZyBoYXBwZW5zIGluIHRoZSBtYXRyaXggZ2VuZXJhdGlvbjpcbiAgICAvLyB0aGUgZ2VuZXJhdGVkIG1hdHJpY2VzIGVuY29kZSBhbGwgcG9zc2libGUgY2x1c3RlcmluZyBjb21iaW5hdGlvbnMsIGFuZFxuICAgIC8vIG9uY2UgdGhleSdyZSBnZW5lcmF0ZWQgd2UgY2FuIHNvbHZlIGZvciB0aGUgYmVzdCBjbHVzdGVyaW5nIGdyb3Vwc1xuICAgIC8vIHZlcnkgcXVpY2tseS5cbiAgICB2YXIgY2x1c3RlcnMgPSBbXSxcbiAgICAgICAgY2x1c3RlclJpZ2h0ID0gYmFja3RyYWNrTWF0cml4WzBdLmxlbmd0aCAtIDE7XG5cbiAgICAvLyBCYWNrdHJhY2sgdGhlIGNsdXN0ZXJzIGZyb20gdGhlIGR5bmFtaWMgcHJvZ3JhbW1pbmcgbWF0cml4LiBUaGlzXG4gICAgLy8gc3RhcnRzIGF0IHRoZSBib3R0b20tcmlnaHQgY29ybmVyIG9mIHRoZSBtYXRyaXggKGlmIHRoZSB0b3AtbGVmdCBpcyAwLCAwKSxcbiAgICAvLyBhbmQgbW92ZXMgdGhlIGNsdXN0ZXIgdGFyZ2V0IHdpdGggdGhlIGxvb3AuXG4gICAgZm9yICh2YXIgY2x1c3RlciA9IGJhY2t0cmFja01hdHJpeC5sZW5ndGggLSAxOyBjbHVzdGVyID49IDA7IGNsdXN0ZXItLSkge1xuXG4gICAgICAgIHZhciBjbHVzdGVyTGVmdCA9IGJhY2t0cmFja01hdHJpeFtjbHVzdGVyXVtjbHVzdGVyUmlnaHRdO1xuXG4gICAgICAgIC8vIGZpbGwgdGhlIGNsdXN0ZXIgZnJvbSB0aGUgc29ydGVkIGlucHV0IGJ5IHRha2luZyBhIHNsaWNlIG9mIHRoZVxuICAgICAgICAvLyBhcnJheS4gdGhlIGJhY2t0cmFjayBtYXRyaXggbWFrZXMgdGhpcyBlYXN5IC0gaXQgc3RvcmVzIHRoZVxuICAgICAgICAvLyBpbmRleGVzIHdoZXJlIHRoZSBjbHVzdGVyIHNob3VsZCBzdGFydCBhbmQgZW5kLlxuICAgICAgICBjbHVzdGVyc1tjbHVzdGVyXSA9IHNvcnRlZC5zbGljZShjbHVzdGVyTGVmdCwgY2x1c3RlclJpZ2h0ICsgMSk7XG5cbiAgICAgICAgaWYgKGNsdXN0ZXIgPiAwKSB7XG4gICAgICAgICAgICBjbHVzdGVyUmlnaHQgPSBjbHVzdGVyTGVmdCAtIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2x1c3RlcnM7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgb2YgeCwgdGhpcyB3aWxsIGZpbmQgdGhlIGV4dGVudCBvZiB0aGVcbiAqIHggYW5kIHJldHVybiBhbiBhcnJheSBvZiBicmVha3MgdGhhdCBjYW4gYmUgdXNlZFxuICogdG8gY2F0ZWdvcml6ZSB0aGUgeCBpbnRvIGEgbnVtYmVyIG9mIGNsYXNzZXMuIFRoZVxuICogcmV0dXJuZWQgYXJyYXkgd2lsbCBhbHdheXMgYmUgMSBsb25nZXIgdGhhbiB0aGUgbnVtYmVyIG9mXG4gKiBjbGFzc2VzIGJlY2F1c2UgaXQgaW5jbHVkZXMgdGhlIG1pbmltdW0gdmFsdWUuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGFuIGFycmF5IG9mIG51bWJlciB2YWx1ZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBuQ2xhc3NlcyBudW1iZXIgb2YgZGVzaXJlZCBjbGFzc2VzXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gYXJyYXkgb2YgY2xhc3MgYnJlYWsgcG9zaXRpb25zXG4gKiBAZXhhbXBsZVxuICogZXF1YWxJbnRlcnZhbEJyZWFrcyhbMSwgMiwgMywgNCwgNSwgNl0sIDQpOyAvLyA9PiBbMSwgMi4yNSwgMy41LCA0Ljc1LCA2XVxuICovXG5mdW5jdGlvbiBlcXVhbEludGVydmFsQnJlYWtzKHgvKjogQXJyYXk8bnVtYmVyPiAqLywgbkNsYXNzZXMvKjpudW1iZXIqLykvKjogQXJyYXk8bnVtYmVyPiAqLyB7XG5cbiAgICBpZiAoeC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cblxuICAgIHZhciB0aGVNaW4gPSBtaW4oeCk7XG4gICAgdmFyIHRoZU1heCA9IG1heCh4KTtcblxuICAgIC8vIHRoZSBmaXJzdCBicmVhayB3aWxsIGFsd2F5cyBiZSB0aGUgbWluaW11bSB2YWx1ZVxuICAgIC8vIGluIHRoZSB4c2V0XG4gICAgdmFyIGJyZWFrcyA9IFt0aGVNaW5dO1xuXG4gICAgLy8gVGhlIHNpemUgb2YgZWFjaCBicmVhayBpcyB0aGUgZnVsbCByYW5nZSBvZiB0aGUgeFxuICAgIC8vIGRpdmlkZWQgYnkgdGhlIG51bWJlciBvZiBjbGFzc2VzIHJlcXVlc3RlZFxuICAgIHZhciBicmVha1NpemUgPSAodGhlTWF4IC0gdGhlTWluKSAvIG5DbGFzc2VzO1xuXG4gICAgLy8gSW4gdGhlIGNhc2Ugb2YgbkNsYXNzZXMgPSAxLCB0aGlzIGxvb3Agd29uJ3QgcnVuXG4gICAgLy8gYW5kIHRoZSByZXR1cm5lZCBicmVha3Mgd2lsbCBiZSBbbWluLCBtYXhdXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBuQ2xhc3NlczsgaSsrKSB7XG4gICAgICAgIGJyZWFrcy5wdXNoKGJyZWFrc1swXSArIGJyZWFrU2l6ZSAqIGkpO1xuICAgIH1cblxuICAgIC8vIHRoZSBsYXN0IGJyZWFrIHdpbGwgYWx3YXlzIGJlIHRoZVxuICAgIC8vIG1heGltdW0uXG4gICAgYnJlYWtzLnB1c2godGhlTWF4KTtcblxuICAgIHJldHVybiBicmVha3M7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogW1NhbXBsZSBjb3ZhcmlhbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYW1wbGVfbWVhbl9hbmRfc2FtcGxlQ292YXJpYW5jZSkgb2YgdHdvIGRhdGFzZXRzOlxuICogaG93IG11Y2ggZG8gdGhlIHR3byBkYXRhc2V0cyBtb3ZlIHRvZ2V0aGVyP1xuICogeCBhbmQgeSBhcmUgdHdvIGRhdGFzZXRzLCByZXByZXNlbnRlZCBhcyBhcnJheXMgb2YgbnVtYmVycy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggYSBzYW1wbGUgb2YgdHdvIG9yIG1vcmUgZGF0YSBwb2ludHNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geSBhIHNhbXBsZSBvZiB0d28gb3IgbW9yZSBkYXRhIHBvaW50c1xuICogQHRocm93cyB7RXJyb3J9IGlmIHggYW5kIHkgZG8gbm90IGhhdmUgZXF1YWwgbGVuZ3Roc1xuICogQHRocm93cyB7RXJyb3J9IGlmIHggb3IgeSBoYXZlIGxlbmd0aCBvZiBvbmUgb3IgbGVzc1xuICogQHJldHVybnMge251bWJlcn0gc2FtcGxlIGNvdmFyaWFuY2VcbiAqIEBleGFtcGxlXG4gKiBzYW1wbGVDb3ZhcmlhbmNlKFsxLCAyLCAzLCA0LCA1LCA2XSwgWzYsIDUsIDQsIDMsIDIsIDFdKTsgLy8gPT4gLTMuNVxuICovXG5mdW5jdGlvbiBzYW1wbGVDb3ZhcmlhbmNlKHggLyo6QXJyYXk8bnVtYmVyPiovLCB5IC8qOkFycmF5PG51bWJlcj4qLykvKjpudW1iZXIqLyB7XG5cbiAgICAvLyBUaGUgdHdvIGRhdGFzZXRzIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGggd2hpY2ggbXVzdCBiZSBtb3JlIHRoYW4gMVxuICAgIGlmICh4Lmxlbmd0aCAhPT0geS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzYW1wbGVDb3ZhcmlhbmNlIHJlcXVpcmVzIHNhbXBsZXMgd2l0aCBlcXVhbCBsZW5ndGhzJyk7XG4gICAgfVxuXG4gICAgaWYgKHgubGVuZ3RoIDwgMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NhbXBsZUNvdmFyaWFuY2UgcmVxdWlyZXMgYXQgbGVhc3QgdHdvIGRhdGEgcG9pbnRzIGluIGVhY2ggc2FtcGxlJyk7XG4gICAgfVxuXG4gICAgLy8gZGV0ZXJtaW5lIHRoZSBtZWFuIG9mIGVhY2ggZGF0YXNldCBzbyB0aGF0IHdlIGNhbiBqdWRnZSBlYWNoXG4gICAgLy8gdmFsdWUgb2YgdGhlIGRhdGFzZXQgZmFpcmx5IGFzIHRoZSBkaWZmZXJlbmNlIGZyb20gdGhlIG1lYW4uIHRoaXNcbiAgICAvLyB3YXksIGlmIG9uZSBkYXRhc2V0IGlzIFsxLCAyLCAzXSBhbmQgWzIsIDMsIDRdLCB0aGVpciBjb3ZhcmlhbmNlXG4gICAgLy8gZG9lcyBub3Qgc3VmZmVyIGJlY2F1c2Ugb2YgdGhlIGRpZmZlcmVuY2UgaW4gYWJzb2x1dGUgdmFsdWVzXG4gICAgdmFyIHhtZWFuID0gbWVhbih4KSxcbiAgICAgICAgeW1lYW4gPSBtZWFuKHkpLFxuICAgICAgICBzdW0gPSAwO1xuXG4gICAgLy8gZm9yIGVhY2ggcGFpciBvZiB2YWx1ZXMsIHRoZSBjb3ZhcmlhbmNlIGluY3JlYXNlcyB3aGVuIHRoZWlyXG4gICAgLy8gZGlmZmVyZW5jZSBmcm9tIHRoZSBtZWFuIGlzIGFzc29jaWF0ZWQgLSBpZiBib3RoIGFyZSB3ZWxsIGFib3ZlXG4gICAgLy8gb3IgaWYgYm90aCBhcmUgd2VsbCBiZWxvd1xuICAgIC8vIHRoZSBtZWFuLCB0aGUgY292YXJpYW5jZSBpbmNyZWFzZXMgc2lnbmlmaWNhbnRseS5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3VtICs9ICh4W2ldIC0geG1lYW4pICogKHlbaV0gLSB5bWVhbik7XG4gICAgfVxuXG4gICAgLy8gdGhpcyBpcyBCZXNzZWxzJyBDb3JyZWN0aW9uOiBhbiBhZGp1c3RtZW50IG1hZGUgdG8gc2FtcGxlIHN0YXRpc3RpY3NcbiAgICAvLyB0aGF0IGFsbG93cyBmb3IgdGhlIHJlZHVjZWQgZGVncmVlIG9mIGZyZWVkb20gZW50YWlsZWQgaW4gY2FsY3VsYXRpbmdcbiAgICAvLyB2YWx1ZXMgZnJvbSBzYW1wbGVzIHJhdGhlciB0aGFuIGNvbXBsZXRlIHBvcHVsYXRpb25zLlxuICAgIHZhciBiZXNzZWxzQ29ycmVjdGlvbiA9IHgubGVuZ3RoIC0gMTtcblxuICAgIC8vIHRoZSBjb3ZhcmlhbmNlIGlzIHdlaWdodGVkIGJ5IHRoZSBsZW5ndGggb2YgdGhlIGRhdGFzZXRzLlxuICAgIHJldHVybiBzdW0gLyBiZXNzZWxzQ29ycmVjdGlvbjtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW3NhbXBsZSB2YXJpYW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFyaWFuY2UjU2FtcGxlX3ZhcmlhbmNlKVxuICogaXMgdGhlIHN1bSBvZiBzcXVhcmVkIGRldmlhdGlvbnMgZnJvbSB0aGUgbWVhbi4gVGhlIHNhbXBsZSB2YXJpYW5jZVxuICogaXMgZGlzdGluZ3Vpc2hlZCBmcm9tIHRoZSB2YXJpYW5jZSBieSB0aGUgdXNhZ2Ugb2YgW0Jlc3NlbCdzIENvcnJlY3Rpb25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jlc3NlbCdzX2NvcnJlY3Rpb24pOlxuICogaW5zdGVhZCBvZiBkaXZpZGluZyB0aGUgc3VtIG9mIHNxdWFyZWQgZGV2aWF0aW9ucyBieSB0aGUgbGVuZ3RoIG9mIHRoZSBpbnB1dCxcbiAqIGl0IGlzIGRpdmlkZWQgYnkgdGhlIGxlbmd0aCBtaW51cyBvbmUuIFRoaXMgY29ycmVjdHMgdGhlIGJpYXMgaW4gZXN0aW1hdGluZ1xuICogYSB2YWx1ZSBmcm9tIGEgc2V0IHRoYXQgeW91IGRvbid0IGtub3cgaWYgZnVsbC5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICogKiBbV29sZnJhbSBNYXRoV29ybGQgb24gU2FtcGxlIFZhcmlhbmNlXShodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL1NhbXBsZVZhcmlhbmNlLmh0bWwpXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGEgc2FtcGxlIG9mIHR3byBvciBtb3JlIGRhdGEgcG9pbnRzXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIGxlbmd0aCBvZiB4IGlzIGxlc3MgdGhhbiAyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHNhbXBsZSB2YXJpYW5jZVxuICogQGV4YW1wbGVcbiAqIHNhbXBsZVZhcmlhbmNlKFsxLCAyLCAzLCA0LCA1XSk7IC8vID0+IDIuNVxuICovXG5mdW5jdGlvbiBzYW1wbGVWYXJpYW5jZSh4IC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcbiAgICAvLyBUaGUgdmFyaWFuY2Ugb2Ygbm8gbnVtYmVycyBpcyBudWxsXG4gICAgaWYgKHgubGVuZ3RoIDwgMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NhbXBsZVZhcmlhbmNlIHJlcXVpcmVzIGF0IGxlYXN0IHR3byBkYXRhIHBvaW50cycpO1xuICAgIH1cblxuICAgIHZhciBzdW1TcXVhcmVkRGV2aWF0aW9uc1ZhbHVlID0gc3VtTnRoUG93ZXJEZXZpYXRpb25zKHgsIDIpO1xuXG4gICAgLy8gdGhpcyBpcyBCZXNzZWxzJyBDb3JyZWN0aW9uOiBhbiBhZGp1c3RtZW50IG1hZGUgdG8gc2FtcGxlIHN0YXRpc3RpY3NcbiAgICAvLyB0aGF0IGFsbG93cyBmb3IgdGhlIHJlZHVjZWQgZGVncmVlIG9mIGZyZWVkb20gZW50YWlsZWQgaW4gY2FsY3VsYXRpbmdcbiAgICAvLyB2YWx1ZXMgZnJvbSBzYW1wbGVzIHJhdGhlciB0aGFuIGNvbXBsZXRlIHBvcHVsYXRpb25zLlxuICAgIHZhciBiZXNzZWxzQ29ycmVjdGlvbiA9IHgubGVuZ3RoIC0gMTtcblxuICAgIC8vIEZpbmQgdGhlIG1lYW4gdmFsdWUgb2YgdGhhdCBsaXN0XG4gICAgcmV0dXJuIHN1bVNxdWFyZWREZXZpYXRpb25zVmFsdWUgLyBiZXNzZWxzQ29ycmVjdGlvbjtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW3NhbXBsZSBzdGFuZGFyZCBkZXZpYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3RhbmRhcmRfZGV2aWF0aW9uI1NhbXBsZV9zdGFuZGFyZF9kZXZpYXRpb24pXG4gKiBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHNhbXBsZSB2YXJpYW5jZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggaW5wdXQgYXJyYXlcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHNhbXBsZSBzdGFuZGFyZCBkZXZpYXRpb25cbiAqIEBleGFtcGxlXG4gKiBzYW1wbGVTdGFuZGFyZERldmlhdGlvbihbMiwgNCwgNCwgNCwgNSwgNSwgNywgOV0pLnRvRml4ZWQoMik7XG4gKiAvLyA9PiAnMi4xNCdcbiAqL1xuZnVuY3Rpb24gc2FtcGxlU3RhbmRhcmREZXZpYXRpb24oeC8qOkFycmF5PG51bWJlcj4qLykvKjpudW1iZXIqLyB7XG4gICAgLy8gVGhlIHN0YW5kYXJkIGRldmlhdGlvbiBvZiBubyBudW1iZXJzIGlzIG51bGxcbiAgICB2YXIgc2FtcGxlVmFyaWFuY2VYID0gc2FtcGxlVmFyaWFuY2UoeCk7XG4gICAgcmV0dXJuIE1hdGguc3FydChzYW1wbGVWYXJpYW5jZVgpO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBbY29ycmVsYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29ycmVsYXRpb25fYW5kX2RlcGVuZGVuY2UpIGlzXG4gKiBhIG1lYXN1cmUgb2YgaG93IGNvcnJlbGF0ZWQgdHdvIGRhdGFzZXRzIGFyZSwgYmV0d2VlbiAtMSBhbmQgMVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBmaXJzdCBpbnB1dFxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB5IHNlY29uZCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gc2FtcGxlIGNvcnJlbGF0aW9uXG4gKiBAZXhhbXBsZVxuICogc2FtcGxlQ29ycmVsYXRpb24oWzEsIDIsIDMsIDQsIDUsIDZdLCBbMiwgMiwgMywgNCwgNSwgNjBdKS50b0ZpeGVkKDIpO1xuICogLy8gPT4gJzAuNjknXG4gKi9cbmZ1bmN0aW9uIHNhbXBsZUNvcnJlbGF0aW9uKHgvKjogQXJyYXk8bnVtYmVyPiAqLywgeS8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcbiAgICB2YXIgY292ID0gc2FtcGxlQ292YXJpYW5jZSh4LCB5KSxcbiAgICAgICAgeHN0ZCA9IHNhbXBsZVN0YW5kYXJkRGV2aWF0aW9uKHgpLFxuICAgICAgICB5c3RkID0gc2FtcGxlU3RhbmRhcmREZXZpYXRpb24oeSk7XG5cbiAgICByZXR1cm4gY292IC8geHN0ZCAvIHlzdGQ7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogW1NrZXduZXNzXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NrZXduZXNzKSBpc1xuICogYSBtZWFzdXJlIG9mIHRoZSBleHRlbnQgdG8gd2hpY2ggYSBwcm9iYWJpbGl0eSBkaXN0cmlidXRpb24gb2YgYVxuICogcmVhbC12YWx1ZWQgcmFuZG9tIHZhcmlhYmxlIFwibGVhbnNcIiB0byBvbmUgc2lkZSBvZiB0aGUgbWVhbi5cbiAqIFRoZSBza2V3bmVzcyB2YWx1ZSBjYW4gYmUgcG9zaXRpdmUgb3IgbmVnYXRpdmUsIG9yIGV2ZW4gdW5kZWZpbmVkLlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIHRoZSBhZGp1c3RlZCBGaXNoZXItUGVhcnNvbiBzdGFuZGFyZGl6ZWRcbiAqIG1vbWVudCBjb2VmZmljaWVudCwgd2hpY2ggaXMgdGhlIHZlcnNpb24gZm91bmQgaW4gRXhjZWwgYW5kIHNldmVyYWxcbiAqIHN0YXRpc3RpY2FsIHBhY2thZ2VzIGluY2x1ZGluZyBNaW5pdGFiLCBTQVMgYW5kIFNQU1MuXG4gKlxuICogQHNpbmNlIDQuMS4wXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggYSBzYW1wbGUgb2YgMyBvciBtb3JlIGRhdGEgcG9pbnRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBzYW1wbGUgc2tld25lc3NcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB4IGhhcyBsZW5ndGggbGVzcyB0aGFuIDNcbiAqIEBleGFtcGxlXG4gKiBzYW1wbGVTa2V3bmVzcyhbMiwgNCwgNiwgMywgMV0pOyAvLyA9PiAwLjU5MDEyODY1NjM4NDM2NVxuICovXG5mdW5jdGlvbiBzYW1wbGVTa2V3bmVzcyh4IC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcblxuICAgIGlmICh4Lmxlbmd0aCA8IDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzYW1wbGVTa2V3bmVzcyByZXF1aXJlcyBhdCBsZWFzdCB0aHJlZSBkYXRhIHBvaW50cycpO1xuICAgIH1cblxuICAgIHZhciBtZWFuVmFsdWUgPSBtZWFuKHgpO1xuICAgIHZhciB0ZW1wVmFsdWU7XG4gICAgdmFyIHN1bVNxdWFyZWREZXZpYXRpb25zID0gMDtcbiAgICB2YXIgc3VtQ3ViZWREZXZpYXRpb25zID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgICB0ZW1wVmFsdWUgPSB4W2ldIC0gbWVhblZhbHVlO1xuICAgICAgICBzdW1TcXVhcmVkRGV2aWF0aW9ucyArPSB0ZW1wVmFsdWUgKiB0ZW1wVmFsdWU7XG4gICAgICAgIHN1bUN1YmVkRGV2aWF0aW9ucyArPSB0ZW1wVmFsdWUgKiB0ZW1wVmFsdWUgKiB0ZW1wVmFsdWU7XG4gICAgfVxuXG4gICAgLy8gdGhpcyBpcyBCZXNzZWxzJyBDb3JyZWN0aW9uOiBhbiBhZGp1c3RtZW50IG1hZGUgdG8gc2FtcGxlIHN0YXRpc3RpY3NcbiAgICAvLyB0aGF0IGFsbG93cyBmb3IgdGhlIHJlZHVjZWQgZGVncmVlIG9mIGZyZWVkb20gZW50YWlsZWQgaW4gY2FsY3VsYXRpbmdcbiAgICAvLyB2YWx1ZXMgZnJvbSBzYW1wbGVzIHJhdGhlciB0aGFuIGNvbXBsZXRlIHBvcHVsYXRpb25zLlxuICAgIHZhciBiZXNzZWxzQ29ycmVjdGlvbiA9IHgubGVuZ3RoIC0gMTtcblxuICAgIC8vIEZpbmQgdGhlIG1lYW4gdmFsdWUgb2YgdGhhdCBsaXN0XG4gICAgdmFyIHRoZVNhbXBsZVN0YW5kYXJkRGV2aWF0aW9uID0gTWF0aC5zcXJ0KHN1bVNxdWFyZWREZXZpYXRpb25zIC8gYmVzc2Vsc0NvcnJlY3Rpb24pO1xuXG4gICAgdmFyIG4gPSB4Lmxlbmd0aCxcbiAgICAgICAgY3ViZWRTID0gTWF0aC5wb3codGhlU2FtcGxlU3RhbmRhcmREZXZpYXRpb24sIDMpO1xuXG4gICAgcmV0dXJuIG4gKiBzdW1DdWJlZERldmlhdGlvbnMgLyAoKG4gLSAxKSAqIChuIC0gMikgKiBjdWJlZFMpO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFtLdXJ0b3Npc10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LdXJ0b3NpcykgaXNcbiAqIGEgbWVhc3VyZSBvZiB0aGUgaGVhdmluZXNzIG9mIGEgZGlzdHJpYnV0aW9uJ3MgdGFpbHMgcmVsYXRpdmUgdG8gaXRzXG4gKiB2YXJpYW5jZS4gVGhlIGt1cnRvc2lzIHZhbHVlIGNhbiBiZSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSwgb3IgZXZlbiB1bmRlZmluZWQuXG4gKlxuICogSW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gRmlzaGVyJ3MgZXhjZXNzIGt1cnRvc2lzIGRlZmluaXRpb24gYW5kIHVzZXNcbiAqIHVuYmlhc2VkIG1vbWVudCBlc3RpbWF0b3JzLiBUaGlzIGlzIHRoZSB2ZXJzaW9uIGZvdW5kIGluIEV4Y2VsIGFuZCBhdmFpbGFibGVcbiAqIGluIHNldmVyYWwgc3RhdGlzdGljYWwgcGFja2FnZXMsIGluY2x1ZGluZyBTQVMgYW5kIFNjaVB5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBhIHNhbXBsZSBvZiA0IG9yIG1vcmUgZGF0YSBwb2ludHNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHNhbXBsZSBrdXJ0b3Npc1xuICogQHRocm93cyB7RXJyb3J9IGlmIHggaGFzIGxlbmd0aCBsZXNzIHRoYW4gNFxuICogQGV4YW1wbGVcbiAqIHNhbXBsZUt1cnRvc2lzKFsxLCAyLCAyLCAzLCA1XSk7IC8vID0+IDEuNDU1NTc2NTU5NTQ2MzEyMlxuICovXG5mdW5jdGlvbiBzYW1wbGVLdXJ0b3Npcyh4IC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcblxuICAgIHZhciBuID0geC5sZW5ndGg7XG5cbiAgICBpZiAobiA8IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzYW1wbGVLdXJ0b3NpcyByZXF1aXJlcyBhdCBsZWFzdCBmb3VyIGRhdGEgcG9pbnRzJyk7XG4gICAgfVxuXG4gICAgdmFyIG1lYW5WYWx1ZSA9IG1lYW4oeCk7XG4gICAgdmFyIHRlbXBWYWx1ZTtcbiAgICB2YXIgc2Vjb25kQ2VudHJhbE1vbWVudCA9IDA7XG4gICAgdmFyIGZvdXJ0aENlbnRyYWxNb21lbnQgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdGVtcFZhbHVlID0geFtpXSAtIG1lYW5WYWx1ZTtcbiAgICAgICAgc2Vjb25kQ2VudHJhbE1vbWVudCArPSB0ZW1wVmFsdWUgKiB0ZW1wVmFsdWU7XG4gICAgICAgIGZvdXJ0aENlbnRyYWxNb21lbnQgKz0gdGVtcFZhbHVlICogdGVtcFZhbHVlICogdGVtcFZhbHVlICogdGVtcFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiAobiAtIDEpIC8gKChuIC0gMikgKiAobiAtIDMpKSAqXG4gICAgICAgIChuICogKG4gKyAxKSAqIGZvdXJ0aENlbnRyYWxNb21lbnQgLyAoc2Vjb25kQ2VudHJhbE1vbWVudCAqIHNlY29uZENlbnRyYWxNb21lbnQpIC0gMyAqIChuIC0gMSkpO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIFtIZWFwJ3MgQWxnb3JpdGhtXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IZWFwJTI3c19hbGdvcml0aG0pXG4gKiBmb3IgZ2VuZXJhdGluZyBwZXJtdXRhdGlvbnMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZWxlbWVudHMgYW55IHR5cGUgb2YgZGF0YVxuICogQHJldHVybnMge0FycmF5PEFycmF5Pn0gYXJyYXkgb2YgcGVybXV0YXRpb25zXG4gKi9cbmZ1bmN0aW9uIHBlcm11dGF0aW9uc0hlYXAvKjo6IDxUPiAqLyhlbGVtZW50cyAvKjogQXJyYXk8VD4gKi8pLyo6IEFycmF5PEFycmF5PFQ+PiAqLyB7XG4gICAgdmFyIGluZGV4ZXMgPSBuZXcgQXJyYXkoZWxlbWVudHMubGVuZ3RoKTtcbiAgICB2YXIgcGVybXV0YXRpb25zID0gW2VsZW1lbnRzLnNsaWNlKCldO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbmRleGVzW2ldID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOykge1xuICAgICAgICBpZiAoaW5kZXhlc1tpXSA8IGkpIHtcblxuICAgICAgICAgICAgLy8gQXQgb2RkIGluZGV4ZXMsIHN3YXAgZnJvbSBpbmRleGVzW2ldIGluc3RlYWRcbiAgICAgICAgICAgIC8vIG9mIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcbiAgICAgICAgICAgIHZhciBzd2FwRnJvbSA9IDA7XG4gICAgICAgICAgICBpZiAoaSAlIDIgIT09IDApIHtcbiAgICAgICAgICAgICAgICBzd2FwRnJvbSA9IGluZGV4ZXNbaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHN3YXAgYmV0d2VlbiBzd2FwRnJvbSBhbmQgaSwgdXNpbmdcbiAgICAgICAgICAgIC8vIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIGFzIHN0b3JhZ2UuXG4gICAgICAgICAgICB2YXIgdGVtcCA9IGVsZW1lbnRzW3N3YXBGcm9tXTtcbiAgICAgICAgICAgIGVsZW1lbnRzW3N3YXBGcm9tXSA9IGVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgZWxlbWVudHNbaV0gPSB0ZW1wO1xuXG4gICAgICAgICAgICBwZXJtdXRhdGlvbnMucHVzaChlbGVtZW50cy5zbGljZSgpKTtcbiAgICAgICAgICAgIGluZGV4ZXNbaV0rKztcbiAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleGVzW2ldID0gMDtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwZXJtdXRhdGlvbnM7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgQ29tYmluYXRpb25zXG4gKiBDb21iaW5hdGlvbnMgYXJlIHVuaXF1ZSBzdWJzZXRzIG9mIGEgY29sbGVjdGlvbiAtIGluIHRoaXMgY2FzZSwgayB4IGZyb20gYSBjb2xsZWN0aW9uIGF0IGEgdGltZS5cbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmF0aW9uXG4gKiBAcGFyYW0ge0FycmF5fSB4IGFueSB0eXBlIG9mIGRhdGFcbiAqIEBwYXJhbSB7aW50fSBrIHRoZSBudW1iZXIgb2Ygb2JqZWN0cyBpbiBlYWNoIGdyb3VwICh3aXRob3V0IHJlcGxhY2VtZW50KVxuICogQHJldHVybnMge0FycmF5PEFycmF5Pn0gYXJyYXkgb2YgcGVybXV0YXRpb25zXG4gKiBAZXhhbXBsZVxuICogY29tYmluYXRpb25zKFsxLCAyLCAzXSwgMik7IC8vID0+IFtbMSwyXSwgWzEsM10sIFsyLDNdXVxuICovXG5cbmZ1bmN0aW9uIGNvbWJpbmF0aW9ucyhcbiAgICB4Lyo6IEFycmF5PGFueT4gKi8sXG4gICAgay8qOiBudW1iZXIgKi8pLyo6IEFycmF5PEFycmF5PGFueT4+ICovIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgc3ViSTtcbiAgICB2YXIgY29tYmluYXRpb25MaXN0ID0gW107XG4gICAgdmFyIHN1YnNldENvbWJpbmF0aW9ucztcbiAgICB2YXIgbmV4dDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChrID09PSAxKSB7XG4gICAgICAgICAgICBjb21iaW5hdGlvbkxpc3QucHVzaChbeFtpXV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3Vic2V0Q29tYmluYXRpb25zID0gY29tYmluYXRpb25zKHguc2xpY2UoIGkgKyAxLCB4Lmxlbmd0aCApLCBrIC0gMSk7XG4gICAgICAgICAgICBmb3IgKHN1YkkgPSAwOyBzdWJJIDwgc3Vic2V0Q29tYmluYXRpb25zLmxlbmd0aDsgc3ViSSsrKSB7XG4gICAgICAgICAgICAgICAgbmV4dCA9IHN1YnNldENvbWJpbmF0aW9uc1tzdWJJXTtcbiAgICAgICAgICAgICAgICBuZXh0LnVuc2hpZnQoeFtpXSk7XG4gICAgICAgICAgICAgICAgY29tYmluYXRpb25MaXN0LnB1c2gobmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbWJpbmF0aW9uTGlzdDtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBbQ29tYmluYXRpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5hdGlvbikgd2l0aCByZXBsYWNlbWVudFxuICogQ29tYmluYXRpb25zIGFyZSB1bmlxdWUgc3Vic2V0cyBvZiBhIGNvbGxlY3Rpb24gLSBpbiB0aGlzIGNhc2UsIGsgeCBmcm9tIGEgY29sbGVjdGlvbiBhdCBhIHRpbWUuXG4gKiAnV2l0aCByZXBsYWNlbWVudCcgbWVhbnMgdGhhdCBhIGdpdmVuIGVsZW1lbnQgY2FuIGJlIGNob3NlbiBtdWx0aXBsZSB0aW1lcy5cbiAqIFVubGlrZSBwZXJtdXRhdGlvbiwgb3JkZXIgZG9lc24ndCBtYXR0ZXIgZm9yIGNvbWJpbmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSB4IGFueSB0eXBlIG9mIGRhdGFcbiAqIEBwYXJhbSB7aW50fSBrIHRoZSBudW1iZXIgb2Ygb2JqZWN0cyBpbiBlYWNoIGdyb3VwICh3aXRob3V0IHJlcGxhY2VtZW50KVxuICogQHJldHVybnMge0FycmF5PEFycmF5Pn0gYXJyYXkgb2YgcGVybXV0YXRpb25zXG4gKiBAZXhhbXBsZVxuICogY29tYmluYXRpb25zUmVwbGFjZW1lbnQoWzEsIDJdLCAyKTsgLy8gPT4gW1sxLCAxXSwgWzEsIDJdLCBbMiwgMl1dXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmF0aW9uc1JlcGxhY2VtZW50KFxuICAgIHggLyo6IEFycmF5PGFueT4gKi8sXG4gICAgayAvKjogbnVtYmVyICovKS8qOiBBcnJheTxBcnJheTxhbnk+PiAqLyB7XG5cbiAgICB2YXIgY29tYmluYXRpb25MaXN0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGsgPT09IDEpIHtcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIHJlcXVlc3RlZCB0byBmaW5kIG9ubHkgb25lIGVsZW1lbnQsIHdlIGRvbid0IG5lZWRcbiAgICAgICAgICAgIC8vIHRvIHJlY3Vyc2U6IGp1c3QgcHVzaCBgeFtpXWAgb250byB0aGUgbGlzdCBvZiBjb21iaW5hdGlvbnMuXG4gICAgICAgICAgICBjb21iaW5hdGlvbkxpc3QucHVzaChbeFtpXV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCByZWN1cnNpdmVseSBmaW5kIGNvbWJpbmF0aW9ucywgZ2l2ZW4gYGsgLSAxYC4gTm90ZSB0aGF0XG4gICAgICAgICAgICAvLyB3ZSByZXF1ZXN0IGBrIC0gMWAsIHNvIGlmIHlvdSB3ZXJlIGxvb2tpbmcgZm9yIGs9MyBjb21iaW5hdGlvbnMsIHdlJ3JlXG4gICAgICAgICAgICAvLyByZXF1ZXN0aW5nIGs9Mi4gVGhpcyAtMSBnZXRzIHJldmVyc2VkIGluIHRoZSBmb3IgbG9vcCByaWdodCBhZnRlciB0aGlzXG4gICAgICAgICAgICAvLyBjb2RlLCBzaW5jZSB3ZSBjb25jYXRlbmF0ZSBgeFtpXWAgb250byB0aGUgc2VsZWN0ZWQgY29tYmluYXRpb25zLFxuICAgICAgICAgICAgLy8gYnJpbmdpbmcgYGtgIGJhY2sgdXAgdG8geW91ciByZXF1ZXN0ZWQgbGV2ZWwuXG4gICAgICAgICAgICAvLyBUaGlzIHJlY3Vyc2lvbiBtYXkgZ28gbWFueSBsZXZlbHMgZGVlcCwgc2luY2UgaXQgb25seSBzdG9wcyBvbmNlXG4gICAgICAgICAgICAvLyBrPTEuXG4gICAgICAgICAgICB2YXIgc3Vic2V0Q29tYmluYXRpb25zID0gY29tYmluYXRpb25zUmVwbGFjZW1lbnQoXG4gICAgICAgICAgICAgICAgeC5zbGljZShpLCB4Lmxlbmd0aCksXG4gICAgICAgICAgICAgICAgayAtIDEpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN1YnNldENvbWJpbmF0aW9ucy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbWJpbmF0aW9uTGlzdC5wdXNoKFt4W2ldXVxuICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHN1YnNldENvbWJpbmF0aW9uc1tqXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbWJpbmF0aW9uTGlzdDtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBXaGVuIGFkZGluZyBhIG5ldyB2YWx1ZSB0byBhIGxpc3QsIG9uZSBkb2VzIG5vdCBoYXZlIHRvIG5lY2Vzc2FyeVxuICogcmVjb21wdXRlIHRoZSBtZWFuIG9mIHRoZSBsaXN0IGluIGxpbmVhciB0aW1lLiBUaGV5IGNhbiBpbnN0ZWFkIHVzZVxuICogdGhpcyBmdW5jdGlvbiB0byBjb21wdXRlIHRoZSBuZXcgbWVhbiBieSBwcm92aWRpbmcgdGhlIGN1cnJlbnQgbWVhbixcbiAqIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGxpc3QgdGhhdCBwcm9kdWNlZCBpdCBhbmQgdGhlIG5ld1xuICogdmFsdWUgdG8gYWRkLlxuICpcbiAqIEBzaW5jZSAyLjUuMFxuICogQHBhcmFtIHtudW1iZXJ9IG1lYW4gY3VycmVudCBtZWFuXG4gKiBAcGFyYW0ge251bWJlcn0gbiBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIGxpc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdWYWx1ZSB0aGUgYWRkZWQgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBuZXcgbWVhblxuICpcbiAqIEBleGFtcGxlXG4gKiBhZGRUb01lYW4oMTQsIDUsIDUzKTsgLy8gPT4gMjAuNVxuICovXG5mdW5jdGlvbiBhZGRUb01lYW4obWVhbiAvKjogbnVtYmVyKi8sIG4vKjogbnVtYmVyICovLCBuZXdWYWx1ZS8qOiBudW1iZXIgKi8pLyo6IG51bWJlciAqLyB7XG4gICAgcmV0dXJuIG1lYW4gKyAoKG5ld1ZhbHVlIC0gbWVhbikgLyAobiArIDEpKTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBXaGVuIGNvbWJpbmluZyB0d28gbGlzdHMgb2YgdmFsdWVzIGZvciB3aGljaCBvbmUgYWxyZWFkeSBrbm93cyB0aGUgbWVhbnMsXG4gKiBvbmUgZG9lcyBub3QgaGF2ZSB0byBuZWNlc3NhcnkgcmVjb21wdXRlIHRoZSBtZWFuIG9mIHRoZSBjb21iaW5lZCBsaXN0cyBpblxuICogbGluZWFyIHRpbWUuIFRoZXkgY2FuIGluc3RlYWQgdXNlIHRoaXMgZnVuY3Rpb24gdG8gY29tcHV0ZSB0aGUgY29tYmluZWRcbiAqIG1lYW4gYnkgcHJvdmlkaW5nIHRoZSBtZWFuICYgbnVtYmVyIG9mIHZhbHVlcyBvZiB0aGUgZmlyc3QgbGlzdCBhbmQgdGhlIG1lYW5cbiAqICYgbnVtYmVyIG9mIHZhbHVlcyBvZiB0aGUgc2Vjb25kIGxpc3QuXG4gKlxuICogQHNpbmNlIDMuMC4wXG4gKiBAcGFyYW0ge251bWJlcn0gbWVhbjEgbWVhbiBvZiB0aGUgZmlyc3QgbGlzdFxuICogQHBhcmFtIHtudW1iZXJ9IG4xIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgZmlyc3QgbGlzdFxuICogQHBhcmFtIHtudW1iZXJ9IG1lYW4yIG1lYW4gb2YgdGhlIHNlY29uZCBsaXN0XG4gKiBAcGFyYW0ge251bWJlcn0gbjIgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBzZWNvbmQgbGlzdFxuICogQHJldHVybnMge251bWJlcn0gdGhlIGNvbWJpbmVkIG1lYW5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29tYmluZU1lYW5zKDUsIDMsIDQsIDMpOyAvLyA9PiA0LjVcbiAqL1xuZnVuY3Rpb24gY29tYmluZU1lYW5zKG1lYW4xIC8qOiBudW1iZXIqLywgbjEvKjogbnVtYmVyICovLCBtZWFuMiAvKjogbnVtYmVyKi8sIG4yLyo6IG51bWJlciAqLykvKjogbnVtYmVyICovIHtcbiAgICByZXR1cm4gKG1lYW4xICogbjEgKyBtZWFuMiAqIG4yKSAvIChuMSArIG4yKTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBXaGVuIGNvbWJpbmluZyB0d28gbGlzdHMgb2YgdmFsdWVzIGZvciB3aGljaCBvbmUgYWxyZWFkeSBrbm93cyB0aGUgdmFyaWFuY2VzLFxuICogb25lIGRvZXMgbm90IGhhdmUgdG8gbmVjZXNzYXJ5IHJlY29tcHV0ZSB0aGUgdmFyaWFuY2Ugb2YgdGhlIGNvbWJpbmVkIGxpc3RzXG4gKiBpbiBsaW5lYXIgdGltZS4gVGhleSBjYW4gaW5zdGVhZCB1c2UgdGhpcyBmdW5jdGlvbiB0byBjb21wdXRlIHRoZSBjb21iaW5lZFxuICogdmFyaWFuY2UgYnkgcHJvdmlkaW5nIHRoZSB2YXJpYW5jZSwgbWVhbiAmIG51bWJlciBvZiB2YWx1ZXMgb2YgdGhlIGZpcnN0IGxpc3RcbiAqIGFuZCB0aGUgdmFyaWFuY2UsIG1lYW4gJiBudW1iZXIgb2YgdmFsdWVzIG9mIHRoZSBzZWNvbmQgbGlzdC5cbiAqXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YXJpYW5jZTEgdmFyaWFuY2Ugb2YgdGhlIGZpcnN0IGxpc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBtZWFuMSBtZWFuIG9mIHRoZSBmaXJzdCBsaXN0XG4gKiBAcGFyYW0ge251bWJlcn0gbjEgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBmaXJzdCBsaXN0XG4gKiBAcGFyYW0ge251bWJlcn0gdmFyaWFuY2UyIHZhcmlhbmNlIG9mIHRoZSBzZWNvbmQgbGlzdFxuICogQHBhcmFtIHtudW1iZXJ9IG1lYW4yIG1lYW4gb2YgdGhlIHNlY29uZCBsaXN0XG4gKiBAcGFyYW0ge251bWJlcn0gbjIgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBzZWNvbmQgbGlzdFxuICogQHJldHVybnMge251bWJlcn0gdGhlIGNvbWJpbmVkIG1lYW5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29tYmluZVZhcmlhbmNlcygxNCAvIDMsIDUsIDMsIDggLyAzLCA0LCAzKTsgLy8gPT4gNDcgLyAxMlxuICovXG5mdW5jdGlvbiBjb21iaW5lVmFyaWFuY2VzKFxuICAgIHZhcmlhbmNlMSAvKjogbnVtYmVyKi8sXG4gICAgbWVhbjEgLyo6IG51bWJlciovLFxuICAgIG4xLyo6IG51bWJlciAqLyxcbiAgICB2YXJpYW5jZTIgLyo6IG51bWJlciovLFxuICAgIG1lYW4yIC8qOiBudW1iZXIqLyxcbiAgICBuMi8qOiBudW1iZXIgKi8pLyo6IG51bWJlciAqLyB7XG5cbiAgICB2YXIgbmV3TWVhbiA9IGNvbWJpbmVNZWFucyhtZWFuMSwgbjEsIG1lYW4yLCBuMik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICBuMSAqICh2YXJpYW5jZTEgKyBNYXRoLnBvdyhtZWFuMSAtIG5ld01lYW4sIDIpKSArXG4gICAgICAgIG4yICogKHZhcmlhbmNlMiArIE1hdGgucG93KG1lYW4yIC0gbmV3TWVhbiwgMikpXG4gICAgKSAvIChuMSArIG4yKTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW0dlb21ldHJpYyBNZWFuXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HZW9tZXRyaWNfbWVhbikgaXNcbiAqIGEgbWVhbiBmdW5jdGlvbiB0aGF0IGlzIG1vcmUgdXNlZnVsIGZvciBudW1iZXJzIGluIGRpZmZlcmVudFxuICogcmFuZ2VzLlxuICpcbiAqIFRoaXMgaXMgdGhlIG50aCByb290IG9mIHRoZSBpbnB1dCBudW1iZXJzIG11bHRpcGxpZWQgYnkgZWFjaCBvdGhlci5cbiAqXG4gKiBUaGUgZ2VvbWV0cmljIG1lYW4gaXMgb2Z0ZW4gdXNlZnVsIGZvclxuICogKipbcHJvcG9ydGlvbmFsIGdyb3d0aF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR2VvbWV0cmljX21lYW4jUHJvcG9ydGlvbmFsX2dyb3d0aCkqKjogZ2l2ZW5cbiAqIGdyb3d0aCByYXRlcyBmb3IgbXVsdGlwbGUgeWVhcnMsIGxpa2UgXzgwJSwgMTYuNjYlIGFuZCA0Mi44NSVfLCBhIHNpbXBsZVxuICogbWVhbiB3aWxsIGluY29ycmVjdGx5IGVzdGltYXRlIGFuIGF2ZXJhZ2UgZ3Jvd3RoIHJhdGUsIHdoZXJlYXMgYSBnZW9tZXRyaWNcbiAqIG1lYW4gd2lsbCBjb3JyZWN0bHkgZXN0aW1hdGUgYSBncm93dGggcmF0ZSB0aGF0LCBvdmVyIHRob3NlIHllYXJzLFxuICogd2lsbCB5aWVsZCB0aGUgc2FtZSBlbmQgdmFsdWUuXG4gKlxuICogVGhpcyBydW5zIG9uIGBPKG4pYCwgbGluZWFyIHRpbWUgaW4gcmVzcGVjdCB0byB0aGUgYXJyYXlcbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggc2FtcGxlIG9mIG9uZSBvciBtb3JlIGRhdGEgcG9pbnRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBnZW9tZXRyaWMgbWVhblxuICogQHRocm93cyB7RXJyb3J9IGlmIHggaXMgZW1wdHlcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB4IGNvbnRhaW5zIGEgbmVnYXRpdmUgbnVtYmVyXG4gKiBAZXhhbXBsZVxuICogdmFyIGdyb3d0aFJhdGVzID0gWzEuODAsIDEuMTY2NjY2LCAxLjQyODU3MV07XG4gKiB2YXIgYXZlcmFnZUdyb3d0aCA9IHNzLmdlb21ldHJpY01lYW4oZ3Jvd3RoUmF0ZXMpO1xuICogdmFyIGF2ZXJhZ2VHcm93dGhSYXRlcyA9IFthdmVyYWdlR3Jvd3RoLCBhdmVyYWdlR3Jvd3RoLCBhdmVyYWdlR3Jvd3RoXTtcbiAqIHZhciBzdGFydGluZ1ZhbHVlID0gMTA7XG4gKiB2YXIgc3RhcnRpbmdWYWx1ZU1lYW4gPSAxMDtcbiAqIGdyb3d0aFJhdGVzLmZvckVhY2goZnVuY3Rpb24ocmF0ZSkge1xuICogICBzdGFydGluZ1ZhbHVlICo9IHJhdGU7XG4gKiB9KTtcbiAqIGF2ZXJhZ2VHcm93dGhSYXRlcy5mb3JFYWNoKGZ1bmN0aW9uKHJhdGUpIHtcbiAqICAgc3RhcnRpbmdWYWx1ZU1lYW4gKj0gcmF0ZTtcbiAqIH0pO1xuICogc3RhcnRpbmdWYWx1ZU1lYW4gPT09IHN0YXJ0aW5nVmFsdWU7XG4gKi9cbmZ1bmN0aW9uIGdlb21ldHJpY01lYW4oeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjogbnVtYmVyICovIHtcbiAgICAvLyBUaGUgbWVhbiBvZiBubyBudW1iZXJzIGlzIG51bGxcbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZW9tZXRyaWNNZWFuIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBkYXRhIHBvaW50Jyk7XG4gICAgfVxuXG4gICAgLy8gdGhlIHN0YXJ0aW5nIHZhbHVlLlxuICAgIHZhciB2YWx1ZSA9IDE7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gdGhlIGdlb21ldHJpYyBtZWFuIGlzIG9ubHkgdmFsaWQgZm9yIHBvc2l0aXZlIG51bWJlcnNcbiAgICAgICAgaWYgKHhbaV0gPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZW9tZXRyaWNNZWFuIHJlcXVpcmVzIG9ubHkgcG9zaXRpdmUgbnVtYmVycyBhcyBpbnB1dCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwZWF0ZWRseSBtdWx0aXBseSB0aGUgdmFsdWUgYnkgZWFjaCBudW1iZXJcbiAgICAgICAgdmFsdWUgKj0geFtpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5wb3codmFsdWUsIDEgLyB4Lmxlbmd0aCk7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFtIYXJtb25pYyBNZWFuXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYXJtb25pY19tZWFuKSBpc1xuICogYSBtZWFuIGZ1bmN0aW9uIHR5cGljYWxseSB1c2VkIHRvIGZpbmQgdGhlIGF2ZXJhZ2Ugb2YgcmF0ZXMuXG4gKiBUaGlzIG1lYW4gaXMgY2FsY3VsYXRlZCBieSB0YWtpbmcgdGhlIHJlY2lwcm9jYWwgb2YgdGhlIGFyaXRobWV0aWMgbWVhblxuICogb2YgdGhlIHJlY2lwcm9jYWxzIG9mIHRoZSBpbnB1dCBudW1iZXJzLlxuICpcbiAqIFRoaXMgaXMgYSBbbWVhc3VyZSBvZiBjZW50cmFsIHRlbmRlbmN5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DZW50cmFsX3RlbmRlbmN5KTpcbiAqIGEgbWV0aG9kIG9mIGZpbmRpbmcgYSB0eXBpY2FsIG9yIGNlbnRyYWwgdmFsdWUgb2YgYSBzZXQgb2YgbnVtYmVycy5cbiAqXG4gKiBUaGlzIHJ1bnMgb24gYE8obilgLCBsaW5lYXIgdGltZSBpbiByZXNwZWN0IHRvIHRoZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggc2FtcGxlIG9mIG9uZSBvciBtb3JlIGRhdGEgcG9pbnRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBoYXJtb25pYyBtZWFuXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgeCBpcyBlbXB0eVxuICogQHRocm93cyB7RXJyb3J9IGlmIHggY29udGFpbnMgYSBuZWdhdGl2ZSBudW1iZXJcbiAqIEBleGFtcGxlXG4gKiBoYXJtb25pY01lYW4oWzIsIDNdKS50b0ZpeGVkKDIpIC8vID0+ICcyLjQwJ1xuICovXG5mdW5jdGlvbiBoYXJtb25pY01lYW4oeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjogbnVtYmVyICovIHtcbiAgICAvLyBUaGUgbWVhbiBvZiBubyBudW1iZXJzIGlzIG51bGxcbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoYXJtb25pY01lYW4gcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGRhdGEgcG9pbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgcmVjaXByb2NhbFN1bSA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gdGhlIGhhcm1vbmljIG1lYW4gaXMgb25seSB2YWxpZCBmb3IgcG9zaXRpdmUgbnVtYmVyc1xuICAgICAgICBpZiAoeFtpXSA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hhcm1vbmljTWVhbiByZXF1aXJlcyBvbmx5IHBvc2l0aXZlIG51bWJlcnMgYXMgaW5wdXQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlY2lwcm9jYWxTdW0gKz0gMSAvIHhbaV07XG4gICAgfVxuXG4gICAgLy8gZGl2aWRlIG4gYnkgdGhlIHRoZSByZWNpcHJvY2FsIHN1bVxuICAgIHJldHVybiB4Lmxlbmd0aCAvIHJlY2lwcm9jYWxTdW07XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFttZWRpYW5dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVkaWFuKSBpc1xuICogdGhlIG1pZGRsZSBudW1iZXIgb2YgYSBsaXN0LiBUaGlzIGlzIG9mdGVuIGEgZ29vZCBpbmRpY2F0b3Igb2YgJ3RoZSBtaWRkbGUnXG4gKiB3aGVuIHRoZXJlIGFyZSBvdXRsaWVycyB0aGF0IHNrZXcgdGhlIGBtZWFuKClgIHZhbHVlLlxuICogVGhpcyBpcyBhIFttZWFzdXJlIG9mIGNlbnRyYWwgdGVuZGVuY3ldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NlbnRyYWxfdGVuZGVuY3kpOlxuICogYSBtZXRob2Qgb2YgZmluZGluZyBhIHR5cGljYWwgb3IgY2VudHJhbCB2YWx1ZSBvZiBhIHNldCBvZiBudW1iZXJzLlxuICpcbiAqIFRoZSBtZWRpYW4gaXNuJ3QgbmVjZXNzYXJpbHkgb25lIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgbGlzdDogdGhlIHZhbHVlXG4gKiBjYW4gYmUgdGhlIGF2ZXJhZ2Ugb2YgdHdvIGVsZW1lbnRzIGlmIHRoZSBsaXN0IGhhcyBhbiBldmVuIGxlbmd0aFxuICogYW5kIHRoZSB0d28gY2VudHJhbCB2YWx1ZXMgYXJlIGRpZmZlcmVudC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNvcnRlZCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gbWVkaWFuIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogbWVkaWFuU29ydGVkKFsxMCwgMiwgNSwgMTAwLCAyLCAxXSk7IC8vID0+IDUyLjVcbiAqL1xuZnVuY3Rpb24gbWVkaWFuU29ydGVkKHNvcnRlZCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgcmV0dXJuIHF1YW50aWxlU29ydGVkKHNvcnRlZCwgMC41KTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBXaGVuIHJlbW92aW5nIGEgdmFsdWUgZnJvbSBhIGxpc3QsIG9uZSBkb2VzIG5vdCBoYXZlIHRvIG5lY2Vzc2FyeVxuICogcmVjb21wdXRlIHRoZSBtZWFuIG9mIHRoZSBsaXN0IGluIGxpbmVhciB0aW1lLiBUaGV5IGNhbiBpbnN0ZWFkIHVzZVxuICogdGhpcyBmdW5jdGlvbiB0byBjb21wdXRlIHRoZSBuZXcgbWVhbiBieSBwcm92aWRpbmcgdGhlIGN1cnJlbnQgbWVhbixcbiAqIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGxpc3QgdGhhdCBwcm9kdWNlZCBpdCBhbmQgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBwYXJhbSB7bnVtYmVyfSBtZWFuIGN1cnJlbnQgbWVhblxuICogQHBhcmFtIHtudW1iZXJ9IG4gbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBsaXN0XG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdGhlIHZhbHVlIHRvIHJlbW92ZVxuICogQHJldHVybnMge251bWJlcn0gdGhlIG5ldyBtZWFuXG4gKlxuICogQGV4YW1wbGVcbiAqIHN1YnRyYWN0RnJvbU1lYW4oMjAuNSwgNiwgNTMpOyAvLyA9PiAxNFxuICovXG5mdW5jdGlvbiBzdWJ0cmFjdEZyb21NZWFuKG1lYW4gLyo6IG51bWJlciovLCBuLyo6IG51bWJlciAqLywgdmFsdWUvKjogbnVtYmVyICovKS8qOiBudW1iZXIgKi8ge1xuICAgIHJldHVybiAoKG1lYW4gKiBuKSAtIHZhbHVlKSAvIChuIC0gMSk7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFJvb3QgTWVhbiBTcXVhcmUgKFJNUykgaXNcbiAqIGEgbWVhbiBmdW5jdGlvbiB1c2VkIGFzIGEgbWVhc3VyZSBvZiB0aGUgbWFnbml0dWRlIG9mIGEgc2V0XG4gKiBvZiBudW1iZXJzLCByZWdhcmRsZXNzIG9mIHRoZWlyIHNpZ24uXG4gKiBUaGlzIGlzIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgbWVhbiBvZiB0aGUgc3F1YXJlcyBvZiB0aGVcbiAqIGlucHV0IG51bWJlcnMuXG4gKiBUaGlzIHJ1bnMgb24gYE8obilgLCBsaW5lYXIgdGltZSBpbiByZXNwZWN0IHRvIHRoZSBhcnJheVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBhIHNhbXBsZSBvZiBvbmUgb3IgbW9yZSBkYXRhIHBvaW50c1xuICogQHJldHVybnMge251bWJlcn0gcm9vdCBtZWFuIHNxdWFyZVxuICogQHRocm93cyB7RXJyb3J9IGlmIHggaXMgZW1wdHlcbiAqIEBleGFtcGxlXG4gKiByb290TWVhblNxdWFyZShbLTEsIDEsIC0xLCAxXSk7IC8vID0+IDFcbiAqL1xuZnVuY3Rpb24gcm9vdE1lYW5TcXVhcmUoeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgaWYgKHgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncm9vdE1lYW5TcXVhcmUgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGRhdGEgcG9pbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgc3VtT2ZTcXVhcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3VtT2ZTcXVhcmVzICs9IE1hdGgucG93KHhbaV0sIDIpO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLnNxcnQoc3VtT2ZTcXVhcmVzIC8geC5sZW5ndGgpO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdG8gY29tcHV0ZSBbYSBvbmUtc2FtcGxlIHQtdGVzdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3R1ZGVudCUyN3NfdC10ZXN0I09uZS1zYW1wbGVfdC10ZXN0KSwgY29tcGFyaW5nIHRoZSBtZWFuXG4gKiBvZiBhIHNhbXBsZSB0byBhIGtub3duIHZhbHVlLCB4LlxuICpcbiAqIGluIHRoaXMgY2FzZSwgd2UncmUgdHJ5aW5nIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZVxuICogcG9wdWxhdGlvbiBtZWFuIGlzIGVxdWFsIHRvIHRoZSB2YWx1ZSB0aGF0IHdlIGtub3csIHdoaWNoIGlzIGB4YFxuICogaGVyZS4gdXN1YWxseSB0aGUgcmVzdWx0cyBoZXJlIGFyZSB1c2VkIHRvIGxvb2sgdXAgYVxuICogW3AtdmFsdWVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUC12YWx1ZSksIHdoaWNoLCBmb3JcbiAqIGEgY2VydGFpbiBsZXZlbCBvZiBzaWduaWZpY2FuY2UsIHdpbGwgbGV0IHlvdSBkZXRlcm1pbmUgdGhhdCB0aGVcbiAqIG51bGwgaHlwb3RoZXNpcyBjYW4gb3IgY2Fubm90IGJlIHJlamVjdGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBzYW1wbGUgb2Ygb25lIG9yIG1vcmUgbnVtYmVyc1xuICogQHBhcmFtIHtudW1iZXJ9IGV4cGVjdGVkVmFsdWUgZXhwZWN0ZWQgdmFsdWUgb2YgdGhlIHBvcHVsYXRpb24gbWVhblxuICogQHJldHVybnMge251bWJlcn0gdmFsdWVcbiAqIEBleGFtcGxlXG4gKiB0VGVzdChbMSwgMiwgMywgNCwgNSwgNl0sIDMuMzg1KS50b0ZpeGVkKDIpOyAvLyA9PiAnMC4xNidcbiAqL1xuZnVuY3Rpb24gdFRlc3QoeC8qOiBBcnJheTxudW1iZXI+ICovLCBleHBlY3RlZFZhbHVlLyo6IG51bWJlciAqLykvKjpudW1iZXIqLyB7XG4gICAgLy8gVGhlIG1lYW4gb2YgdGhlIHNhbXBsZVxuICAgIHZhciBzYW1wbGVNZWFuID0gbWVhbih4KTtcblxuICAgIC8vIFRoZSBzdGFuZGFyZCBkZXZpYXRpb24gb2YgdGhlIHNhbXBsZVxuICAgIHZhciBzZCA9IHN0YW5kYXJkRGV2aWF0aW9uKHgpO1xuXG4gICAgLy8gU3F1YXJlIHJvb3QgdGhlIGxlbmd0aCBvZiB0aGUgc2FtcGxlXG4gICAgdmFyIHJvb3ROID0gTWF0aC5zcXJ0KHgubGVuZ3RoKTtcblxuICAgIC8vIHJldHVybmluZyB0aGUgdCB2YWx1ZVxuICAgIHJldHVybiAoc2FtcGxlTWVhbiAtIGV4cGVjdGVkVmFsdWUpIC8gKHNkIC8gcm9vdE4pO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdG8gY29tcHV0ZSBbdHdvIHNhbXBsZSB0LXRlc3RdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3R1ZGVudCdzX3QtdGVzdCkuXG4gKiBUZXN0cyB3aGV0aGVyIFwibWVhbihYKS1tZWFuKFkpID0gZGlmZmVyZW5jZVwiLCAoXG4gKiBpbiB0aGUgbW9zdCBjb21tb24gY2FzZSwgd2Ugb2Z0ZW4gaGF2ZSBgZGlmZmVyZW5jZSA9PSAwYCB0byB0ZXN0IGlmIHR3byBzYW1wbGVzXG4gKiBhcmUgbGlrZWx5IHRvIGJlIHRha2VuIGZyb20gcG9wdWxhdGlvbnMgd2l0aCB0aGUgc2FtZSBtZWFuIHZhbHVlKSB3aXRoXG4gKiBubyBwcmlvciBrbm93bGVkZ2Ugb24gc3RhbmRhcmQgZGV2aWF0aW9ucyBvZiBib3RoIHNhbXBsZXNcbiAqIG90aGVyIHRoYW4gdGhlIGZhY3QgdGhhdCB0aGV5IGhhdmUgdGhlIHNhbWUgc3RhbmRhcmQgZGV2aWF0aW9uLlxuICpcbiAqIFVzdWFsbHkgdGhlIHJlc3VsdHMgaGVyZSBhcmUgdXNlZCB0byBsb29rIHVwIGFcbiAqIFtwLXZhbHVlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1AtdmFsdWUpLCB3aGljaCwgZm9yXG4gKiBhIGNlcnRhaW4gbGV2ZWwgb2Ygc2lnbmlmaWNhbmNlLCB3aWxsIGxldCB5b3UgZGV0ZXJtaW5lIHRoYXQgdGhlXG4gKiBudWxsIGh5cG90aGVzaXMgY2FuIG9yIGNhbm5vdCBiZSByZWplY3RlZC5cbiAqXG4gKiBgZGlmZmAgY2FuIGJlIG9taXR0ZWQgaWYgaXQgZXF1YWxzIDAuXG4gKlxuICogW1RoaXMgaXMgdXNlZCB0byBjb25maXJtIG9yIGRlbnldKGh0dHA6Ly93d3cubW9uYXJjaGxhYi5vcmcvTGFiL1Jlc2VhcmNoL1N0YXRzLzJTYW1wbGVULmFzcHgpXG4gKiBhIG51bGwgaHlwb3RoZXNpcyB0aGF0IHRoZSB0d28gcG9wdWxhdGlvbnMgdGhhdCBoYXZlIGJlZW4gc2FtcGxlZCBpbnRvXG4gKiBgc2FtcGxlWGAgYW5kIGBzYW1wbGVZYCBhcmUgZXF1YWwgdG8gZWFjaCBvdGhlci5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNhbXBsZVggYSBzYW1wbGUgYXMgYW4gYXJyYXkgb2YgbnVtYmVyc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBzYW1wbGVZIGEgc2FtcGxlIGFzIGFuIGFycmF5IG9mIG51bWJlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZGlmZmVyZW5jZT0wXVxuICogQHJldHVybnMge251bWJlcnxudWxsfSB0ZXN0IHJlc3VsdFxuICpcbiAqIEBleGFtcGxlXG4gKiB0VGVzdFR3b1NhbXBsZShbMSwgMiwgMywgNF0sIFszLCA0LCA1LCA2XSwgMCk7IC8vID0+IC0yLjE5MDg5MDIzMDAyMDY2NDNcbiAqL1xuZnVuY3Rpb24gdFRlc3RUd29TYW1wbGUoXG4gICAgc2FtcGxlWC8qOiBBcnJheTxudW1iZXI+ICovLFxuICAgIHNhbXBsZVkvKjogQXJyYXk8bnVtYmVyPiAqLyxcbiAgICBkaWZmZXJlbmNlLyo6ID9udW1iZXIgKi8pLyo6ID9udW1iZXIgKi8ge1xuICAgIHZhciBuID0gc2FtcGxlWC5sZW5ndGgsXG4gICAgICAgIG0gPSBzYW1wbGVZLmxlbmd0aDtcblxuICAgIC8vIElmIGVpdGhlciBzYW1wbGUgZG9lc24ndCBhY3R1YWxseSBoYXZlIGFueSB2YWx1ZXMsIHdlIGNhbid0XG4gICAgLy8gY29tcHV0ZSB0aGlzIGF0IGFsbCwgc28gd2UgcmV0dXJuIGBudWxsYC5cbiAgICBpZiAoIW4gfHwgIW0pIHsgcmV0dXJuIG51bGw7IH1cblxuICAgIC8vIGRlZmF1bHQgZGlmZmVyZW5jZSAobXUpIGlzIHplcm9cbiAgICBpZiAoIWRpZmZlcmVuY2UpIHtcbiAgICAgICAgZGlmZmVyZW5jZSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIG1lYW5YID0gbWVhbihzYW1wbGVYKSxcbiAgICAgICAgbWVhblkgPSBtZWFuKHNhbXBsZVkpLFxuICAgICAgICBzYW1wbGVWYXJpYW5jZVggPSBzYW1wbGVWYXJpYW5jZShzYW1wbGVYKSxcbiAgICAgICAgc2FtcGxlVmFyaWFuY2VZID0gc2FtcGxlVmFyaWFuY2Uoc2FtcGxlWSk7XG5cbiAgICBpZiAodHlwZW9mIG1lYW5YID09PSAnbnVtYmVyJyAmJlxuICAgICAgICB0eXBlb2YgbWVhblkgPT09ICdudW1iZXInICYmXG4gICAgICAgIHR5cGVvZiBzYW1wbGVWYXJpYW5jZVggPT09ICdudW1iZXInICYmXG4gICAgICAgIHR5cGVvZiBzYW1wbGVWYXJpYW5jZVkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciB3ZWlnaHRlZFZhcmlhbmNlID0gKChuIC0gMSkgKiBzYW1wbGVWYXJpYW5jZVggK1xuICAgICAgICAgICAgKG0gLSAxKSAqIHNhbXBsZVZhcmlhbmNlWSkgLyAobiArIG0gLSAyKTtcblxuICAgICAgICByZXR1cm4gKG1lYW5YIC0gbWVhblkgLSBkaWZmZXJlbmNlKSAvXG4gICAgICAgICAgICBNYXRoLnNxcnQod2VpZ2h0ZWRWYXJpYW5jZSAqICgxIC8gbiArIDEgLyBtKSk7XG4gICAgfVxufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFtCYXllc2lhbiBDbGFzc2lmaWVyXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05haXZlX0JheWVzX2NsYXNzaWZpZXIpXG4gKlxuICogVGhpcyBpcyBhIG5hw692ZSBiYXllc2lhbiBjbGFzc2lmaWVyIHRoYXQgdGFrZXNcbiAqIHNpbmdseS1uZXN0ZWQgb2JqZWN0cy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleGFtcGxlXG4gKiB2YXIgYmF5ZXMgPSBuZXcgQmF5ZXNpYW5DbGFzc2lmaWVyKCk7XG4gKiBiYXllcy50cmFpbih7XG4gKiAgIHNwZWNpZXM6ICdDYXQnXG4gKiB9LCAnYW5pbWFsJyk7XG4gKiB2YXIgcmVzdWx0ID0gYmF5ZXMuc2NvcmUoe1xuICogICBzcGVjaWVzOiAnQ2F0J1xuICogfSlcbiAqIC8vIHJlc3VsdFxuICogLy8ge1xuICogLy8gICBhbmltYWw6IDFcbiAqIC8vIH1cbiAqL1xuZnVuY3Rpb24gQmF5ZXNpYW5DbGFzc2lmaWVyKCkge1xuICAgIC8vIFRoZSBudW1iZXIgb2YgaXRlbXMgdGhhdCBhcmUgY3VycmVudGx5XG4gICAgLy8gY2xhc3NpZmllZCBpbiB0aGUgbW9kZWxcbiAgICB0aGlzLnRvdGFsQ291bnQgPSAwO1xuICAgIC8vIEV2ZXJ5IGl0ZW0gY2xhc3NpZmllZCBpbiB0aGUgbW9kZWxcbiAgICB0aGlzLmRhdGEgPSB7fTtcbn1cblxuLyoqXG4gKiBUcmFpbiB0aGUgY2xhc3NpZmllciB3aXRoIGEgbmV3IGl0ZW0sIHdoaWNoIGhhcyBhIHNpbmdsZVxuICogZGltZW5zaW9uIG9mIEphdmFzY3JpcHQgbGl0ZXJhbCBrZXlzIGFuZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gYW4gb2JqZWN0IHdpdGggc2luZ2x5LWRlZXAgcHJvcGVydGllc1xuICogQHBhcmFtIHtzdHJpbmd9IGNhdGVnb3J5IHRoZSBjYXRlZ29yeSB0aGlzIGl0ZW0gYmVsb25ncyB0b1xuICogQHJldHVybiB7dW5kZWZpbmVkfSBhZGRzIHRoZSBpdGVtIHRvIHRoZSBjbGFzc2lmaWVyXG4gKi9cbkJheWVzaWFuQ2xhc3NpZmllci5wcm90b3R5cGUudHJhaW4gPSBmdW5jdGlvbihpdGVtLCBjYXRlZ29yeSkge1xuICAgIC8vIElmIHRoZSBkYXRhIG9iamVjdCBkb2Vzbid0IGhhdmUgYW55IHZhbHVlc1xuICAgIC8vIGZvciB0aGlzIGNhdGVnb3J5LCBjcmVhdGUgYSBuZXcgb2JqZWN0IGZvciBpdC5cbiAgICBpZiAoIXRoaXMuZGF0YVtjYXRlZ29yeV0pIHtcbiAgICAgICAgdGhpcy5kYXRhW2NhdGVnb3J5XSA9IHt9O1xuICAgIH1cblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGtleSBpbiB0aGUgaXRlbS5cbiAgICBmb3IgKHZhciBrIGluIGl0ZW0pIHtcbiAgICAgICAgdmFyIHYgPSBpdGVtW2tdO1xuICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBuZXN0ZWQgb2JqZWN0IGBkYXRhW2NhdGVnb3J5XVtrXVtpdGVtW2tdXWBcbiAgICAgICAgLy8gd2l0aCBhbiBvYmplY3Qgb2Yga2V5cyB0aGF0IGVxdWFsIDAuXG4gICAgICAgIGlmICh0aGlzLmRhdGFbY2F0ZWdvcnldW2tdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtjYXRlZ29yeV1ba10gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kYXRhW2NhdGVnb3J5XVtrXVt2XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbY2F0ZWdvcnldW2tdW3ZdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFuZCBpbmNyZW1lbnQgdGhlIGtleSBmb3IgdGhpcyBrZXkvdmFsdWUgY29tYmluYXRpb24uXG4gICAgICAgIHRoaXMuZGF0YVtjYXRlZ29yeV1ba11bdl0rKztcbiAgICB9XG5cbiAgICAvLyBJbmNyZW1lbnQgdGhlIG51bWJlciBvZiBpdGVtcyBjbGFzc2lmaWVkXG4gICAgdGhpcy50b3RhbENvdW50Kys7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc2NvcmUgb2YgaG93IHdlbGwgdGhpcyBpdGVtIG1hdGNoZXMgYWxsXG4gKiBwb3NzaWJsZSBjYXRlZ29yaWVzIGJhc2VkIG9uIGl0cyBhdHRyaWJ1dGVzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gYW4gaXRlbSBpbiB0aGUgc2FtZSBmb3JtYXQgYXMgd2l0aCB0cmFpblxuICogQHJldHVybnMge09iamVjdH0gb2YgcHJvYmFiaWxpdGllcyB0aGF0IHRoaXMgaXRlbSBiZWxvbmdzIHRvIGFcbiAqIGdpdmVuIGNhdGVnb3J5LlxuICovXG5CYXllc2lhbkNsYXNzaWZpZXIucHJvdG90eXBlLnNjb3JlID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIC8vIEluaXRpYWxpemUgYW4gZW1wdHkgYXJyYXkgb2Ygb2RkcyBwZXIgY2F0ZWdvcnkuXG4gICAgdmFyIG9kZHMgPSB7fSwgY2F0ZWdvcnk7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2gga2V5IGluIHRoZSBpdGVtLFxuICAgIC8vIHRoZW4gaXRlcmF0ZSB0aHJvdWdoIGVhY2ggY2F0ZWdvcnkgdGhhdCBoYXMgYmVlbiB1c2VkXG4gICAgLy8gaW4gcHJldmlvdXMgY2FsbHMgdG8gYC50cmFpbigpYFxuICAgIGZvciAodmFyIGsgaW4gaXRlbSkge1xuICAgICAgICB2YXIgdiA9IGl0ZW1ba107XG4gICAgICAgIGZvciAoY2F0ZWdvcnkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYW4gZW1wdHkgb2JqZWN0IGZvciBzdG9yaW5nIGtleSAtIHZhbHVlIGNvbWJpbmF0aW9uc1xuICAgICAgICAgICAgLy8gZm9yIHRoaXMgY2F0ZWdvcnkuXG4gICAgICAgICAgICBvZGRzW2NhdGVnb3J5XSA9IHt9O1xuXG4gICAgICAgICAgICAvLyBJZiB0aGlzIGl0ZW0gZG9lc24ndCBldmVuIGhhdmUgYSBwcm9wZXJ0eSwgaXQgY291bnRzIGZvciBub3RoaW5nLFxuICAgICAgICAgICAgLy8gYnV0IGlmIGl0IGRvZXMgaGF2ZSB0aGUgcHJvcGVydHkgdGhhdCB3ZSdyZSBsb29raW5nIGZvciBmcm9tXG4gICAgICAgICAgICAvLyB0aGUgaXRlbSB0byBjYXRlZ29yaXplLCBpdCBjb3VudHMgYmFzZWQgb24gaG93IHBvcHVsYXIgaXQgaXNcbiAgICAgICAgICAgIC8vIHZlcnN1cyB0aGUgd2hvbGUgcG9wdWxhdGlvbi5cbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFbY2F0ZWdvcnldW2tdKSB7XG4gICAgICAgICAgICAgICAgb2Rkc1tjYXRlZ29yeV1bayArICdfJyArIHZdID0gKHRoaXMuZGF0YVtjYXRlZ29yeV1ba11bdl0gfHwgMCkgLyB0aGlzLnRvdGFsQ291bnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9kZHNbY2F0ZWdvcnldW2sgKyAnXycgKyB2XSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgdXAgYSBuZXcgb2JqZWN0IHRoYXQgd2lsbCBjb250YWluIHN1bXMgb2YgdGhlc2Ugb2RkcyBieSBjYXRlZ29yeVxuICAgIHZhciBvZGRzU3VtcyA9IHt9O1xuXG4gICAgZm9yIChjYXRlZ29yeSBpbiBvZGRzKSB7XG4gICAgICAgIC8vIFRhbGx5IGFsbCBvZiB0aGUgb2RkcyBmb3IgZWFjaCBjYXRlZ29yeS1jb21iaW5hdGlvbiBwYWlyIC1cbiAgICAgICAgLy8gdGhlIG5vbi1leGlzdGVuY2Ugb2YgYSBjYXRlZ29yeSBkb2VzIG5vdCBhZGQgYW55dGhpbmcgdG8gdGhlXG4gICAgICAgIC8vIHNjb3JlLlxuICAgICAgICBvZGRzU3Vtc1tjYXRlZ29yeV0gPSAwO1xuICAgICAgICBmb3IgKHZhciBjb21iaW5hdGlvbiBpbiBvZGRzW2NhdGVnb3J5XSkge1xuICAgICAgICAgICAgb2Rkc1N1bXNbY2F0ZWdvcnldICs9IG9kZHNbY2F0ZWdvcnldW2NvbWJpbmF0aW9uXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvZGRzU3Vtcztcbn07XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhpcyBpcyBhIHNpbmdsZS1sYXllciBbUGVyY2VwdHJvbiBDbGFzc2lmaWVyXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BlcmNlcHRyb24pIHRoYXQgdGFrZXNcbiAqIGFycmF5cyBvZiBudW1iZXJzIGFuZCBwcmVkaWN0cyB3aGV0aGVyIHRoZXkgc2hvdWxkIGJlIGNsYXNzaWZpZWRcbiAqIGFzIGVpdGhlciAwIG9yIDEgKG5lZ2F0aXZlIG9yIHBvc2l0aXZlIGV4YW1wbGVzKS5cbiAqIEBjbGFzc1xuICogQGV4YW1wbGVcbiAqIC8vIENyZWF0ZSB0aGUgbW9kZWxcbiAqIHZhciBwID0gbmV3IFBlcmNlcHRyb25Nb2RlbCgpO1xuICogLy8gVHJhaW4gdGhlIG1vZGVsIHdpdGggaW5wdXQgd2l0aCBhIGRpYWdvbmFsIGJvdW5kYXJ5LlxuICogZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAqICAgICBwLnRyYWluKFsxLCAxXSwgMSk7XG4gKiAgICAgcC50cmFpbihbMCwgMV0sIDApO1xuICogICAgIHAudHJhaW4oWzEsIDBdLCAwKTtcbiAqICAgICBwLnRyYWluKFswLCAwXSwgMCk7XG4gKiB9XG4gKiBwLnByZWRpY3QoWzAsIDBdKTsgLy8gMFxuICogcC5wcmVkaWN0KFswLCAxXSk7IC8vIDBcbiAqIHAucHJlZGljdChbMSwgMF0pOyAvLyAwXG4gKiBwLnByZWRpY3QoWzEsIDFdKTsgLy8gMVxuICovXG5mdW5jdGlvbiBQZXJjZXB0cm9uTW9kZWwoKSB7XG4gICAgLy8gVGhlIHdlaWdodHMsIG9yIGNvZWZmaWNpZW50cyBvZiB0aGUgbW9kZWw7XG4gICAgLy8gd2VpZ2h0cyBhcmUgb25seSBwb3B1bGF0ZWQgd2hlbiB0cmFpbmluZyB3aXRoIGRhdGEuXG4gICAgdGhpcy53ZWlnaHRzID0gW107XG4gICAgLy8gVGhlIGJpYXMgdGVybSwgb3IgaW50ZXJjZXB0OyBpdCBpcyBhbHNvIGEgd2VpZ2h0IGJ1dFxuICAgIC8vIGl0J3Mgc3RvcmVkIHNlcGFyYXRlbHkgZm9yIGNvbnZlbmllbmNlIGFzIGl0IGlzIGFsd2F5c1xuICAgIC8vIG11bHRpcGxpZWQgYnkgb25lLlxuICAgIHRoaXMuYmlhcyA9IDA7XG59XG5cbi8qKlxuICogKipQcmVkaWN0Kio6IFVzZSBhbiBhcnJheSBvZiBmZWF0dXJlcyB3aXRoIHRoZSB3ZWlnaHQgYXJyYXkgYW5kIGJpYXNcbiAqIHRvIHByZWRpY3Qgd2hldGhlciBhbiBleGFtcGxlIGlzIGxhYmVsZWQgMCBvciAxLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZmVhdHVyZXMgYW4gYXJyYXkgb2YgZmVhdHVyZXMgYXMgbnVtYmVyc1xuICogQHJldHVybnMge251bWJlcn0gMSBpZiB0aGUgc2NvcmUgaXMgb3ZlciAwLCBvdGhlcndpc2UgMFxuICovXG5QZXJjZXB0cm9uTW9kZWwucHJvdG90eXBlLnByZWRpY3QgPSBmdW5jdGlvbihmZWF0dXJlcykge1xuXG4gICAgLy8gT25seSBwcmVkaWN0IGlmIHByZXZpb3VzbHkgdHJhaW5lZFxuICAgIC8vIG9uIHRoZSBzYW1lIHNpemUgZmVhdHVyZSBhcnJheShzKS5cbiAgICBpZiAoZmVhdHVyZXMubGVuZ3RoICE9PSB0aGlzLndlaWdodHMubGVuZ3RoKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHN1bSBvZiBmZWF0dXJlcyB0aW1lcyB3ZWlnaHRzLFxuICAgIC8vIHdpdGggdGhlIGJpYXMgYWRkZWQgKGltcGxpY2l0bHkgdGltZXMgb25lKS5cbiAgICB2YXIgc2NvcmUgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy53ZWlnaHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNjb3JlICs9IHRoaXMud2VpZ2h0c1tpXSAqIGZlYXR1cmVzW2ldO1xuICAgIH1cbiAgICBzY29yZSArPSB0aGlzLmJpYXM7XG5cbiAgICAvLyBDbGFzc2lmeSBhcyAxIGlmIHRoZSBzY29yZSBpcyBvdmVyIDAsIG90aGVyd2lzZSAwLlxuICAgIGlmIChzY29yZSA+IDApIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufTtcblxuLyoqXG4gKiAqKlRyYWluKiogdGhlIGNsYXNzaWZpZXIgd2l0aCBhIG5ldyBleGFtcGxlLCB3aGljaCBpc1xuICogYSBudW1lcmljIGFycmF5IG9mIGZlYXR1cmVzIGFuZCBhIDAgb3IgMSBsYWJlbC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGZlYXR1cmVzIGFuIGFycmF5IG9mIGZlYXR1cmVzIGFzIG51bWJlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBsYWJlbCBlaXRoZXIgMCBvciAxXG4gKiBAcmV0dXJucyB7UGVyY2VwdHJvbk1vZGVsfSB0aGlzXG4gKi9cblBlcmNlcHRyb25Nb2RlbC5wcm90b3R5cGUudHJhaW4gPSBmdW5jdGlvbihmZWF0dXJlcywgbGFiZWwpIHtcbiAgICAvLyBSZXF1aXJlIHRoYXQgb25seSBsYWJlbHMgb2YgMCBvciAxIGFyZSBjb25zaWRlcmVkLlxuICAgIGlmIChsYWJlbCAhPT0gMCAmJiBsYWJlbCAhPT0gMSkgeyByZXR1cm4gbnVsbDsgfVxuICAgIC8vIFRoZSBsZW5ndGggb2YgdGhlIGZlYXR1cmUgYXJyYXkgZGV0ZXJtaW5lc1xuICAgIC8vIHRoZSBsZW5ndGggb2YgdGhlIHdlaWdodCBhcnJheS5cbiAgICAvLyBUaGUgcGVyY2VwdHJvbiB3aWxsIGNvbnRpbnVlIGxlYXJuaW5nIGFzIGxvbmcgYXNcbiAgICAvLyBpdCBrZWVwcyBzZWVpbmcgZmVhdHVyZSBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoLlxuICAgIC8vIFdoZW4gaXQgc2VlcyBhIG5ldyBkYXRhIHNoYXBlLCBpdCBpbml0aWFsaXplcy5cbiAgICBpZiAoZmVhdHVyZXMubGVuZ3RoICE9PSB0aGlzLndlaWdodHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMud2VpZ2h0cyA9IGZlYXR1cmVzO1xuICAgICAgICB0aGlzLmJpYXMgPSAxO1xuICAgIH1cbiAgICAvLyBNYWtlIGEgcHJlZGljdGlvbiBiYXNlZCBvbiBjdXJyZW50IHdlaWdodHMuXG4gICAgdmFyIHByZWRpY3Rpb24gPSB0aGlzLnByZWRpY3QoZmVhdHVyZXMpO1xuICAgIC8vIFVwZGF0ZSB0aGUgd2VpZ2h0cyBpZiB0aGUgcHJlZGljdGlvbiBpcyB3cm9uZy5cbiAgICBpZiAocHJlZGljdGlvbiAhPT0gbGFiZWwpIHtcbiAgICAgICAgdmFyIGdyYWRpZW50ID0gbGFiZWwgLSBwcmVkaWN0aW9uO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMud2VpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy53ZWlnaHRzW2ldICs9IGdyYWRpZW50ICogZmVhdHVyZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iaWFzICs9IGdyYWRpZW50O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogV2UgdXNlIGDOtWAsIGVwc2lsb24sIGFzIGEgc3RvcHBpbmcgY3JpdGVyaW9uIHdoZW4gd2Ugd2FudCB0byBpdGVyYXRlXG4gKiB1bnRpbCB3ZSdyZSBcImNsb3NlIGVub3VnaFwiLiBFcHNpbG9uIGlzIGEgdmVyeSBzbWFsbCBudW1iZXI6IGZvclxuICogc2ltcGxlIHN0YXRpc3RpY3MsIHRoYXQgbnVtYmVyIGlzICoqMC4wMDAxKipcbiAqXG4gKiBUaGlzIGlzIHVzZWQgaW4gY2FsY3VsYXRpb25zIGxpa2UgdGhlIGJpbm9taWFsRGlzdHJpYnV0aW9uLCBpbiB3aGljaFxuICogdGhlIHByb2Nlc3Mgb2YgZmluZGluZyBhIHZhbHVlIGlzIFtpdGVyYXRpdmVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0l0ZXJhdGl2ZV9tZXRob2QpOlxuICogaXQgcHJvZ3Jlc3NlcyB1bnRpbCBpdCBpcyBjbG9zZSBlbm91Z2guXG4gKlxuICogQmVsb3cgaXMgYW4gZXhhbXBsZSBvZiB1c2luZyBlcHNpbG9uIGluIFtncmFkaWVudCBkZXNjZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HcmFkaWVudF9kZXNjZW50KSxcbiAqIHdoZXJlIHdlJ3JlIHRyeWluZyB0byBmaW5kIGEgbG9jYWwgbWluaW11bSBvZiBhIGZ1bmN0aW9uJ3MgZGVyaXZhdGl2ZSxcbiAqIGdpdmVuIGJ5IHRoZSBgZkRlcml2YXRpdmVgIG1ldGhvZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRnJvbSBjYWxjdWxhdGlvbiwgd2UgZXhwZWN0IHRoYXQgdGhlIGxvY2FsIG1pbmltdW0gb2NjdXJzIGF0IHg9OS80XG4gKiB2YXIgeF9vbGQgPSAwO1xuICogLy8gVGhlIGFsZ29yaXRobSBzdGFydHMgYXQgeD02XG4gKiB2YXIgeF9uZXcgPSA2O1xuICogdmFyIHN0ZXBTaXplID0gMC4wMTtcbiAqXG4gKiBmdW5jdGlvbiBmRGVyaXZhdGl2ZSh4KSB7XG4gKiAgIHJldHVybiA0ICogTWF0aC5wb3coeCwgMykgLSA5ICogTWF0aC5wb3coeCwgMik7XG4gKiB9XG4gKlxuICogLy8gVGhlIGxvb3AgcnVucyB1bnRpbCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBwcmV2aW91c1xuICogLy8gdmFsdWUgYW5kIHRoZSBjdXJyZW50IHZhbHVlIGlzIHNtYWxsZXIgdGhhbiBlcHNpbG9uIC0gYSByb3VnaFxuICogLy8gbWVhdXJlIG9mICdjbG9zZSBlbm91Z2gnXG4gKiB3aGlsZSAoTWF0aC5hYnMoeF9uZXcgLSB4X29sZCkgPiBzcy5lcHNpbG9uKSB7XG4gKiAgIHhfb2xkID0geF9uZXc7XG4gKiAgIHhfbmV3ID0geF9vbGQgLSBzdGVwU2l6ZSAqIGZEZXJpdmF0aXZlKHhfb2xkKTtcbiAqIH1cbiAqXG4gKiBjb25zb2xlLmxvZygnTG9jYWwgbWluaW11bSBvY2N1cnMgYXQnLCB4X25ldyk7XG4gKi9cbnZhciBlcHNpbG9uID0gMC4wMDAxO1xuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIEEgW0ZhY3RvcmlhbF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmFjdG9yaWFsKSwgdXN1YWxseSB3cml0dGVuIG4hLCBpcyB0aGUgcHJvZHVjdCBvZiBhbGwgcG9zaXRpdmVcbiAqIGludGVnZXJzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBuLiBPZnRlbiBmYWN0b3JpYWwgaXMgaW1wbGVtZW50ZWRcbiAqIHJlY3Vyc2l2ZWx5LCBidXQgdGhpcyBpdGVyYXRpdmUgYXBwcm9hY2ggaXMgc2lnbmlmaWNhbnRseSBmYXN0ZXJcbiAqIGFuZCBzaW1wbGVyLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIGlucHV0LCBtdXN0IGJlIGFuIGludGVnZXIgbnVtYmVyIDEgb3IgZ3JlYXRlclxuICogQHJldHVybnMge251bWJlcn0gZmFjdG9yaWFsOiBuIVxuICogQHRocm93cyB7RXJyb3J9IGlmIG4gaXMgbGVzcyB0aGFuIDAgb3Igbm90IGFuIGludGVnZXJcbiAqIEBleGFtcGxlXG4gKiBmYWN0b3JpYWwoNSk7IC8vID0+IDEyMFxuICovXG5mdW5jdGlvbiBmYWN0b3JpYWwobiAvKjogbnVtYmVyICovKS8qOiBudW1iZXIgKi8ge1xuXG4gICAgLy8gZmFjdG9yaWFsIGlzIG1hdGhlbWF0aWNhbGx5IHVuZGVmaW5lZCBmb3IgbmVnYXRpdmUgbnVtYmVyc1xuICAgIGlmIChuIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhY3RvcmlhbCByZXF1aXJlcyBhIG5vbi1uZWdhdGl2ZSB2YWx1ZScpO1xuICAgIH1cblxuICAgIGlmIChNYXRoLmZsb29yKG4pICE9PSBuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmFjdG9yaWFsIHJlcXVpcmVzIGFuIGludGVnZXIgaW5wdXQnKTtcbiAgICB9XG5cbiAgICAvLyB0eXBpY2FsbHkgeW91J2xsIGV4cGFuZCB0aGUgZmFjdG9yaWFsIGZ1bmN0aW9uIGdvaW5nIGRvd24sIGxpa2VcbiAgICAvLyA1ISA9IDUgKiA0ICogMyAqIDIgKiAxLiBUaGlzIGlzIGdvaW5nIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24sXG4gICAgLy8gY291bnRpbmcgZnJvbSAyIHVwIHRvIHRoZSBudW1iZXIgaW4gcXVlc3Rpb24sIGFuZCBzaW5jZSBhbnl0aGluZ1xuICAgIC8vIG11bHRpcGxpZWQgYnkgMSBpcyBpdHNlbGYsIHRoZSBsb29wIG9ubHkgbmVlZHMgdG8gc3RhcnQgYXQgMi5cbiAgICB2YXIgYWNjdW11bGF0b3IgPSAxO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDw9IG47IGkrKykge1xuICAgICAgICAvLyBmb3IgZWFjaCBudW1iZXIgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgbnVtYmVyIGBuYCwgbXVsdGlwbHlcbiAgICAgICAgLy8gdGhlIGFjY3VtdWxhdG9yIG15IHRoYXQgbnVtYmVyLlxuICAgICAgICBhY2N1bXVsYXRvciAqPSBpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgW2dhbW1hIGZ1bmN0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HYW1tYV9mdW5jdGlvbikgb2YgYSB2YWx1ZSB1c2luZyBOZW1lcycgYXBwcm94aW1hdGlvbi5cbiAqIFRoZSBnYW1tYSBvZiBuIGlzIGVxdWl2YWxlbnQgdG8gKG4tMSkhLCBidXQgdW5saWtlIHRoZSBmYWN0b3JpYWwgZnVuY3Rpb24sIGdhbW1hIGlzIGRlZmluZWQgZm9yIGFsbCByZWFsIG4gZXhjZXB0IHplcm8gXG4gKiBhbmQgbmVnYXRpdmUgaW50ZWdlcnMgKHdoZXJlIE5hTiBpcyByZXR1cm5lZCkuIE5vdGUsIHRoZSBnYW1tYSBmdW5jdGlvbiBpcyBhbHNvIHdlbGwtZGVmaW5lZCBmb3IgY29tcGxleCBudW1iZXJzLCBcbiAqIHRob3VnaCB0aGlzIGltcGxlbWVudGF0aW9uIGN1cnJlbnRseSBkb2VzIG5vdCBoYW5kbGUgY29tcGxleCBudW1iZXJzIGFzIGlucHV0IHZhbHVlcy5cbiAqIE5lbWVzJyBhcHByb3hpbWF0aW9uIGlzIGRlZmluZWQgW2hlcmVdKGh0dHBzOi8vYXJ4aXYub3JnL2Ficy8xMDAzLjYwMjApIGFzIFRoZW9yZW0gMi4yLlxuICogTmVnYXRpdmUgdmFsdWVzIHVzZSBbRXVsZXIncyByZWZsZWN0aW9uIGZvcm11bGFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dhbW1hX2Z1bmN0aW9uI1Byb3BlcnRpZXMpIGZvciBjb21wdXRhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbiBBbnkgcmVhbCBudW1iZXIgZXhjZXB0IGZvciB6ZXJvIGFuZCBuZWdhdGl2ZSBpbnRlZ2Vycy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBnYW1tYSBvZiB0aGUgaW5wdXQgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGdhbW1hKDExLjUpOyAvLyAxMTg5OTQyMy4wODQwMzcwMzhcbiAqIGdhbW1hKC0xMS41KTsgLy8gMi4yOTU3NTgxMDQ4MTYwOWUtOCBcbiAqIGdhbW1hKDUpOyAvLyAyNCBcbiAqL1xuZnVuY3Rpb24gZ2FtbWEobiAvKjogbnVtYmVyICovICkgLyo6IG51bWJlciAqLyB7XG5cbiAgICBpZiAoaXNJbnRlZ2VyKG4pKSB7XG4gICAgICAgIGlmIChuIDw9IDApIHtcbiAgICAgICAgICAgIC8vIGdhbW1hIG5vdCBkZWZpbmVkIGZvciB6ZXJvIG9yIG5lZ2F0aXZlIGludGVnZXJzXG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlIGZhY3RvcmlhbCBmb3IgaW50ZWdlciBpbnB1dHMgXG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yaWFsKG4gLSAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlY3JlbWVudCBuLCBiZWNhdXNlIGFwcHJveGltYXRpb24gaXMgZGVmaW5lZCBmb3IgbiAtIDFcbiAgICBuLS07XG5cblxuICAgIGlmIChuIDwgMCkge1xuICAgICAgICAvLyBVc2UgRXVsZXIncyByZWZsZWN0aW9uIGZvcm11bGEgZm9yIG5lZ2F0aXZlIGlucHV0c1xuICAgICAgICAvLyBzZWU6ICBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HYW1tYV9mdW5jdGlvbiNQcm9wZXJ0aWVzXG4gICAgICAgIHJldHVybiBNYXRoLlBJIC8gKE1hdGguc2luKE1hdGguUEkgKiAtbikgKiBnYW1tYSgtbikpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTmVtZXMnIGV4cGFuc2lvbiBhcHByb3hpbWF0aW9uXG4gICAgICAgIHZhciBzZXJpZXNDb2VmZmljaWVudCA9IE1hdGgucG93KChuIC8gTWF0aC5FKSwgbikgKiBNYXRoLnNxcnQoMiAqIE1hdGguUEkgKiAobiArICgxIC8gNikpKTtcblxuICAgICAgICB2YXIgc2VyaWVzRGVub20gPSBuICsgMSAvIDQ7XG5cbiAgICAgICAgdmFyIHNlcmllc0V4cGFuc2lvbiA9ICgxICtcbiAgICAgICAgICAgICgxIC8gMTQ0KSAvIE1hdGgucG93KHNlcmllc0Rlbm9tLCAyKSAtXG4gICAgICAgICAgICAoMSAvIDEyOTYwKSAvIE1hdGgucG93KHNlcmllc0Rlbm9tLCAzKSAtXG4gICAgICAgICAgICAoMjU3IC8gMjA3MzYwKSAvIE1hdGgucG93KHNlcmllc0Rlbm9tLCA0KSAtXG4gICAgICAgICAgICAoNTIgLyAyNjEyNzM2KSAvIE1hdGgucG93KHNlcmllc0Rlbm9tLCA1KSArXG4gICAgICAgICAgICAoNTc0MTE3MyAvIDk0MDU4NDk2MDApIC8gTWF0aC5wb3coc2VyaWVzRGVub20sIDYpICtcbiAgICAgICAgICAgICgzNzUyOSAvIDE4ODExNjk5MjAwKSAvIE1hdGgucG93KHNlcmllc0Rlbm9tLCA3KSk7XG5cbiAgICAgICAgcmV0dXJuIHNlcmllc0NvZWZmaWNpZW50ICogc2VyaWVzRXhwYW5zaW9uO1xuICAgIH1cblxufVxuXG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJlxuICAgICAgICBpc0Zpbml0ZSh2YWx1ZSkgJiZcbiAgICAgICAgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vLyBEZWZpbmUgc2VyaWVzIGNvZWZmaWNpZW50c1xudmFyIENPRUZGSUNJRU5UUyA9IFtcbiAgICAwLjk5OTk5OTk5OTk5OTk5NzA5MTgyLFxuICAgIDU3LjE1NjIzNTY2NTg2MjkyMzUxNyxcbiAgICAtNTkuNTk3OTYwMzU1NDc1NDkxMjQ4LFxuICAgIDE0LjEzNjA5Nzk3NDc0MTc0NzE3NCxcbiAgICAtMC40OTE5MTM4MTYwOTc2MjAxOTk3OCxcbiAgICAwLjMzOTk0NjQ5OTg0ODExODg4Njk5ZS00LFxuICAgIDAuNDY1MjM2Mjg5MjcwNDg1NzU2NjVlLTQsXG4gICAgLTAuOTgzNzQ0NzUzMDQ4Nzk1NjQ2NzdlLTQsXG4gICAgMC4xNTgwODg3MDMyMjQ5MTI0ODg4NGUtMyxcbiAgICAtMC4yMTAyNjQ0NDE3MjQxMDQ4ODMxOWUtMywgMC4yMTc0Mzk2MTgxMTUyMTI2NDMyMGUtMyxcbiAgICAtMC4xNjQzMTgxMDY1MzY3NjM4OTAyMmUtMyxcbiAgICAwLjg0NDE4MjIzOTgzODUyNzQzMjkzZS00LFxuICAgIC0wLjI2MTkwODM4NDAxNTgxNDA4NjcwZS00LFxuICAgIDAuMzY4OTkxODI2NTk1MzE2MjI3MDRlLTVcbl07XG5cbnZhciBnID0gNjA3IC8gMTI4O1xudmFyIExPR1NRUlQyUEkgPSBNYXRoLmxvZyhNYXRoLnNxcnQoMiAqIE1hdGguUEkpKTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBsb2dhcml0aG0gb2YgdGhlIFtnYW1tYSBmdW5jdGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR2FtbWFfZnVuY3Rpb24pIG9mIGEgdmFsdWUgdXNpbmcgTGFuY3pvcycgYXBwcm94aW1hdGlvbi5cbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYXMgaW5wdXQgYW55IHJlYWwtdmFsdWUgbiBncmVhdGVyIHRoYW4gMC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZnVsIGZvciB2YWx1ZXMgb2YgbiB0b28gbGFyZ2UgZm9yIHRoZSBub3JtYWwgZ2FtbWEgZnVuY3Rpb24gKG4gPiAxNjUpLlxuICogVGhlIGNvZGUgaXMgYmFzZWQgb24gTGFuY3pvJ3MgR2FtbWEgYXBwcm94aW1hdGlvbiwgZGVmaW5lZCBbaGVyZV0oaHR0cDovL215LmZpdC5lZHUvfmdhYmRvL2dhbW1hLnR4dCkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG4gQW55IHJlYWwgbnVtYmVyIGdyZWF0ZXIgdGhhbiB6ZXJvLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIGxvZ2FyaXRobSBvZiBnYW1tYSBvZiB0aGUgaW5wdXQgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGdhbW1hbG4oNTAwKTsgLy8gMjYwNS4xMTU4NTAzNjE3MzM1XG4gKiBnYW1tYWxuKDIuNCk7IC8vIDAuMjE2ODU5MzIyNDQ4ODQwNDMgXG4gKi9cbmZ1bmN0aW9uIGdhbW1hbG4obiAvKjogbnVtYmVyICovICkgLyo6IG51bWJlciAqLyB7XG5cbiAgICAvLyBSZXR1cm4gaW5maW5pdHkgaWYgdmFsdWUgbm90IGluIGRvbWFpblxuICAgIGlmIChuIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIH1cbiAgICBcbiAgICAvLyBEZWNyZW1lbnQgbiwgYmVjYXVzZSBhcHByb3hpbWF0aW9uIGlzIGRlZmluZWQgZm9yIG4gLSAxXG4gICAgbi0tO1xuICAgIFxuICAgIC8vIENyZWF0ZSBzZXJpZXMgYXBwcm94aW1hdGlvblxuICAgIHZhciBhID0gQ09FRkZJQ0lFTlRTWzBdO1xuICAgIFxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgMTU7IGkrKykge1xuICAgICAgICBhICs9IENPRUZGSUNJRU5UU1tpXSAvIChuICsgaSk7XG4gICAgfVxuICAgIFxuICAgIHZhciB0bXAgPSBnICsgMC41ICsgbjtcbiAgICBcbiAgICAvLyBSZXR1cm4gbmF0dXJhbCBsb2dhcml0aG0gb2YgZ2FtbWEobilcbiAgICByZXR1cm4gTE9HU1FSVDJQSSArIE1hdGgubG9nKGEpIC0gdG1wICsgKG4gKyAwLjUpICogTWF0aC5sb2codG1wKTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW0Jlcm5vdWxsaSBkaXN0cmlidXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmVybm91bGxpX2Rpc3RyaWJ1dGlvbilcbiAqIGlzIHRoZSBwcm9iYWJpbGl0eSBkaXNjcmV0ZVxuICogZGlzdHJpYnV0aW9uIG9mIGEgcmFuZG9tIHZhcmlhYmxlIHdoaWNoIHRha2VzIHZhbHVlIDEgd2l0aCBzdWNjZXNzXG4gKiBwcm9iYWJpbGl0eSBgcGAgYW5kIHZhbHVlIDAgd2l0aCBmYWlsdXJlXG4gKiBwcm9iYWJpbGl0eSBgcWAgPSAxIC0gYHBgLiBJdCBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsIHRvIHJlcHJlc2VudCB0aGVcbiAqIHRvc3Mgb2YgYSBjb2luLCB3aGVyZSBcIjFcIiBpcyBkZWZpbmVkIHRvIG1lYW4gXCJoZWFkc1wiIGFuZCBcIjBcIiBpcyBkZWZpbmVkXG4gKiB0byBtZWFuIFwidGFpbHNcIiAob3IgdmljZSB2ZXJzYSkuIEl0IGlzXG4gKiBhIHNwZWNpYWwgY2FzZSBvZiBhIEJpbm9taWFsIERpc3RyaWJ1dGlvblxuICogd2hlcmUgYG5gID0gMS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcCBpbnB1dCB2YWx1ZSwgYmV0d2VlbiAwIGFuZCAxIGluY2x1c2l2ZVxuICogQHJldHVybnMge251bWJlcltdfSB2YWx1ZXMgb2YgYmVybm91bGxpIGRpc3RyaWJ1dGlvbiBhdCB0aGlzIHBvaW50XG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgcCBpcyBvdXRzaWRlIDAgYW5kIDFcbiAqIEBleGFtcGxlXG4gKiBiZXJub3VsbGlEaXN0cmlidXRpb24oMC4zKTsgLy8gPT4gWzAuNywgMC4zXVxuICovXG5mdW5jdGlvbiBiZXJub3VsbGlEaXN0cmlidXRpb24ocC8qOiBudW1iZXIgKi8pIC8qOiBudW1iZXJbXSAqLyB7XG4gICAgLy8gQ2hlY2sgdGhhdCBgcGAgaXMgYSB2YWxpZCBwcm9iYWJpbGl0eSAoMCDiiaQgcCDiiaQgMSlcbiAgICBpZiAocCA8IDAgfHwgcCA+IDEgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYmVybm91bGxpRGlzdHJpYnV0aW9uIHJlcXVpcmVzIHByb2JhYmlsaXR5IHRvIGJlIGJldHdlZW4gMCBhbmQgMSBpbmNsdXNpdmUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gWzEgLSBwLCBwXTtcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW0Jpbm9taWFsIERpc3RyaWJ1dGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CaW5vbWlhbF9kaXN0cmlidXRpb24pIGlzIHRoZSBkaXNjcmV0ZSBwcm9iYWJpbGl0eVxuICogZGlzdHJpYnV0aW9uIG9mIHRoZSBudW1iZXIgb2Ygc3VjY2Vzc2VzIGluIGEgc2VxdWVuY2Ugb2YgbiBpbmRlcGVuZGVudCB5ZXMvbm8gZXhwZXJpbWVudHMsIGVhY2ggb2Ygd2hpY2ggeWllbGRzXG4gKiBzdWNjZXNzIHdpdGggcHJvYmFiaWxpdHkgYHByb2JhYmlsaXR5YC4gU3VjaCBhIHN1Y2Nlc3MvZmFpbHVyZSBleHBlcmltZW50IGlzIGFsc28gY2FsbGVkIGEgQmVybm91bGxpIGV4cGVyaW1lbnQgb3JcbiAqIEJlcm5vdWxsaSB0cmlhbDsgd2hlbiB0cmlhbHMgPSAxLCB0aGUgQmlub21pYWwgRGlzdHJpYnV0aW9uIGlzIGEgQmVybm91bGxpIERpc3RyaWJ1dGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdHJpYWxzIG51bWJlciBvZiB0cmlhbHMgdG8gc2ltdWxhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcm9iYWJpbGl0eVxuICogQHJldHVybnMge251bWJlcltdfSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gYmlub21pYWxEaXN0cmlidXRpb24oXG4gICAgdHJpYWxzLyo6IG51bWJlciAqLyxcbiAgICBwcm9iYWJpbGl0eS8qOiBudW1iZXIgKi8pLyo6ID9udW1iZXJbXSAqLyB7XG4gICAgLy8gQ2hlY2sgdGhhdCBgcGAgaXMgYSB2YWxpZCBwcm9iYWJpbGl0eSAoMCDiiaQgcCDiiaQgMSksXG4gICAgLy8gdGhhdCBgbmAgaXMgYW4gaW50ZWdlciwgc3RyaWN0bHkgcG9zaXRpdmUuXG4gICAgaWYgKHByb2JhYmlsaXR5IDwgMCB8fCBwcm9iYWJpbGl0eSA+IDEgfHxcbiAgICAgICAgdHJpYWxzIDw9IDAgfHwgdHJpYWxzICUgMSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIFdlIGluaXRpYWxpemUgYHhgLCB0aGUgcmFuZG9tIHZhcmlhYmxlLCBhbmQgYGFjY3VtdWxhdG9yYCwgYW4gYWNjdW11bGF0b3JcbiAgICAvLyBmb3IgdGhlIGN1bXVsYXRpdmUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uIHRvIDAuIGBkaXN0cmlidXRpb25fZnVuY3Rpb25zYFxuICAgIC8vIGlzIHRoZSBvYmplY3Qgd2UnbGwgcmV0dXJuIHdpdGggdGhlIGBwcm9iYWJpbGl0eV9vZl94YCBhbmQgdGhlXG4gICAgLy8gYGN1bXVsYXRpdmVQcm9iYWJpbGl0eV9vZl94YCwgYXMgd2VsbCBhcyB0aGUgY2FsY3VsYXRlZCBtZWFuICZcbiAgICAvLyB2YXJpYW5jZS4gV2UgaXRlcmF0ZSB1bnRpbCB0aGUgYGN1bXVsYXRpdmVQcm9iYWJpbGl0eV9vZl94YCBpc1xuICAgIC8vIHdpdGhpbiBgZXBzaWxvbmAgb2YgMS4wLlxuICAgIHZhciB4ID0gMCxcbiAgICAgICAgY3VtdWxhdGl2ZVByb2JhYmlsaXR5ID0gMCxcbiAgICAgICAgY2VsbHMgPSBbXSxcbiAgICAgICAgYmlub21pYWxDb2VmZmljaWVudCA9IDE7XG5cbiAgICAvLyBUaGlzIGFsZ29yaXRobSBpdGVyYXRlcyB0aHJvdWdoIGVhY2ggcG90ZW50aWFsIG91dGNvbWUsXG4gICAgLy8gdW50aWwgdGhlIGBjdW11bGF0aXZlUHJvYmFiaWxpdHlgIGlzIHZlcnkgY2xvc2UgdG8gMSwgYXRcbiAgICAvLyB3aGljaCBwb2ludCB3ZSd2ZSBkZWZpbmVkIHRoZSB2YXN0IG1ham9yaXR5IG9mIG91dGNvbWVzXG4gICAgZG8ge1xuICAgICAgICAvLyBhIFtwcm9iYWJpbGl0eSBtYXNzIGZ1bmN0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qcm9iYWJpbGl0eV9tYXNzX2Z1bmN0aW9uKVxuICAgICAgICBjZWxsc1t4XSA9IGJpbm9taWFsQ29lZmZpY2llbnQgKlxuICAgICAgICAgICAgTWF0aC5wb3cocHJvYmFiaWxpdHksIHgpICogTWF0aC5wb3coMSAtIHByb2JhYmlsaXR5LCB0cmlhbHMgLSB4KTtcbiAgICAgICAgY3VtdWxhdGl2ZVByb2JhYmlsaXR5ICs9IGNlbGxzW3hdO1xuICAgICAgICB4Kys7XG4gICAgICAgIGJpbm9taWFsQ29lZmZpY2llbnQgPSBiaW5vbWlhbENvZWZmaWNpZW50ICogKHRyaWFscyAtIHggKyAxKSAvIHg7XG4gICAgLy8gd2hlbiB0aGUgY3VtdWxhdGl2ZVByb2JhYmlsaXR5IGlzIG5lYXJseSAxLCB3ZSd2ZSBjYWxjdWxhdGVkXG4gICAgLy8gdGhlIHVzZWZ1bCByYW5nZSBvZiB0aGlzIGRpc3RyaWJ1dGlvblxuICAgIH0gd2hpbGUgKGN1bXVsYXRpdmVQcm9iYWJpbGl0eSA8IDEgLSBlcHNpbG9uKTtcblxuICAgIHJldHVybiBjZWxscztcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW1BvaXNzb24gRGlzdHJpYnV0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BvaXNzb25fZGlzdHJpYnV0aW9uKVxuICogaXMgYSBkaXNjcmV0ZSBwcm9iYWJpbGl0eSBkaXN0cmlidXRpb24gdGhhdCBleHByZXNzZXMgdGhlIHByb2JhYmlsaXR5XG4gKiBvZiBhIGdpdmVuIG51bWJlciBvZiBldmVudHMgb2NjdXJyaW5nIGluIGEgZml4ZWQgaW50ZXJ2YWwgb2YgdGltZVxuICogYW5kL29yIHNwYWNlIGlmIHRoZXNlIGV2ZW50cyBvY2N1ciB3aXRoIGEga25vd24gYXZlcmFnZSByYXRlIGFuZFxuICogaW5kZXBlbmRlbnRseSBvZiB0aGUgdGltZSBzaW5jZSB0aGUgbGFzdCBldmVudC5cbiAqXG4gKiBUaGUgUG9pc3NvbiBEaXN0cmlidXRpb24gaXMgY2hhcmFjdGVyaXplZCBieSB0aGUgc3RyaWN0bHkgcG9zaXRpdmVcbiAqIG1lYW4gYXJyaXZhbCBvciBvY2N1cnJlbmNlIHJhdGUsIGDOu2AuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxhbWJkYSBsb2NhdGlvbiBwb2lzc29uIGRpc3RyaWJ1dGlvblxuICogQHJldHVybnMge251bWJlcltdfSB2YWx1ZXMgb2YgcG9pc3NvbiBkaXN0cmlidXRpb24gYXQgdGhhdCBwb2ludFxuICovXG5mdW5jdGlvbiBwb2lzc29uRGlzdHJpYnV0aW9uKGxhbWJkYS8qOiBudW1iZXIgKi8pIC8qOiA/bnVtYmVyW10gKi8ge1xuICAgIC8vIENoZWNrIHRoYXQgbGFtYmRhIGlzIHN0cmljdGx5IHBvc2l0aXZlXG4gICAgaWYgKGxhbWJkYSA8PSAwKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cblxuICAgIC8vIG91ciBjdXJyZW50IHBsYWNlIGluIHRoZSBkaXN0cmlidXRpb25cbiAgICB2YXIgeCA9IDAsXG4gICAgICAgIC8vIGFuZCB3ZSBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IGN1bXVsYXRpdmUgcHJvYmFiaWxpdHksIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIGtub3cgd2hlbiB0byBzdG9wIGNhbGN1bGF0aW5nIGNoYW5jZXMuXG4gICAgICAgIGN1bXVsYXRpdmVQcm9iYWJpbGl0eSA9IDAsXG4gICAgICAgIC8vIHRoZSBjYWxjdWxhdGVkIGNlbGxzIHRvIGJlIHJldHVybmVkXG4gICAgICAgIGNlbGxzID0gW10sXG4gICAgICAgIGZhY3RvcmlhbFggPSAxO1xuXG4gICAgLy8gVGhpcyBhbGdvcml0aG0gaXRlcmF0ZXMgdGhyb3VnaCBlYWNoIHBvdGVudGlhbCBvdXRjb21lLFxuICAgIC8vIHVudGlsIHRoZSBgY3VtdWxhdGl2ZVByb2JhYmlsaXR5YCBpcyB2ZXJ5IGNsb3NlIHRvIDEsIGF0XG4gICAgLy8gd2hpY2ggcG9pbnQgd2UndmUgZGVmaW5lZCB0aGUgdmFzdCBtYWpvcml0eSBvZiBvdXRjb21lc1xuICAgIGRvIHtcbiAgICAgICAgLy8gYSBbcHJvYmFiaWxpdHkgbWFzcyBmdW5jdGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUHJvYmFiaWxpdHlfbWFzc19mdW5jdGlvbilcbiAgICAgICAgY2VsbHNbeF0gPSAoTWF0aC5leHAoLWxhbWJkYSkgKiBNYXRoLnBvdyhsYW1iZGEsIHgpKSAvIGZhY3RvcmlhbFg7XG4gICAgICAgIGN1bXVsYXRpdmVQcm9iYWJpbGl0eSArPSBjZWxsc1t4XTtcbiAgICAgICAgeCsrO1xuICAgICAgICBmYWN0b3JpYWxYICo9IHg7XG4gICAgLy8gd2hlbiB0aGUgY3VtdWxhdGl2ZVByb2JhYmlsaXR5IGlzIG5lYXJseSAxLCB3ZSd2ZSBjYWxjdWxhdGVkXG4gICAgLy8gdGhlIHVzZWZ1bCByYW5nZSBvZiB0aGlzIGRpc3RyaWJ1dGlvblxuICAgIH0gd2hpbGUgKGN1bXVsYXRpdmVQcm9iYWJpbGl0eSA8IDEgLSBlcHNpbG9uKTtcblxuICAgIHJldHVybiBjZWxscztcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiAqKlBlcmNlbnRhZ2UgUG9pbnRzIG9mIHRoZSDPhzIgKENoaS1TcXVhcmVkKSBEaXN0cmlidXRpb24qKlxuICpcbiAqIFRoZSBbz4cyIChDaGktU3F1YXJlZCkgRGlzdHJpYnV0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NoaS1zcXVhcmVkX2Rpc3RyaWJ1dGlvbikgaXMgdXNlZCBpbiB0aGUgY29tbW9uXG4gKiBjaGktc3F1YXJlZCB0ZXN0cyBmb3IgZ29vZG5lc3Mgb2YgZml0IG9mIGFuIG9ic2VydmVkIGRpc3RyaWJ1dGlvbiB0byBhIHRoZW9yZXRpY2FsIG9uZSwgdGhlIGluZGVwZW5kZW5jZSBvZiB0d29cbiAqIGNyaXRlcmlhIG9mIGNsYXNzaWZpY2F0aW9uIG9mIHF1YWxpdGF0aXZlIGRhdGEsIGFuZCBpbiBjb25maWRlbmNlIGludGVydmFsIGVzdGltYXRpb24gZm9yIGEgcG9wdWxhdGlvbiBzdGFuZGFyZFxuICogZGV2aWF0aW9uIG9mIGEgbm9ybWFsIGRpc3RyaWJ1dGlvbiBmcm9tIGEgc2FtcGxlIHN0YW5kYXJkIGRldmlhdGlvbi5cbiAqXG4gKiBWYWx1ZXMgZnJvbSBBcHBlbmRpeCAxLCBUYWJsZSBJSUkgb2YgV2lsbGlhbSBXLiBIaW5lcyAmIERvdWdsYXMgQy4gTW9udGdvbWVyeSwgXCJQcm9iYWJpbGl0eSBhbmQgU3RhdGlzdGljcyBpblxuICogRW5naW5lZXJpbmcgYW5kIE1hbmFnZW1lbnQgU2NpZW5jZVwiLCBXaWxleSAoMTk4MCkuXG4gKi9cbnZhciBjaGlTcXVhcmVkRGlzdHJpYnV0aW9uVGFibGUgPSB7XG4gICAgJzEnOiB7XG4gICAgICAgICcwLjk5NSc6IDAsXG4gICAgICAgICcwLjk5JzogMCxcbiAgICAgICAgJzAuOTc1JzogMCxcbiAgICAgICAgJzAuOTUnOiAwLFxuICAgICAgICAnMC45JzogMC4wMixcbiAgICAgICAgJzAuNSc6IDAuNDUsXG4gICAgICAgICcwLjEnOiAyLjcxLFxuICAgICAgICAnMC4wNSc6IDMuODQsXG4gICAgICAgICcwLjAyNSc6IDUuMDIsXG4gICAgICAgICcwLjAxJzogNi42MyxcbiAgICAgICAgJzAuMDA1JzogNy44OFxuICAgIH0sXG4gICAgJzInOiB7XG4gICAgICAgICcwLjk5NSc6IDAuMDEsXG4gICAgICAgICcwLjk5JzogMC4wMixcbiAgICAgICAgJzAuOTc1JzogMC4wNSxcbiAgICAgICAgJzAuOTUnOiAwLjEsXG4gICAgICAgICcwLjknOiAwLjIxLFxuICAgICAgICAnMC41JzogMS4zOSxcbiAgICAgICAgJzAuMSc6IDQuNjEsXG4gICAgICAgICcwLjA1JzogNS45OSxcbiAgICAgICAgJzAuMDI1JzogNy4zOCxcbiAgICAgICAgJzAuMDEnOiA5LjIxLFxuICAgICAgICAnMC4wMDUnOiAxMC42XG4gICAgfSxcbiAgICAnMyc6IHtcbiAgICAgICAgJzAuOTk1JzogMC4wNyxcbiAgICAgICAgJzAuOTknOiAwLjExLFxuICAgICAgICAnMC45NzUnOiAwLjIyLFxuICAgICAgICAnMC45NSc6IDAuMzUsXG4gICAgICAgICcwLjknOiAwLjU4LFxuICAgICAgICAnMC41JzogMi4zNyxcbiAgICAgICAgJzAuMSc6IDYuMjUsXG4gICAgICAgICcwLjA1JzogNy44MSxcbiAgICAgICAgJzAuMDI1JzogOS4zNSxcbiAgICAgICAgJzAuMDEnOiAxMS4zNCxcbiAgICAgICAgJzAuMDA1JzogMTIuODRcbiAgICB9LFxuICAgICc0Jzoge1xuICAgICAgICAnMC45OTUnOiAwLjIxLFxuICAgICAgICAnMC45OSc6IDAuMyxcbiAgICAgICAgJzAuOTc1JzogMC40OCxcbiAgICAgICAgJzAuOTUnOiAwLjcxLFxuICAgICAgICAnMC45JzogMS4wNixcbiAgICAgICAgJzAuNSc6IDMuMzYsXG4gICAgICAgICcwLjEnOiA3Ljc4LFxuICAgICAgICAnMC4wNSc6IDkuNDksXG4gICAgICAgICcwLjAyNSc6IDExLjE0LFxuICAgICAgICAnMC4wMSc6IDEzLjI4LFxuICAgICAgICAnMC4wMDUnOiAxNC44NlxuICAgIH0sXG4gICAgJzUnOiB7XG4gICAgICAgICcwLjk5NSc6IDAuNDEsXG4gICAgICAgICcwLjk5JzogMC41NSxcbiAgICAgICAgJzAuOTc1JzogMC44MyxcbiAgICAgICAgJzAuOTUnOiAxLjE1LFxuICAgICAgICAnMC45JzogMS42MSxcbiAgICAgICAgJzAuNSc6IDQuMzUsXG4gICAgICAgICcwLjEnOiA5LjI0LFxuICAgICAgICAnMC4wNSc6IDExLjA3LFxuICAgICAgICAnMC4wMjUnOiAxMi44MyxcbiAgICAgICAgJzAuMDEnOiAxNS4wOSxcbiAgICAgICAgJzAuMDA1JzogMTYuNzVcbiAgICB9LFxuICAgICc2Jzoge1xuICAgICAgICAnMC45OTUnOiAwLjY4LFxuICAgICAgICAnMC45OSc6IDAuODcsXG4gICAgICAgICcwLjk3NSc6IDEuMjQsXG4gICAgICAgICcwLjk1JzogMS42NCxcbiAgICAgICAgJzAuOSc6IDIuMixcbiAgICAgICAgJzAuNSc6IDUuMzUsXG4gICAgICAgICcwLjEnOiAxMC42NSxcbiAgICAgICAgJzAuMDUnOiAxMi41OSxcbiAgICAgICAgJzAuMDI1JzogMTQuNDUsXG4gICAgICAgICcwLjAxJzogMTYuODEsXG4gICAgICAgICcwLjAwNSc6IDE4LjU1XG4gICAgfSxcbiAgICAnNyc6IHtcbiAgICAgICAgJzAuOTk1JzogMC45OSxcbiAgICAgICAgJzAuOTknOiAxLjI1LFxuICAgICAgICAnMC45NzUnOiAxLjY5LFxuICAgICAgICAnMC45NSc6IDIuMTcsXG4gICAgICAgICcwLjknOiAyLjgzLFxuICAgICAgICAnMC41JzogNi4zNSxcbiAgICAgICAgJzAuMSc6IDEyLjAyLFxuICAgICAgICAnMC4wNSc6IDE0LjA3LFxuICAgICAgICAnMC4wMjUnOiAxNi4wMSxcbiAgICAgICAgJzAuMDEnOiAxOC40OCxcbiAgICAgICAgJzAuMDA1JzogMjAuMjhcbiAgICB9LFxuICAgICc4Jzoge1xuICAgICAgICAnMC45OTUnOiAxLjM0LFxuICAgICAgICAnMC45OSc6IDEuNjUsXG4gICAgICAgICcwLjk3NSc6IDIuMTgsXG4gICAgICAgICcwLjk1JzogMi43MyxcbiAgICAgICAgJzAuOSc6IDMuNDksXG4gICAgICAgICcwLjUnOiA3LjM0LFxuICAgICAgICAnMC4xJzogMTMuMzYsXG4gICAgICAgICcwLjA1JzogMTUuNTEsXG4gICAgICAgICcwLjAyNSc6IDE3LjUzLFxuICAgICAgICAnMC4wMSc6IDIwLjA5LFxuICAgICAgICAnMC4wMDUnOiAyMS45NlxuICAgIH0sXG4gICAgJzknOiB7XG4gICAgICAgICcwLjk5NSc6IDEuNzMsXG4gICAgICAgICcwLjk5JzogMi4wOSxcbiAgICAgICAgJzAuOTc1JzogMi43LFxuICAgICAgICAnMC45NSc6IDMuMzMsXG4gICAgICAgICcwLjknOiA0LjE3LFxuICAgICAgICAnMC41JzogOC4zNCxcbiAgICAgICAgJzAuMSc6IDE0LjY4LFxuICAgICAgICAnMC4wNSc6IDE2LjkyLFxuICAgICAgICAnMC4wMjUnOiAxOS4wMixcbiAgICAgICAgJzAuMDEnOiAyMS42NyxcbiAgICAgICAgJzAuMDA1JzogMjMuNTlcbiAgICB9LFxuICAgICcxMCc6IHtcbiAgICAgICAgJzAuOTk1JzogMi4xNixcbiAgICAgICAgJzAuOTknOiAyLjU2LFxuICAgICAgICAnMC45NzUnOiAzLjI1LFxuICAgICAgICAnMC45NSc6IDMuOTQsXG4gICAgICAgICcwLjknOiA0Ljg3LFxuICAgICAgICAnMC41JzogOS4zNCxcbiAgICAgICAgJzAuMSc6IDE1Ljk5LFxuICAgICAgICAnMC4wNSc6IDE4LjMxLFxuICAgICAgICAnMC4wMjUnOiAyMC40OCxcbiAgICAgICAgJzAuMDEnOiAyMy4yMSxcbiAgICAgICAgJzAuMDA1JzogMjUuMTlcbiAgICB9LFxuICAgICcxMSc6IHtcbiAgICAgICAgJzAuOTk1JzogMi42LFxuICAgICAgICAnMC45OSc6IDMuMDUsXG4gICAgICAgICcwLjk3NSc6IDMuODIsXG4gICAgICAgICcwLjk1JzogNC41NyxcbiAgICAgICAgJzAuOSc6IDUuNTgsXG4gICAgICAgICcwLjUnOiAxMC4zNCxcbiAgICAgICAgJzAuMSc6IDE3LjI4LFxuICAgICAgICAnMC4wNSc6IDE5LjY4LFxuICAgICAgICAnMC4wMjUnOiAyMS45MixcbiAgICAgICAgJzAuMDEnOiAyNC43MixcbiAgICAgICAgJzAuMDA1JzogMjYuNzZcbiAgICB9LFxuICAgICcxMic6IHtcbiAgICAgICAgJzAuOTk1JzogMy4wNyxcbiAgICAgICAgJzAuOTknOiAzLjU3LFxuICAgICAgICAnMC45NzUnOiA0LjQsXG4gICAgICAgICcwLjk1JzogNS4yMyxcbiAgICAgICAgJzAuOSc6IDYuMyxcbiAgICAgICAgJzAuNSc6IDExLjM0LFxuICAgICAgICAnMC4xJzogMTguNTUsXG4gICAgICAgICcwLjA1JzogMjEuMDMsXG4gICAgICAgICcwLjAyNSc6IDIzLjM0LFxuICAgICAgICAnMC4wMSc6IDI2LjIyLFxuICAgICAgICAnMC4wMDUnOiAyOC4zXG4gICAgfSxcbiAgICAnMTMnOiB7XG4gICAgICAgICcwLjk5NSc6IDMuNTcsXG4gICAgICAgICcwLjk5JzogNC4xMSxcbiAgICAgICAgJzAuOTc1JzogNS4wMSxcbiAgICAgICAgJzAuOTUnOiA1Ljg5LFxuICAgICAgICAnMC45JzogNy4wNCxcbiAgICAgICAgJzAuNSc6IDEyLjM0LFxuICAgICAgICAnMC4xJzogMTkuODEsXG4gICAgICAgICcwLjA1JzogMjIuMzYsXG4gICAgICAgICcwLjAyNSc6IDI0Ljc0LFxuICAgICAgICAnMC4wMSc6IDI3LjY5LFxuICAgICAgICAnMC4wMDUnOiAyOS44MlxuICAgIH0sXG4gICAgJzE0Jzoge1xuICAgICAgICAnMC45OTUnOiA0LjA3LFxuICAgICAgICAnMC45OSc6IDQuNjYsXG4gICAgICAgICcwLjk3NSc6IDUuNjMsXG4gICAgICAgICcwLjk1JzogNi41NyxcbiAgICAgICAgJzAuOSc6IDcuNzksXG4gICAgICAgICcwLjUnOiAxMy4zNCxcbiAgICAgICAgJzAuMSc6IDIxLjA2LFxuICAgICAgICAnMC4wNSc6IDIzLjY4LFxuICAgICAgICAnMC4wMjUnOiAyNi4xMixcbiAgICAgICAgJzAuMDEnOiAyOS4xNCxcbiAgICAgICAgJzAuMDA1JzogMzEuMzJcbiAgICB9LFxuICAgICcxNSc6IHtcbiAgICAgICAgJzAuOTk1JzogNC42LFxuICAgICAgICAnMC45OSc6IDUuMjMsXG4gICAgICAgICcwLjk3NSc6IDYuMjcsXG4gICAgICAgICcwLjk1JzogNy4yNixcbiAgICAgICAgJzAuOSc6IDguNTUsXG4gICAgICAgICcwLjUnOiAxNC4zNCxcbiAgICAgICAgJzAuMSc6IDIyLjMxLFxuICAgICAgICAnMC4wNSc6IDI1LFxuICAgICAgICAnMC4wMjUnOiAyNy40OSxcbiAgICAgICAgJzAuMDEnOiAzMC41OCxcbiAgICAgICAgJzAuMDA1JzogMzIuOFxuICAgIH0sXG4gICAgJzE2Jzoge1xuICAgICAgICAnMC45OTUnOiA1LjE0LFxuICAgICAgICAnMC45OSc6IDUuODEsXG4gICAgICAgICcwLjk3NSc6IDYuOTEsXG4gICAgICAgICcwLjk1JzogNy45NixcbiAgICAgICAgJzAuOSc6IDkuMzEsXG4gICAgICAgICcwLjUnOiAxNS4zNCxcbiAgICAgICAgJzAuMSc6IDIzLjU0LFxuICAgICAgICAnMC4wNSc6IDI2LjMsXG4gICAgICAgICcwLjAyNSc6IDI4Ljg1LFxuICAgICAgICAnMC4wMSc6IDMyLFxuICAgICAgICAnMC4wMDUnOiAzNC4yN1xuICAgIH0sXG4gICAgJzE3Jzoge1xuICAgICAgICAnMC45OTUnOiA1LjcsXG4gICAgICAgICcwLjk5JzogNi40MSxcbiAgICAgICAgJzAuOTc1JzogNy41NixcbiAgICAgICAgJzAuOTUnOiA4LjY3LFxuICAgICAgICAnMC45JzogMTAuMDksXG4gICAgICAgICcwLjUnOiAxNi4zNCxcbiAgICAgICAgJzAuMSc6IDI0Ljc3LFxuICAgICAgICAnMC4wNSc6IDI3LjU5LFxuICAgICAgICAnMC4wMjUnOiAzMC4xOSxcbiAgICAgICAgJzAuMDEnOiAzMy40MSxcbiAgICAgICAgJzAuMDA1JzogMzUuNzJcbiAgICB9LFxuICAgICcxOCc6IHtcbiAgICAgICAgJzAuOTk1JzogNi4yNixcbiAgICAgICAgJzAuOTknOiA3LjAxLFxuICAgICAgICAnMC45NzUnOiA4LjIzLFxuICAgICAgICAnMC45NSc6IDkuMzksXG4gICAgICAgICcwLjknOiAxMC44NyxcbiAgICAgICAgJzAuNSc6IDE3LjM0LFxuICAgICAgICAnMC4xJzogMjUuOTksXG4gICAgICAgICcwLjA1JzogMjguODcsXG4gICAgICAgICcwLjAyNSc6IDMxLjUzLFxuICAgICAgICAnMC4wMSc6IDM0LjgxLFxuICAgICAgICAnMC4wMDUnOiAzNy4xNlxuICAgIH0sXG4gICAgJzE5Jzoge1xuICAgICAgICAnMC45OTUnOiA2Ljg0LFxuICAgICAgICAnMC45OSc6IDcuNjMsXG4gICAgICAgICcwLjk3NSc6IDguOTEsXG4gICAgICAgICcwLjk1JzogMTAuMTIsXG4gICAgICAgICcwLjknOiAxMS42NSxcbiAgICAgICAgJzAuNSc6IDE4LjM0LFxuICAgICAgICAnMC4xJzogMjcuMixcbiAgICAgICAgJzAuMDUnOiAzMC4xNCxcbiAgICAgICAgJzAuMDI1JzogMzIuODUsXG4gICAgICAgICcwLjAxJzogMzYuMTksXG4gICAgICAgICcwLjAwNSc6IDM4LjU4XG4gICAgfSxcbiAgICAnMjAnOiB7XG4gICAgICAgICcwLjk5NSc6IDcuNDMsXG4gICAgICAgICcwLjk5JzogOC4yNixcbiAgICAgICAgJzAuOTc1JzogOS41OSxcbiAgICAgICAgJzAuOTUnOiAxMC44NSxcbiAgICAgICAgJzAuOSc6IDEyLjQ0LFxuICAgICAgICAnMC41JzogMTkuMzQsXG4gICAgICAgICcwLjEnOiAyOC40MSxcbiAgICAgICAgJzAuMDUnOiAzMS40MSxcbiAgICAgICAgJzAuMDI1JzogMzQuMTcsXG4gICAgICAgICcwLjAxJzogMzcuNTcsXG4gICAgICAgICcwLjAwNSc6IDQwXG4gICAgfSxcbiAgICAnMjEnOiB7XG4gICAgICAgICcwLjk5NSc6IDguMDMsXG4gICAgICAgICcwLjk5JzogOC45LFxuICAgICAgICAnMC45NzUnOiAxMC4yOCxcbiAgICAgICAgJzAuOTUnOiAxMS41OSxcbiAgICAgICAgJzAuOSc6IDEzLjI0LFxuICAgICAgICAnMC41JzogMjAuMzQsXG4gICAgICAgICcwLjEnOiAyOS42MixcbiAgICAgICAgJzAuMDUnOiAzMi42NyxcbiAgICAgICAgJzAuMDI1JzogMzUuNDgsXG4gICAgICAgICcwLjAxJzogMzguOTMsXG4gICAgICAgICcwLjAwNSc6IDQxLjRcbiAgICB9LFxuICAgICcyMic6IHtcbiAgICAgICAgJzAuOTk1JzogOC42NCxcbiAgICAgICAgJzAuOTknOiA5LjU0LFxuICAgICAgICAnMC45NzUnOiAxMC45OCxcbiAgICAgICAgJzAuOTUnOiAxMi4zNCxcbiAgICAgICAgJzAuOSc6IDE0LjA0LFxuICAgICAgICAnMC41JzogMjEuMzQsXG4gICAgICAgICcwLjEnOiAzMC44MSxcbiAgICAgICAgJzAuMDUnOiAzMy45MixcbiAgICAgICAgJzAuMDI1JzogMzYuNzgsXG4gICAgICAgICcwLjAxJzogNDAuMjksXG4gICAgICAgICcwLjAwNSc6IDQyLjhcbiAgICB9LFxuICAgICcyMyc6IHtcbiAgICAgICAgJzAuOTk1JzogOS4yNixcbiAgICAgICAgJzAuOTknOiAxMC4yLFxuICAgICAgICAnMC45NzUnOiAxMS42OSxcbiAgICAgICAgJzAuOTUnOiAxMy4wOSxcbiAgICAgICAgJzAuOSc6IDE0Ljg1LFxuICAgICAgICAnMC41JzogMjIuMzQsXG4gICAgICAgICcwLjEnOiAzMi4wMSxcbiAgICAgICAgJzAuMDUnOiAzNS4xNyxcbiAgICAgICAgJzAuMDI1JzogMzguMDgsXG4gICAgICAgICcwLjAxJzogNDEuNjQsXG4gICAgICAgICcwLjAwNSc6IDQ0LjE4XG4gICAgfSxcbiAgICAnMjQnOiB7XG4gICAgICAgICcwLjk5NSc6IDkuODksXG4gICAgICAgICcwLjk5JzogMTAuODYsXG4gICAgICAgICcwLjk3NSc6IDEyLjQsXG4gICAgICAgICcwLjk1JzogMTMuODUsXG4gICAgICAgICcwLjknOiAxNS42NixcbiAgICAgICAgJzAuNSc6IDIzLjM0LFxuICAgICAgICAnMC4xJzogMzMuMixcbiAgICAgICAgJzAuMDUnOiAzNi40MixcbiAgICAgICAgJzAuMDI1JzogMzkuMzYsXG4gICAgICAgICcwLjAxJzogNDIuOTgsXG4gICAgICAgICcwLjAwNSc6IDQ1LjU2XG4gICAgfSxcbiAgICAnMjUnOiB7XG4gICAgICAgICcwLjk5NSc6IDEwLjUyLFxuICAgICAgICAnMC45OSc6IDExLjUyLFxuICAgICAgICAnMC45NzUnOiAxMy4xMixcbiAgICAgICAgJzAuOTUnOiAxNC42MSxcbiAgICAgICAgJzAuOSc6IDE2LjQ3LFxuICAgICAgICAnMC41JzogMjQuMzQsXG4gICAgICAgICcwLjEnOiAzNC4yOCxcbiAgICAgICAgJzAuMDUnOiAzNy42NSxcbiAgICAgICAgJzAuMDI1JzogNDAuNjUsXG4gICAgICAgICcwLjAxJzogNDQuMzEsXG4gICAgICAgICcwLjAwNSc6IDQ2LjkzXG4gICAgfSxcbiAgICAnMjYnOiB7XG4gICAgICAgICcwLjk5NSc6IDExLjE2LFxuICAgICAgICAnMC45OSc6IDEyLjIsXG4gICAgICAgICcwLjk3NSc6IDEzLjg0LFxuICAgICAgICAnMC45NSc6IDE1LjM4LFxuICAgICAgICAnMC45JzogMTcuMjksXG4gICAgICAgICcwLjUnOiAyNS4zNCxcbiAgICAgICAgJzAuMSc6IDM1LjU2LFxuICAgICAgICAnMC4wNSc6IDM4Ljg5LFxuICAgICAgICAnMC4wMjUnOiA0MS45MixcbiAgICAgICAgJzAuMDEnOiA0NS42NCxcbiAgICAgICAgJzAuMDA1JzogNDguMjlcbiAgICB9LFxuICAgICcyNyc6IHtcbiAgICAgICAgJzAuOTk1JzogMTEuODEsXG4gICAgICAgICcwLjk5JzogMTIuODgsXG4gICAgICAgICcwLjk3NSc6IDE0LjU3LFxuICAgICAgICAnMC45NSc6IDE2LjE1LFxuICAgICAgICAnMC45JzogMTguMTEsXG4gICAgICAgICcwLjUnOiAyNi4zNCxcbiAgICAgICAgJzAuMSc6IDM2Ljc0LFxuICAgICAgICAnMC4wNSc6IDQwLjExLFxuICAgICAgICAnMC4wMjUnOiA0My4xOSxcbiAgICAgICAgJzAuMDEnOiA0Ni45NixcbiAgICAgICAgJzAuMDA1JzogNDkuNjVcbiAgICB9LFxuICAgICcyOCc6IHtcbiAgICAgICAgJzAuOTk1JzogMTIuNDYsXG4gICAgICAgICcwLjk5JzogMTMuNTcsXG4gICAgICAgICcwLjk3NSc6IDE1LjMxLFxuICAgICAgICAnMC45NSc6IDE2LjkzLFxuICAgICAgICAnMC45JzogMTguOTQsXG4gICAgICAgICcwLjUnOiAyNy4zNCxcbiAgICAgICAgJzAuMSc6IDM3LjkyLFxuICAgICAgICAnMC4wNSc6IDQxLjM0LFxuICAgICAgICAnMC4wMjUnOiA0NC40NixcbiAgICAgICAgJzAuMDEnOiA0OC4yOCxcbiAgICAgICAgJzAuMDA1JzogNTAuOTlcbiAgICB9LFxuICAgICcyOSc6IHtcbiAgICAgICAgJzAuOTk1JzogMTMuMTIsXG4gICAgICAgICcwLjk5JzogMTQuMjYsXG4gICAgICAgICcwLjk3NSc6IDE2LjA1LFxuICAgICAgICAnMC45NSc6IDE3LjcxLFxuICAgICAgICAnMC45JzogMTkuNzcsXG4gICAgICAgICcwLjUnOiAyOC4zNCxcbiAgICAgICAgJzAuMSc6IDM5LjA5LFxuICAgICAgICAnMC4wNSc6IDQyLjU2LFxuICAgICAgICAnMC4wMjUnOiA0NS43MixcbiAgICAgICAgJzAuMDEnOiA0OS41OSxcbiAgICAgICAgJzAuMDA1JzogNTIuMzRcbiAgICB9LFxuICAgICczMCc6IHtcbiAgICAgICAgJzAuOTk1JzogMTMuNzksXG4gICAgICAgICcwLjk5JzogMTQuOTUsXG4gICAgICAgICcwLjk3NSc6IDE2Ljc5LFxuICAgICAgICAnMC45NSc6IDE4LjQ5LFxuICAgICAgICAnMC45JzogMjAuNixcbiAgICAgICAgJzAuNSc6IDI5LjM0LFxuICAgICAgICAnMC4xJzogNDAuMjYsXG4gICAgICAgICcwLjA1JzogNDMuNzcsXG4gICAgICAgICcwLjAyNSc6IDQ2Ljk4LFxuICAgICAgICAnMC4wMSc6IDUwLjg5LFxuICAgICAgICAnMC4wMDUnOiA1My42N1xuICAgIH0sXG4gICAgJzQwJzoge1xuICAgICAgICAnMC45OTUnOiAyMC43MSxcbiAgICAgICAgJzAuOTknOiAyMi4xNixcbiAgICAgICAgJzAuOTc1JzogMjQuNDMsXG4gICAgICAgICcwLjk1JzogMjYuNTEsXG4gICAgICAgICcwLjknOiAyOS4wNSxcbiAgICAgICAgJzAuNSc6IDM5LjM0LFxuICAgICAgICAnMC4xJzogNTEuODEsXG4gICAgICAgICcwLjA1JzogNTUuNzYsXG4gICAgICAgICcwLjAyNSc6IDU5LjM0LFxuICAgICAgICAnMC4wMSc6IDYzLjY5LFxuICAgICAgICAnMC4wMDUnOiA2Ni43N1xuICAgIH0sXG4gICAgJzUwJzoge1xuICAgICAgICAnMC45OTUnOiAyNy45OSxcbiAgICAgICAgJzAuOTknOiAyOS43MSxcbiAgICAgICAgJzAuOTc1JzogMzIuMzYsXG4gICAgICAgICcwLjk1JzogMzQuNzYsXG4gICAgICAgICcwLjknOiAzNy42OSxcbiAgICAgICAgJzAuNSc6IDQ5LjMzLFxuICAgICAgICAnMC4xJzogNjMuMTcsXG4gICAgICAgICcwLjA1JzogNjcuNSxcbiAgICAgICAgJzAuMDI1JzogNzEuNDIsXG4gICAgICAgICcwLjAxJzogNzYuMTUsXG4gICAgICAgICcwLjAwNSc6IDc5LjQ5XG4gICAgfSxcbiAgICAnNjAnOiB7XG4gICAgICAgICcwLjk5NSc6IDM1LjUzLFxuICAgICAgICAnMC45OSc6IDM3LjQ4LFxuICAgICAgICAnMC45NzUnOiA0MC40OCxcbiAgICAgICAgJzAuOTUnOiA0My4xOSxcbiAgICAgICAgJzAuOSc6IDQ2LjQ2LFxuICAgICAgICAnMC41JzogNTkuMzMsXG4gICAgICAgICcwLjEnOiA3NC40LFxuICAgICAgICAnMC4wNSc6IDc5LjA4LFxuICAgICAgICAnMC4wMjUnOiA4My4zLFxuICAgICAgICAnMC4wMSc6IDg4LjM4LFxuICAgICAgICAnMC4wMDUnOiA5MS45NVxuICAgIH0sXG4gICAgJzcwJzoge1xuICAgICAgICAnMC45OTUnOiA0My4yOCxcbiAgICAgICAgJzAuOTknOiA0NS40NCxcbiAgICAgICAgJzAuOTc1JzogNDguNzYsXG4gICAgICAgICcwLjk1JzogNTEuNzQsXG4gICAgICAgICcwLjknOiA1NS4zMyxcbiAgICAgICAgJzAuNSc6IDY5LjMzLFxuICAgICAgICAnMC4xJzogODUuNTMsXG4gICAgICAgICcwLjA1JzogOTAuNTMsXG4gICAgICAgICcwLjAyNSc6IDk1LjAyLFxuICAgICAgICAnMC4wMSc6IDEwMC40MixcbiAgICAgICAgJzAuMDA1JzogMTA0LjIyXG4gICAgfSxcbiAgICAnODAnOiB7XG4gICAgICAgICcwLjk5NSc6IDUxLjE3LFxuICAgICAgICAnMC45OSc6IDUzLjU0LFxuICAgICAgICAnMC45NzUnOiA1Ny4xNSxcbiAgICAgICAgJzAuOTUnOiA2MC4zOSxcbiAgICAgICAgJzAuOSc6IDY0LjI4LFxuICAgICAgICAnMC41JzogNzkuMzMsXG4gICAgICAgICcwLjEnOiA5Ni41OCxcbiAgICAgICAgJzAuMDUnOiAxMDEuODgsXG4gICAgICAgICcwLjAyNSc6IDEwNi42MyxcbiAgICAgICAgJzAuMDEnOiAxMTIuMzMsXG4gICAgICAgICcwLjAwNSc6IDExNi4zMlxuICAgIH0sXG4gICAgJzkwJzoge1xuICAgICAgICAnMC45OTUnOiA1OS4yLFxuICAgICAgICAnMC45OSc6IDYxLjc1LFxuICAgICAgICAnMC45NzUnOiA2NS42NSxcbiAgICAgICAgJzAuOTUnOiA2OS4xMyxcbiAgICAgICAgJzAuOSc6IDczLjI5LFxuICAgICAgICAnMC41JzogODkuMzMsXG4gICAgICAgICcwLjEnOiAxMDcuNTcsXG4gICAgICAgICcwLjA1JzogMTEzLjE0LFxuICAgICAgICAnMC4wMjUnOiAxMTguMTQsXG4gICAgICAgICcwLjAxJzogMTI0LjEyLFxuICAgICAgICAnMC4wMDUnOiAxMjguM1xuICAgIH0sXG4gICAgJzEwMCc6IHtcbiAgICAgICAgJzAuOTk1JzogNjcuMzMsXG4gICAgICAgICcwLjk5JzogNzAuMDYsXG4gICAgICAgICcwLjk3NSc6IDc0LjIyLFxuICAgICAgICAnMC45NSc6IDc3LjkzLFxuICAgICAgICAnMC45JzogODIuMzYsXG4gICAgICAgICcwLjUnOiA5OS4zMyxcbiAgICAgICAgJzAuMSc6IDExOC41LFxuICAgICAgICAnMC4wNSc6IDEyNC4zNCxcbiAgICAgICAgJzAuMDI1JzogMTI5LjU2LFxuICAgICAgICAnMC4wMSc6IDEzNS44MSxcbiAgICAgICAgJzAuMDA1JzogMTQwLjE3XG4gICAgfVxufTtcblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW8+HMiAoQ2hpLVNxdWFyZWQpIEdvb2RuZXNzLW9mLUZpdCBUZXN0XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dvb2RuZXNzX29mX2ZpdCNQZWFyc29uLjI3c19jaGktc3F1YXJlZF90ZXN0KVxuICogdXNlcyBhIG1lYXN1cmUgb2YgZ29vZG5lc3Mgb2YgZml0IHdoaWNoIGlzIHRoZSBzdW0gb2YgZGlmZmVyZW5jZXMgYmV0d2VlbiBvYnNlcnZlZCBhbmQgZXhwZWN0ZWQgb3V0Y29tZSBmcmVxdWVuY2llc1xuICogKHRoYXQgaXMsIGNvdW50cyBvZiBvYnNlcnZhdGlvbnMpLCBlYWNoIHNxdWFyZWQgYW5kIGRpdmlkZWQgYnkgdGhlIG51bWJlciBvZiBvYnNlcnZhdGlvbnMgZXhwZWN0ZWQgZ2l2ZW4gdGhlXG4gKiBoeXBvdGhlc2l6ZWQgZGlzdHJpYnV0aW9uLiBUaGUgcmVzdWx0aW5nIM+HMiBzdGF0aXN0aWMsIGBjaGlTcXVhcmVkYCwgY2FuIGJlIGNvbXBhcmVkIHRvIHRoZSBjaGktc3F1YXJlZCBkaXN0cmlidXRpb25cbiAqIHRvIGRldGVybWluZSB0aGUgZ29vZG5lc3Mgb2YgZml0LiBJbiBvcmRlciB0byBkZXRlcm1pbmUgdGhlIGRlZ3JlZXMgb2YgZnJlZWRvbSBvZiB0aGUgY2hpLXNxdWFyZWQgZGlzdHJpYnV0aW9uLCBvbmVcbiAqIHRha2VzIHRoZSB0b3RhbCBudW1iZXIgb2Ygb2JzZXJ2ZWQgZnJlcXVlbmNpZXMgYW5kIHN1YnRyYWN0cyB0aGUgbnVtYmVyIG9mIGVzdGltYXRlZCBwYXJhbWV0ZXJzLiBUaGUgdGVzdCBzdGF0aXN0aWNcbiAqIGZvbGxvd3MsIGFwcHJveGltYXRlbHksIGEgY2hpLXNxdWFyZSBkaXN0cmlidXRpb24gd2l0aCAoayDiiJIgYykgZGVncmVlcyBvZiBmcmVlZG9tIHdoZXJlIGBrYCBpcyB0aGUgbnVtYmVyIG9mIG5vbi1lbXB0eVxuICogY2VsbHMgYW5kIGBjYCBpcyB0aGUgbnVtYmVyIG9mIGVzdGltYXRlZCBwYXJhbWV0ZXJzIGZvciB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzdHJpYnV0aW9uVHlwZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHBvaW50IGluIGEgZGlzdHJpYnV0aW9uOlxuICogZm9yIGluc3RhbmNlLCBiaW5vbWlhbCwgYmVybm91bGxpLCBvciBwb2lzc29uXG4gKiBAcGFyYW0ge251bWJlcn0gc2lnbmlmaWNhbmNlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBjaGkgc3F1YXJlZCBnb29kbmVzcyBvZiBmaXRcbiAqIEBleGFtcGxlXG4gKiAvLyBEYXRhIGZyb20gUG9pc3NvbiBnb29kbmVzcy1vZi1maXQgZXhhbXBsZSAxMC0xOSBpbiBXaWxsaWFtIFcuIEhpbmVzICYgRG91Z2xhcyBDLiBNb250Z29tZXJ5LFxuICogLy8gXCJQcm9iYWJpbGl0eSBhbmQgU3RhdGlzdGljcyBpbiBFbmdpbmVlcmluZyBhbmQgTWFuYWdlbWVudCBTY2llbmNlXCIsIFdpbGV5ICgxOTgwKS5cbiAqIHZhciBkYXRhMTAxOSA9IFtcbiAqICAgICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICogICAgIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gKiAgICAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAqICAgICAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLFxuICogICAgIDMsIDMsIDMsIDNcbiAqIF07XG4gKiBzcy5jaGlTcXVhcmVkR29vZG5lc3NPZkZpdChkYXRhMTAxOSwgc3MucG9pc3NvbkRpc3RyaWJ1dGlvbiwgMC4wNSk7IC8vPSBmYWxzZVxuICovXG5mdW5jdGlvbiBjaGlTcXVhcmVkR29vZG5lc3NPZkZpdChcbiAgICBkYXRhLyo6IEFycmF5PG51bWJlcj4gKi8sXG4gICAgZGlzdHJpYnV0aW9uVHlwZS8qOiBGdW5jdGlvbiAqLyxcbiAgICBzaWduaWZpY2FuY2UvKjogbnVtYmVyICovKS8qOiBib29sZWFuICovIHtcbiAgICAvLyBFc3RpbWF0ZSBmcm9tIHRoZSBzYW1wbGUgZGF0YSwgYSB3ZWlnaHRlZCBtZWFuLlxuICAgIHZhciBpbnB1dE1lYW4gPSBtZWFuKGRhdGEpLFxuICAgICAgICAvLyBDYWxjdWxhdGVkIHZhbHVlIG9mIHRoZSDPhzIgc3RhdGlzdGljLlxuICAgICAgICBjaGlTcXVhcmVkID0gMCxcbiAgICAgICAgLy8gRGVncmVlcyBvZiBmcmVlZG9tLCBjYWxjdWxhdGVkIGFzIChudW1iZXIgb2YgY2xhc3MgaW50ZXJ2YWxzIC1cbiAgICAgICAgLy8gbnVtYmVyIG9mIGh5cG90aGVzaXplZCBkaXN0cmlidXRpb24gcGFyYW1ldGVycyBlc3RpbWF0ZWQgLSAxKVxuICAgICAgICBkZWdyZWVzT2ZGcmVlZG9tLFxuICAgICAgICAvLyBOdW1iZXIgb2YgaHlwb3RoZXNpemVkIGRpc3RyaWJ1dGlvbiBwYXJhbWV0ZXJzIGVzdGltYXRlZCwgZXhwZWN0ZWQgdG8gYmUgc3VwcGxpZWQgaW4gdGhlIGRpc3RyaWJ1dGlvbiB0ZXN0LlxuICAgICAgICAvLyBMb3NlIG9uZSBkZWdyZWUgb2YgZnJlZWRvbSBmb3IgZXN0aW1hdGluZyBgbGFtYmRhYCBmcm9tIHRoZSBzYW1wbGUgZGF0YS5cbiAgICAgICAgYyA9IDEsXG4gICAgICAgIC8vIFRoZSBoeXBvdGhlc2l6ZWQgZGlzdHJpYnV0aW9uLlxuICAgICAgICAvLyBHZW5lcmF0ZSB0aGUgaHlwb3RoZXNpemVkIGRpc3RyaWJ1dGlvbi5cbiAgICAgICAgaHlwb3RoZXNpemVkRGlzdHJpYnV0aW9uID0gZGlzdHJpYnV0aW9uVHlwZShpbnB1dE1lYW4pLFxuICAgICAgICBvYnNlcnZlZEZyZXF1ZW5jaWVzID0gW10sXG4gICAgICAgIGV4cGVjdGVkRnJlcXVlbmNpZXMgPSBbXSxcbiAgICAgICAgaztcblxuICAgIC8vIENyZWF0ZSBhbiBhcnJheSBob2xkaW5nIGEgaGlzdG9ncmFtIGZyb20gdGhlIHNhbXBsZSBkYXRhLCBvZlxuICAgIC8vIHRoZSBmb3JtIGB7IHZhbHVlOiBudW1iZXJPZk9jdXJyZW5jZXMgfWBcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKG9ic2VydmVkRnJlcXVlbmNpZXNbZGF0YVtpXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JzZXJ2ZWRGcmVxdWVuY2llc1tkYXRhW2ldXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgb2JzZXJ2ZWRGcmVxdWVuY2llc1tkYXRhW2ldXSsrO1xuICAgIH1cblxuICAgIC8vIFRoZSBoaXN0b2dyYW0gd2UgY3JlYXRlZCBtaWdodCBiZSBzcGFyc2UgLSB0aGVyZSBtaWdodCBiZSBnYXBzXG4gICAgLy8gYmV0d2VlbiB2YWx1ZXMuIFNvIHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgaGlzdG9ncmFtLCBtYWtpbmdcbiAgICAvLyBzdXJlIHRoYXQgaW5zdGVhZCBvZiB1bmRlZmluZWQsIGdhcHMgaGF2ZSAwIHZhbHVlcy5cbiAgICBmb3IgKGkgPSAwOyBpIDwgb2JzZXJ2ZWRGcmVxdWVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAob2JzZXJ2ZWRGcmVxdWVuY2llc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvYnNlcnZlZEZyZXF1ZW5jaWVzW2ldID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhbiBhcnJheSBob2xkaW5nIGEgaGlzdG9ncmFtIG9mIGV4cGVjdGVkIGRhdGEgZ2l2ZW4gdGhlXG4gICAgLy8gc2FtcGxlIHNpemUgYW5kIGh5cG90aGVzaXplZCBkaXN0cmlidXRpb24uXG4gICAgZm9yIChrIGluIGh5cG90aGVzaXplZERpc3RyaWJ1dGlvbikge1xuICAgICAgICBpZiAoayBpbiBvYnNlcnZlZEZyZXF1ZW5jaWVzKSB7XG4gICAgICAgICAgICBleHBlY3RlZEZyZXF1ZW5jaWVzWytrXSA9IGh5cG90aGVzaXplZERpc3RyaWJ1dGlvbltrXSAqIGRhdGEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gV29ya2luZyBiYWNrd2FyZCB0aHJvdWdoIHRoZSBleHBlY3RlZCBmcmVxdWVuY2llcywgY29sbGFwc2UgY2xhc3Nlc1xuICAgIC8vIGlmIGxlc3MgdGhhbiB0aHJlZSBvYnNlcnZhdGlvbnMgYXJlIGV4cGVjdGVkIGZvciBhIGNsYXNzLlxuICAgIC8vIFRoaXMgdHJhbnNmb3JtYXRpb24gaXMgYXBwbGllZCB0byB0aGUgb2JzZXJ2ZWQgZnJlcXVlbmNpZXMgYXMgd2VsbC5cbiAgICBmb3IgKGsgPSBleHBlY3RlZEZyZXF1ZW5jaWVzLmxlbmd0aCAtIDE7IGsgPj0gMDsgay0tKSB7XG4gICAgICAgIGlmIChleHBlY3RlZEZyZXF1ZW5jaWVzW2tdIDwgMykge1xuICAgICAgICAgICAgZXhwZWN0ZWRGcmVxdWVuY2llc1trIC0gMV0gKz0gZXhwZWN0ZWRGcmVxdWVuY2llc1trXTtcbiAgICAgICAgICAgIGV4cGVjdGVkRnJlcXVlbmNpZXMucG9wKCk7XG5cbiAgICAgICAgICAgIG9ic2VydmVkRnJlcXVlbmNpZXNbayAtIDFdICs9IG9ic2VydmVkRnJlcXVlbmNpZXNba107XG4gICAgICAgICAgICBvYnNlcnZlZEZyZXF1ZW5jaWVzLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBzcXVhcmVkIGRpZmZlcmVuY2VzIGJldHdlZW4gb2JzZXJ2ZWQgJiBleHBlY3RlZFxuICAgIC8vIGZyZXF1ZW5jaWVzLCBhY2N1bXVsYXRpbmcgdGhlIGBjaGlTcXVhcmVkYCBzdGF0aXN0aWMuXG4gICAgZm9yIChrID0gMDsgayA8IG9ic2VydmVkRnJlcXVlbmNpZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgY2hpU3F1YXJlZCArPSBNYXRoLnBvdyhcbiAgICAgICAgICAgIG9ic2VydmVkRnJlcXVlbmNpZXNba10gLSBleHBlY3RlZEZyZXF1ZW5jaWVzW2tdLCAyKSAvXG4gICAgICAgICAgICBleHBlY3RlZEZyZXF1ZW5jaWVzW2tdO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSBkZWdyZWVzIG9mIGZyZWVkb20gZm9yIHRoaXMgdGVzdCBhbmQgbG9vayBpdCB1cCBpbiB0aGVcbiAgICAvLyBgY2hpU3F1YXJlZERpc3RyaWJ1dGlvblRhYmxlYCBpbiBvcmRlciB0b1xuICAgIC8vIGFjY2VwdCBvciByZWplY3QgdGhlIGdvb2RuZXNzLW9mLWZpdCBvZiB0aGUgaHlwb3RoZXNpemVkIGRpc3RyaWJ1dGlvbi5cbiAgICBkZWdyZWVzT2ZGcmVlZG9tID0gb2JzZXJ2ZWRGcmVxdWVuY2llcy5sZW5ndGggLSBjIC0gMTtcbiAgICByZXR1cm4gY2hpU3F1YXJlZERpc3RyaWJ1dGlvblRhYmxlW2RlZ3JlZXNPZkZyZWVkb21dW3NpZ25pZmljYW5jZV0gPCBjaGlTcXVhcmVkO1xufVxuXG4vKiBAZmxvdyAqL1xuXG52YXIgU1FSVF8yUEkgPSBNYXRoLnNxcnQoMiAqIE1hdGguUEkpO1xuXG4vKipcbiAqIFtXZWxsLWtub3duIGtlcm5lbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0tlcm5lbF8oc3RhdGlzdGljcykjS2VybmVsX2Z1bmN0aW9uc19pbl9jb21tb25fdXNlKVxuICogQHByaXZhdGVcbiAqL1xudmFyIGtlcm5lbHMgLyo6IHtbc3RyaW5nXTogKG51bWJlcikgPT4gbnVtYmVyfSAqLyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGUgZ2F1c3NpYW4ga2VybmVsLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2F1c3NpYW46IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmV4cCgtMC41ICogdSAqIHUpIC8gU1FSVF8yUEk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBXZWxsIGtub3duIGJhbmR3aWR0aCBzZWxlY3Rpb24gbWV0aG9kc1xuICogQHByaXZhdGVcbiAqL1xudmFyIGJhbmR3aWR0aE1ldGhvZHMgLyo6IHtbc3RyaW5nXTogKEFycmF5PG51bWJlcj4pID0+IG51bWJlcn0gKi8gPSB7XG4gICAgLyoqXG4gICAgICogVGhlIFtcIm5vcm1hbCByZWZlcmVuY2UgZGlzdHJpYnV0aW9uXCJcbiAgICAgKiBydWxlLW9mLXRodW1iXShodHRwczovL3N0YXQuZXRoei5jaC9SLW1hbnVhbC9SLWRldmVsL2xpYnJhcnkvTUFTUy9odG1sL2JhbmR3aWR0aC5ucmQuaHRtbCksXG4gICAgICogYSBjb21tb25seSB1c2VkIHZlcnNpb24gb2YgW1NpbHZlcm1hbidzXG4gICAgICogcnVsZS1vZi10aHVtYl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2VybmVsX2RlbnNpdHlfZXN0aW1hdGlvbiNBX3J1bGUtb2YtdGh1bWJfYmFuZHdpZHRoX2VzdGltYXRvcikuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBucmQ6IGZ1bmN0aW9uICh4IC8qOiBBcnJheTxudW1iZXI+ICovKSB7XG4gICAgICAgIHZhciBzID0gc2FtcGxlU3RhbmRhcmREZXZpYXRpb24oeCk7XG4gICAgICAgIHZhciBpcXIgPSBpbnRlcnF1YXJ0aWxlUmFuZ2UoeCk7XG4gICAgICAgIGlmICh0eXBlb2YgaXFyID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcyA9IE1hdGgubWluKHMsIGlxciAvIDEuMzQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxLjA2ICogcyAqIE1hdGgucG93KHgubGVuZ3RoLCAtMC4yKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFtLZXJuZWwgZGVuc2l0eSBlc3RpbWF0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LZXJuZWxfZGVuc2l0eV9lc3RpbWF0aW9uKVxuICogaXMgYSB1c2VmdWwgdG9vbCBmb3IsIGFtb25nIG90aGVyIHRoaW5ncywgZXN0aW1hdGluZyB0aGUgc2hhcGUgb2YgdGhlXG4gKiB1bmRlcmx5aW5nIHByb2JhYmlsaXR5IGRpc3RyaWJ1dGlvbiBmcm9tIGEgc2FtcGxlLlxuICpcbiAqIEBuYW1lIGtlcm5lbERlbnNpdHlFc3RpbWF0aW9uXG4gKiBAcGFyYW0gWCBzYW1wbGUgdmFsdWVzXG4gKiBAcGFyYW0ga2VybmVsIFRoZSBrZXJuZWwgZnVuY3Rpb24gdG8gdXNlLiBJZiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCBpdCBzaG91bGQgcmV0dXJuIG5vbi1uZWdhdGl2ZSB2YWx1ZXMgYW5kIGludGVncmF0ZSB0byAxLiBEZWZhdWx0cyB0byAnZ2F1c3NpYW4nLlxuICogQHBhcmFtIGJhbmR3aWR0aE1ldGhvZCBUaGUgXCJiYW5kd2lkdGggc2VsZWN0aW9uXCIgbWV0aG9kIHRvIHVzZSwgb3IgYSBmaXhlZCBiYW5kd2lkdGggdmFsdWUuIERlZmF1bHRzIHRvIFwibnJkXCIsIHRoZSBjb21tb25seS11c2VkIFtcIm5vcm1hbCByZWZlcmVuY2UgZGlzdHJpYnV0aW9uXCIgcnVsZS1vZi10aHVtYl0oaHR0cHM6Ly9zdGF0LmV0aHouY2gvUi1tYW51YWwvUi1kZXZlbC9saWJyYXJ5L01BU1MvaHRtbC9iYW5kd2lkdGgubnJkLmh0bWwpLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBbiBlc3RpbWF0ZWQgW3Byb2JhYmlsaXR5IGRlbnNpdHkgZnVuY3Rpb25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Byb2JhYmlsaXR5X2RlbnNpdHlfZnVuY3Rpb24pIGZvciB0aGUgZ2l2ZW4gc2FtcGxlLiBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gcnVucyBpbiBgTyhYLmxlbmd0aClgLlxuICovXG5mdW5jdGlvbiBrZXJuZWxEZW5zaXR5RXN0aW1hdGlvbihcbiAgICBYIC8qOiBBcnJheTxudW1iZXI+ICovLFxuICAgIGtlcm5lbCAvKjogJEtleXM8dHlwZW9mIGtlcm5lbHM+IHwgKChudW1iZXIpID0+IG51bWJlcikgfCB2b2lkKi8sXG4gICAgYmFuZHdpZHRoTWV0aG9kIC8qOiAkS2V5czx0eXBlb2YgYmFuZHdpZHRoTWV0aG9kcz4gfCBudW1iZXIgfCB2b2lkKi9cbikge1xuICAgIHZhciBrZXJuZWxGbi8qOiAobnVtYmVyKSA9PiBudW1iZXIgKi87XG4gICAgaWYgKGtlcm5lbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtlcm5lbEZuID0ga2VybmVscy5nYXVzc2lhbjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXJuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICgha2VybmVsc1trZXJuZWxdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24ga2VybmVsIFwiJyArIGtlcm5lbCArICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIGtlcm5lbEZuID0ga2VybmVsc1trZXJuZWxdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtlcm5lbEZuID0ga2VybmVsO1xuICAgIH1cblxuICAgIHZhciBiYW5kd2lkdGg7XG4gICAgaWYgKHR5cGVvZiBiYW5kd2lkdGhNZXRob2QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGJhbmR3aWR0aCA9IGJhbmR3aWR0aE1ldGhvZHMubnJkKFgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJhbmR3aWR0aE1ldGhvZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCFiYW5kd2lkdGhNZXRob2RzW2JhbmR3aWR0aE1ldGhvZF0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBiYW5kd2lkdGggbWV0aG9kIFwiJyArIGJhbmR3aWR0aE1ldGhvZCArICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIGJhbmR3aWR0aCA9IGJhbmR3aWR0aE1ldGhvZHNbYmFuZHdpZHRoTWV0aG9kXShYKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBiYW5kd2lkdGggPSBiYW5kd2lkdGhNZXRob2Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4IC8qOiBudW1iZXIqLykge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBzdW0gPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgWC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3VtICs9IGtlcm5lbEZuKCh4IC0gWFtpXSkgLyBiYW5kd2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW0gLyBiYW5kd2lkdGggLyBYLmxlbmd0aDtcbiAgICB9XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFtaLVNjb3JlLCBvciBTdGFuZGFyZCBTY29yZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdGFuZGFyZF9zY29yZSkuXG4gKlxuICogVGhlIHN0YW5kYXJkIHNjb3JlIGlzIHRoZSBudW1iZXIgb2Ygc3RhbmRhcmQgZGV2aWF0aW9ucyBhbiBvYnNlcnZhdGlvblxuICogb3IgZGF0dW0gaXMgYWJvdmUgb3IgYmVsb3cgdGhlIG1lYW4uIFRodXMsIGEgcG9zaXRpdmUgc3RhbmRhcmQgc2NvcmVcbiAqIHJlcHJlc2VudHMgYSBkYXR1bSBhYm92ZSB0aGUgbWVhbiwgd2hpbGUgYSBuZWdhdGl2ZSBzdGFuZGFyZCBzY29yZVxuICogcmVwcmVzZW50cyBhIGRhdHVtIGJlbG93IHRoZSBtZWFuLiBJdCBpcyBhIGRpbWVuc2lvbmxlc3MgcXVhbnRpdHlcbiAqIG9idGFpbmVkIGJ5IHN1YnRyYWN0aW5nIHRoZSBwb3B1bGF0aW9uIG1lYW4gZnJvbSBhbiBpbmRpdmlkdWFsIHJhd1xuICogc2NvcmUgYW5kIHRoZW4gZGl2aWRpbmcgdGhlIGRpZmZlcmVuY2UgYnkgdGhlIHBvcHVsYXRpb24gc3RhbmRhcmRcbiAqIGRldmlhdGlvbi5cbiAqXG4gKiBUaGUgei1zY29yZSBpcyBvbmx5IGRlZmluZWQgaWYgb25lIGtub3dzIHRoZSBwb3B1bGF0aW9uIHBhcmFtZXRlcnM7XG4gKiBpZiBvbmUgb25seSBoYXMgYSBzYW1wbGUgc2V0LCB0aGVuIHRoZSBhbmFsb2dvdXMgY29tcHV0YXRpb24gd2l0aFxuICogc2FtcGxlIG1lYW4gYW5kIHNhbXBsZSBzdGFuZGFyZCBkZXZpYXRpb24geWllbGRzIHRoZVxuICogU3R1ZGVudCdzIHQtc3RhdGlzdGljLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcGFyYW0ge251bWJlcn0gbWVhblxuICogQHBhcmFtIHtudW1iZXJ9IHN0YW5kYXJkRGV2aWF0aW9uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHogc2NvcmVcbiAqIEBleGFtcGxlXG4gKiB6U2NvcmUoNzgsIDgwLCA1KTsgLy8gPT4gLTAuNFxuICovXG5mdW5jdGlvbiB6U2NvcmUoeC8qOm51bWJlciovLCBtZWFuLyo6bnVtYmVyKi8sIHN0YW5kYXJkRGV2aWF0aW9uLyo6bnVtYmVyKi8pLyo6bnVtYmVyKi8ge1xuICAgIHJldHVybiAoeCAtIG1lYW4pIC8gc3RhbmRhcmREZXZpYXRpb247XG59XG5cbi8qIEBmbG93ICovXG5cbnZhciBTUVJUXzJQSSQxID0gTWF0aC5zcXJ0KDIgKiBNYXRoLlBJKTtcblxuZnVuY3Rpb24gY3VtdWxhdGl2ZURpc3RyaWJ1dGlvbih6KSB7XG4gICAgdmFyIHN1bSA9IHosXG4gICAgICAgIHRtcCA9IHo7XG5cbiAgICAvLyAxNSBpdGVyYXRpb25zIGFyZSBlbm91Z2ggZm9yIDQtZGlnaXQgcHJlY2lzaW9uXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCAxNTsgaSsrKSB7XG4gICAgICAgIHRtcCAqPSB6ICogeiAvICgyICogaSArIDEpO1xuICAgICAgICBzdW0gKz0gdG1wO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoMC41ICsgKHN1bSAvIFNRUlRfMlBJJDEpICogTWF0aC5leHAoLXogKiB6IC8gMikpICogMWU0KSAvIDFlNDtcbn1cblxuLyoqXG4gKiBBIHN0YW5kYXJkIG5vcm1hbCB0YWJsZSwgYWxzbyBjYWxsZWQgdGhlIHVuaXQgbm9ybWFsIHRhYmxlIG9yIFogdGFibGUsXG4gKiBpcyBhIG1hdGhlbWF0aWNhbCB0YWJsZSBmb3IgdGhlIHZhbHVlcyBvZiDOpiAocGhpKSwgd2hpY2ggYXJlIHRoZSB2YWx1ZXMgb2ZcbiAqIHRoZSBjdW11bGF0aXZlIGRpc3RyaWJ1dGlvbiBmdW5jdGlvbiBvZiB0aGUgbm9ybWFsIGRpc3RyaWJ1dGlvbi5cbiAqIEl0IGlzIHVzZWQgdG8gZmluZCB0aGUgcHJvYmFiaWxpdHkgdGhhdCBhIHN0YXRpc3RpYyBpcyBvYnNlcnZlZCBiZWxvdyxcbiAqIGFib3ZlLCBvciBiZXR3ZWVuIHZhbHVlcyBvbiB0aGUgc3RhbmRhcmQgbm9ybWFsIGRpc3RyaWJ1dGlvbiwgYW5kIGJ5XG4gKiBleHRlbnNpb24sIGFueSBub3JtYWwgZGlzdHJpYnV0aW9uLlxuICpcbiAqIFRoZSBwcm9iYWJpbGl0aWVzIGFyZSBjYWxjdWxhdGVkIHVzaW5nIHRoZVxuICogW0N1bXVsYXRpdmUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Ob3JtYWxfZGlzdHJpYnV0aW9uI0N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX2Z1bmN0aW9uKS5cbiAqIFRoZSB0YWJsZSB1c2VkIGlzIHRoZSBjdW11bGF0aXZlLCBhbmQgbm90IGN1bXVsYXRpdmUgZnJvbSAwIHRvIG1lYW5cbiAqIChldmVuIHRob3VnaCB0aGUgbGF0dGVyIGhhcyA1IGRpZ2l0cyBwcmVjaXNpb24sIGluc3RlYWQgb2YgNCkuXG4gKi9cbnZhciBzdGFuZGFyZE5vcm1hbFRhYmxlLyo6IEFycmF5PG51bWJlcj4gKi8gPSBbXTtcblxuZm9yICh2YXIgeiA9IDA7IHogPD0gMy4wOTsgeiArPSAwLjAxKSB7XG4gICAgc3RhbmRhcmROb3JtYWxUYWJsZS5wdXNoKGN1bXVsYXRpdmVEaXN0cmlidXRpb24oeikpO1xufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqICoqW0N1bXVsYXRpdmUgU3RhbmRhcmQgTm9ybWFsIFByb2JhYmlsaXR5XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N0YW5kYXJkX25vcm1hbF90YWJsZSkqKlxuICpcbiAqIFNpbmNlIHByb2JhYmlsaXR5IHRhYmxlcyBjYW5ub3QgYmVcbiAqIHByaW50ZWQgZm9yIGV2ZXJ5IG5vcm1hbCBkaXN0cmlidXRpb24sIGFzIHRoZXJlIGFyZSBhbiBpbmZpbml0ZSB2YXJpZXR5XG4gKiBvZiBub3JtYWwgZGlzdHJpYnV0aW9ucywgaXQgaXMgY29tbW9uIHByYWN0aWNlIHRvIGNvbnZlcnQgYSBub3JtYWwgdG8gYVxuICogc3RhbmRhcmQgbm9ybWFsIGFuZCB0aGVuIHVzZSB0aGUgc3RhbmRhcmQgbm9ybWFsIHRhYmxlIHRvIGZpbmQgcHJvYmFiaWxpdGllcy5cbiAqXG4gKiBZb3UgY2FuIHVzZSBgLjUgKyAuNSAqIGVycm9yRnVuY3Rpb24oeCAvIE1hdGguc3FydCgyKSlgIHRvIGNhbGN1bGF0ZSB0aGUgcHJvYmFiaWxpdHlcbiAqIGluc3RlYWQgb2YgbG9va2luZyBpdCB1cCBpbiBhIHRhYmxlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB6XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBjdW11bGF0aXZlIHN0YW5kYXJkIG5vcm1hbCBwcm9iYWJpbGl0eVxuICovXG5mdW5jdGlvbiBjdW11bGF0aXZlU3RkTm9ybWFsUHJvYmFiaWxpdHkoeiAvKjpudW1iZXIgKi8pLyo6bnVtYmVyICovIHtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhpcyB2YWx1ZS5cbiAgICB2YXIgYWJzWiA9IE1hdGguYWJzKHopLFxuICAgICAgICAvLyBFYWNoIHJvdyBiZWdpbnMgd2l0aCBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzaWduaWZpY2FudCBkaWdpdDogMC41LCAwLjYsIDAuNywgYW5kIHNvIG9uLiBFYWNoIHZhbHVlIGluIHRoZSB0YWJsZVxuICAgICAgICAvLyBjb3JyZXNwb25kcyB0byBhIHJhbmdlIG9mIDAuMDEgaW4gdGhlIGlucHV0IHZhbHVlcywgc28gdGhlIHZhbHVlIGlzXG4gICAgICAgIC8vIG11bHRpcGxpZWQgYnkgMTAwLlxuICAgICAgICBpbmRleCA9IE1hdGgubWluKE1hdGgucm91bmQoYWJzWiAqIDEwMCksIHN0YW5kYXJkTm9ybWFsVGFibGUubGVuZ3RoIC0gMSk7XG5cbiAgICAvLyBUaGUgaW5kZXggd2UgY2FsY3VsYXRlIG11c3QgYmUgaW4gdGhlIHRhYmxlIGFzIGEgcG9zaXRpdmUgdmFsdWUsXG4gICAgLy8gYnV0IHdlIHN0aWxsIHBheSBhdHRlbnRpb24gdG8gd2hldGhlciB0aGUgaW5wdXQgaXMgcG9zaXRpdmVcbiAgICAvLyBvciBuZWdhdGl2ZSwgYW5kIGZsaXAgdGhlIG91dHB1dCB2YWx1ZSBhcyBhIGxhc3Qgc3RlcC5cbiAgICBpZiAoeiA+PSAwKSB7XG4gICAgICAgIHJldHVybiBzdGFuZGFyZE5vcm1hbFRhYmxlW2luZGV4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkdWUgdG8gZmxvYXRpbmctcG9pbnQgYXJpdGhtZXRpYywgdmFsdWVzIGluIHRoZSB0YWJsZSB3aXRoXG4gICAgICAgIC8vIDQgc2lnbmlmaWNhbnQgZmlndXJlcyBjYW4gbmV2ZXJ0aGVsZXNzIGVuZCB1cCBhcyByZXBlYXRpbmdcbiAgICAgICAgLy8gZnJhY3Rpb25zIHdoZW4gdGhleSdyZSBjb21wdXRlZCBoZXJlLlxuICAgICAgICByZXR1cm4gKygxIC0gc3RhbmRhcmROb3JtYWxUYWJsZVtpbmRleF0pLnRvRml4ZWQoNCk7XG4gICAgfVxufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqICoqW0dhdXNzaWFuIGVycm9yIGZ1bmN0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Vycm9yX2Z1bmN0aW9uKSoqXG4gKlxuICogVGhlIGBlcnJvckZ1bmN0aW9uKHgvKHNkICogTWF0aC5zcXJ0KDIpKSlgIGlzIHRoZSBwcm9iYWJpbGl0eSB0aGF0IGEgdmFsdWUgaW4gYVxuICogbm9ybWFsIGRpc3RyaWJ1dGlvbiB3aXRoIHN0YW5kYXJkIGRldmlhdGlvbiBzZCBpcyB3aXRoaW4geCBvZiB0aGUgbWVhbi5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBudW1lcmljYWwgYXBwcm94aW1hdGlvbiB0byB0aGUgZXhhY3QgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggaW5wdXRcbiAqIEByZXR1cm4ge251bWJlcn0gZXJyb3IgZXN0aW1hdGlvblxuICogQGV4YW1wbGVcbiAqIGVycm9yRnVuY3Rpb24oMSkudG9GaXhlZCgyKTsgLy8gPT4gJzAuODQnXG4gKi9cbmZ1bmN0aW9uIGVycm9yRnVuY3Rpb24oeC8qOiBudW1iZXIgKi8pLyo6IG51bWJlciAqLyB7XG4gICAgdmFyIHQgPSAxIC8gKDEgKyAwLjUgKiBNYXRoLmFicyh4KSk7XG4gICAgdmFyIHRhdSA9IHQgKiBNYXRoLmV4cCgtTWF0aC5wb3coeCwgMikgLVxuICAgICAgICAxLjI2NTUxMjIzICtcbiAgICAgICAgMS4wMDAwMjM2OCAqIHQgK1xuICAgICAgICAwLjM3NDA5MTk2ICogTWF0aC5wb3codCwgMikgK1xuICAgICAgICAwLjA5Njc4NDE4ICogTWF0aC5wb3codCwgMykgLVxuICAgICAgICAwLjE4NjI4ODA2ICogTWF0aC5wb3codCwgNCkgK1xuICAgICAgICAwLjI3ODg2ODA3ICogTWF0aC5wb3codCwgNSkgLVxuICAgICAgICAxLjEzNTIwMzk4ICogTWF0aC5wb3codCwgNikgK1xuICAgICAgICAxLjQ4ODUxNTg3ICogTWF0aC5wb3codCwgNykgLVxuICAgICAgICAwLjgyMjE1MjIzICogTWF0aC5wb3codCwgOCkgK1xuICAgICAgICAwLjE3MDg3Mjc3ICogTWF0aC5wb3codCwgOSkpO1xuICAgIGlmICh4ID49IDApIHtcbiAgICAgICAgcmV0dXJuIDEgLSB0YXU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRhdSAtIDE7XG4gICAgfVxufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBJbnZlcnNlIFtHYXVzc2lhbiBlcnJvciBmdW5jdGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FcnJvcl9mdW5jdGlvbilcbiAqIHJldHVybnMgYSBudW1lcmljYWwgYXBwcm94aW1hdGlvbiB0byB0aGUgdmFsdWUgdGhhdCB3b3VsZCBoYXZlIGNhdXNlZFxuICogYGVycm9yRnVuY3Rpb24oKWAgdG8gcmV0dXJuIHguXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggdmFsdWUgb2YgZXJyb3IgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGVzdGltYXRlZCBpbnZlcnRlZCB2YWx1ZVxuICovXG5mdW5jdGlvbiBpbnZlcnNlRXJyb3JGdW5jdGlvbih4Lyo6IG51bWJlciAqLykvKjogbnVtYmVyICovIHtcbiAgICB2YXIgYSA9ICg4ICogKE1hdGguUEkgLSAzKSkgLyAoMyAqIE1hdGguUEkgKiAoNCAtIE1hdGguUEkpKTtcblxuICAgIHZhciBpbnYgPSBNYXRoLnNxcnQoTWF0aC5zcXJ0KFxuICAgICAgICBNYXRoLnBvdygyIC8gKE1hdGguUEkgKiBhKSArIE1hdGgubG9nKDEgLSB4ICogeCkgLyAyLCAyKSAtXG4gICAgICAgIE1hdGgubG9nKDEgLSB4ICogeCkgLyBhKSAtXG4gICAgICAgICgyIC8gKE1hdGguUEkgKiBhKSArIE1hdGgubG9nKDEgLSB4ICogeCkgLyAyKSk7XG5cbiAgICBpZiAoeCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBpbnY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC1pbnY7XG4gICAgfVxufVxuXG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBbUHJvYml0XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Byb2JpdClcbiAqIGlzIHRoZSBpbnZlcnNlIG9mIGN1bXVsYXRpdmVTdGROb3JtYWxQcm9iYWJpbGl0eSgpLFxuICogYW5kIGlzIGFsc28ga25vd24gYXMgdGhlIG5vcm1hbCBxdWFudGlsZSBmdW5jdGlvbi5cbiAqXG4gKiBJdCByZXR1cm5zIHRoZSBudW1iZXIgb2Ygc3RhbmRhcmQgZGV2aWF0aW9ucyBmcm9tIHRoZSBtZWFuXG4gKiB3aGVyZSB0aGUgcCd0aCBxdWFudGlsZSBvZiB2YWx1ZXMgY2FuIGJlIGZvdW5kIGluIGEgbm9ybWFsIGRpc3RyaWJ1dGlvbi5cbiAqIFNvLCBmb3IgZXhhbXBsZSwgcHJvYml0KDAuNSArIDAuNjgyNy8yKSDiiYggMSBiZWNhdXNlIDY4LjI3JSBvZiB2YWx1ZXMgYXJlXG4gKiBub3JtYWxseSBmb3VuZCB3aXRoaW4gMSBzdGFuZGFyZCBkZXZpYXRpb24gYWJvdmUgb3IgYmVsb3cgdGhlIG1lYW4uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHByb2JpdFxuICovXG5mdW5jdGlvbiBwcm9iaXQocCAvKjogbnVtYmVyICovKS8qOiBudW1iZXIgKi8ge1xuICAgIGlmIChwID09PSAwKSB7XG4gICAgICAgIHAgPSBlcHNpbG9uO1xuICAgIH0gZWxzZSBpZiAocCA+PSAxKSB7XG4gICAgICAgIHAgPSAxIC0gZXBzaWxvbjtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguc3FydCgyKSAqIGludmVyc2VFcnJvckZ1bmN0aW9uKDIgKiBwIC0gMSk7XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogQ29uZHVjdHMgYSBbcGVybXV0YXRpb24gdGVzdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVzYW1wbGluZ18oc3RhdGlzdGljcykjUGVybXV0YXRpb25fdGVzdHMpXG4gKiB0byBkZXRlcm1pbmUgaWYgdHdvIGRhdGEgc2V0cyBhcmUgKnNpZ25pZmljYW50bHkqIGRpZmZlcmVudCBmcm9tIGVhY2ggb3RoZXIsIHVzaW5nXG4gKiB0aGUgZGlmZmVyZW5jZSBvZiBtZWFucyBiZXR3ZWVuIHRoZSBncm91cHMgYXMgdGhlIHRlc3Qgc3RhdGlzdGljLiBcbiAqIFRoZSBmdW5jdGlvbiBhbGxvd3MgZm9yIHRoZSBmb2xsb3dpbmcgaHlwb3RoZXNlczpcbiAqIC0gdHdvX3RhaWwgPSBOdWxsIGh5cG90aGVzaXM6IHRoZSB0d28gZGlzdHJpYnV0aW9ucyBhcmUgZXF1YWwuXG4gKiAtIGdyZWF0ZXIgPSBOdWxsIGh5cG90aGVzaXM6IG9ic2VydmF0aW9ucyBmcm9tIHNhbXBsZVggdGVuZCB0byBiZSBzbWFsbGVyIHRoYW4gdGhvc2UgZnJvbSBzYW1wbGVZLlxuICogLSBsZXNzID0gTnVsbCBoeXBvdGhlc2lzOiBvYnNlcnZhdGlvbnMgZnJvbSBzYW1wbGVYIHRlbmQgdG8gYmUgZ3JlYXRlciB0aGFuIHRob3NlIGZyb20gc2FtcGxlWS5cbiAqIFtMZWFybiBtb3JlIGFib3V0IG9uZS10YWlsIHZzIHR3by10YWlsIHRlc3RzLl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT25lLV9hbmRfdHdvLXRhaWxlZF90ZXN0cylcbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNhbXBsZVggZmlyc3QgZGF0YXNldCAoZS5nLiB0cmVhdG1lbnQgZGF0YSlcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc2FtcGxlWSBzZWNvbmQgZGF0YXNldCAoZS5nLiBjb250cm9sIGRhdGEpXG4gKiBAcGFyYW0ge3N0cmluZ30gYWx0ZXJuYXRpdmUgYWx0ZXJuYXRpdmUgaHlwb3RoZXNpcywgZWl0aGVyICd0d29fc2lkZWQnIChkZWZhdWx0KSwgJ2dyZWF0ZXInLCBvciAnbGVzcydcbiAqIEBwYXJhbSB7bnVtYmVyfSBrIG51bWJlciBvZiB2YWx1ZXMgaW4gcGVybXV0YXRpb24gZGlzdHJpYnV0aW9uLiBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHAtdmFsdWUgVGhlIHByb2JhYmlsaXR5IG9mIG9ic2VydmluZyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGdyb3VwcyAoYXMgb3IgbW9yZSBleHRyZW1lIHRoYW4gd2hhdCB3ZSBkaWQpLCBhc3N1bWluZyB0aGUgbnVsbCBoeXBvdGhlc2lzLlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgY29udHJvbCA9IFsyLCA1LCAzLCA2LCA3LCAyLCA1XTtcbiAqIHZhciB0cmVhdG1lbnQgPSBbMjAsIDUsIDEzLCAxMiwgNywgMiwgMl07XG4gKiBwZXJtdXRhdGlvblRlc3QoY29udHJvbCwgdHJlYXRtZW50KTsgLy8gfjAuMTMyNCBcbiAqL1xuZnVuY3Rpb24gcGVybXV0YXRpb25UZXN0KFxuICAgIHNhbXBsZVgvKjogQXJyYXk8bnVtYmVyPiAqLyxcbiAgICBzYW1wbGVZLyo6IEFycmF5PG51bWJlcj4gKi8sXG4gICAgYWx0ZXJuYXRpdmUvKjogc3RyaW5nICovLFxuICAgIGsvKjogbnVtYmVyICovKS8qOiA/bnVtYmVyICovIHtcbiAgICAvLyBTZXQgZGVmYXVsdCBhcmd1bWVudHNcbiAgICBpZiAoayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGsgPSAxMDAwMDtcbiAgICB9XG4gICAgaWYgKGFsdGVybmF0aXZlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWx0ZXJuYXRpdmUgPSAndHdvX3NpZGUnO1xuICAgIH1cbiAgICBpZiAoYWx0ZXJuYXRpdmUgIT09ICd0d29fc2lkZScgJiYgYWx0ZXJuYXRpdmUgIT09ICdncmVhdGVyJyAmJiBhbHRlcm5hdGl2ZSAhPT0gJ2xlc3MnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGFsdGVybmF0aXZlYCBtdXN0IGJlIGVpdGhlciBcXCd0d29fc2lkZVxcJywgXFwnZ3JlYXRlclxcJywgb3IgXFwnbGVzc1xcJycpO1xuICAgIH1cblxuICAgIC8vIGluaXQgcFZhbHVlXG4gICAgdmFyIHBWYWx1ZTtcblxuICAgIC8vIGdldCBtZWFucyBmb3IgZWFjaCBzYW1wbGVcbiAgICB2YXIgbWVhblggPSBtZWFuKHNhbXBsZVgpO1xuICAgIHZhciBtZWFuWSA9IG1lYW4oc2FtcGxlWSk7XG5cbiAgICAvLyBjYWxjdWxhdGUgaW5pdGlhbCB0ZXN0IHN0YXRpc3RpYy4gVGhpcyB3aWxsIGJlIG91ciBwb2ludCBvZiBjb21wYXJpc29uIHdpdGhcbiAgICAvLyB0aGUgZ2VuZXJhdGVkIHRlc3Qgc3RhdGlzdGljcy5cbiAgICB2YXIgdGVzdFN0YXRpc3RpYyA9IG1lYW5YIC0gbWVhblk7XG5cbiAgICAvLyBjcmVhdGUgdGVzdC1zdGF0aXN0aWMgZGlzdHJpYnV0aW9uXG4gICAgdmFyIHRlc3RTdGF0RHNuID0gbmV3IEFycmF5KGspO1xuICAgIFxuICAgIC8vIGNvbWJpbmUgZGF0c2V0cyBzbyB3ZSBjYW4gZWFzaWx5IHNodWZmbGUgbGF0ZXJcbiAgICB2YXIgYWxsRGF0YSA9IHNhbXBsZVguY29uY2F0KHNhbXBsZVkpO1xuICAgIHZhciBtaWRJbmRleCA9IE1hdGguZmxvb3IoYWxsRGF0YS5sZW5ndGggLyAyKTtcbiAgICBcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGs7IGkrKykge1xuICAgICAgICBcbiAgICAgICAgLy8gMS4gc2h1ZmZsZSBkYXRhIGFzc2lnbm1lbnRzXG4gICAgICAgIHNodWZmbGVJblBsYWNlKGFsbERhdGEpO1xuICAgICAgICB2YXIgcGVybUxlZnQgPSBhbGxEYXRhLnNsaWNlKDAsIG1pZEluZGV4KTtcbiAgICAgICAgdmFyIHBlcm1SaWdodCA9IGFsbERhdGEuc2xpY2UobWlkSW5kZXgsIGFsbERhdGEubGVuZ3RoKTtcblxuICAgICAgICAvLyAyLnJlLWNhbGN1bGF0ZSB0ZXN0IHN0YXRpc3RpY1xuICAgICAgICB2YXIgcGVybVRlc3RTdGF0aXN0aWMgPSBtZWFuKHBlcm1MZWZ0KSAtIG1lYW4ocGVybVJpZ2h0KTtcblxuICAgICAgICAvLyAzLiBzdG9yZSB0ZXN0IHN0YXRpc3RpYyB0byBidWlsZCB0ZXN0IHN0YXRpc3RpYyBkaXN0cmlidXRpb25cbiAgICAgICAgdGVzdFN0YXREc25baV0gPSBwZXJtVGVzdFN0YXRpc3RpYztcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgcC12YWx1ZSBkZXBlbmRpbmcgb24gYWx0ZXJuYXRpdmVcbiAgICAvLyBGb3IgdGhpcyB0ZXN0LCB3ZSBjYWxjdWxhdGUgdGhlIHBlcmNlbnRhZ2Ugb2YgJ2V4dHJlbWUnIHRlc3Qgc3RhdGlzdGljcyAoc3ViamVjdCB0byBvdXIgaHlwb3RoZXNpcylcbiAgICAvLyBtb3JlIGluZm8gb24gcGVybXV0YXRpb24gdGVzdCBwLXZhbHVlIGNhbGN1bGF0aW9uczogaHR0cHM6Ly9vbmxpbmVjb3Vyc2VzLnNjaWVuY2UucHN1LmVkdS9zdGF0NDY0L25vZGUvMzVcbiAgICB2YXIgbnVtRXh0cmVtZVRTdGF0cyA9IDA7XG4gICAgaWYgKGFsdGVybmF0aXZlID09PSAndHdvX3NpZGUnKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPD0gazsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnModGVzdFN0YXREc25baV0pID49IE1hdGguYWJzKHRlc3RTdGF0aXN0aWMpKSB7XG4gICAgICAgICAgICAgICAgbnVtRXh0cmVtZVRTdGF0cyArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChhbHRlcm5hdGl2ZSA9PT0gJ2dyZWF0ZXInKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPD0gazsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGVzdFN0YXREc25baV0gPj0gdGVzdFN0YXRpc3RpYykge1xuICAgICAgICAgICAgICAgIG51bUV4dHJlbWVUU3RhdHMgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIGFsdGVybmF0aXZlID09PSAnbGVzcydcbiAgICAgICAgZm9yIChpID0gMDsgaSA8PSBrOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0ZXN0U3RhdERzbltpXSA8PSB0ZXN0U3RhdGlzdGljKSB7XG4gICAgICAgICAgICAgICAgbnVtRXh0cmVtZVRTdGF0cyArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcFZhbHVlID0gbnVtRXh0cmVtZVRTdGF0cyAvIGs7XG4gICAgICAgICAgICBcbiAgICByZXR1cm4gcFZhbHVlO1xuICAgICAgICBcbn1cblxuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBbU2lnbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2lnbl9mdW5jdGlvbikgaXMgYSBmdW5jdGlvblxuICogdGhhdCBleHRyYWN0cyB0aGUgc2lnbiBvZiBhIHJlYWwgbnVtYmVyXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHggaW5wdXQgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHNpZ24gdmFsdWUgZWl0aGVyIDEsIDAgb3IgLTFcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgdGhlIGlucHV0IGFyZ3VtZW50IHggaXMgbm90IGEgbnVtYmVyXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKiBzaWduKDIpOyAvLyA9PiAxXG4gKi9cbmZ1bmN0aW9uIHNpZ24oeC8qOiBudW1iZXIgKi8pLyo6IG51bWJlciAqLyB7XG4gICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoeCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmICh4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBudW1iZXInKTtcbiAgICB9XG59XG5cbi8qIEBmbG93ICovXG5cbi8qKlxuICogW0Jpc2VjdGlvbiBtZXRob2RdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jpc2VjdGlvbl9tZXRob2QpIGlzIGEgcm9vdC1maW5kaW5nXG4gKiBtZXRob2QgdGhhdCByZXBlYXRlZGx5IGJpc2VjdHMgYW4gaW50ZXJ2YWwgdG8gZmluZCB0aGUgcm9vdC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBudW1lcmljYWwgYXBwcm94aW1hdGlvbiB0byB0aGUgZXhhY3QgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBpbnB1dCBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gc3RhcnQgb2YgaW50ZXJ2YWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgLSBlbmQgb2YgaW50ZXJ2YWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhJdGVyYXRpb25zIC0gdGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZXJhdGlvbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBlcnJvclRvbGVyYW5jZSAtIHRoZSBlcnJvciB0b2xlcmFuY2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGVzdGltYXRlZCByb290IHZhbHVlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IEFyZ3VtZW50IGZ1bmMgbXVzdCBiZSBhIGZ1bmN0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqIGJpc2VjdChNYXRoLmNvcywwLDQsMTAwLDAuMDAzKTsgLy8gPT4gMS41NzIyNjU2MjVcbiAqL1xuZnVuY3Rpb24gYmlzZWN0KFxuICAgIGZ1bmMvKjogKHg6IGFueSkgPT4gbnVtYmVyICovLFxuICAgIHN0YXJ0Lyo6IG51bWJlciAqLyxcbiAgICBlbmQvKjogbnVtYmVyICovLFxuICAgIG1heEl0ZXJhdGlvbnMvKjogbnVtYmVyICovLFxuICAgIGVycm9yVG9sZXJhbmNlLyo6IG51bWJlciAqLykvKjpudW1iZXIqLyB7XG5cbiAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Z1bmMgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heEl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gKHN0YXJ0ICsgZW5kKSAvIDI7XG5cbiAgICAgICAgaWYgKGZ1bmMob3V0cHV0KSA9PT0gMCB8fCBNYXRoLmFicygoZW5kIC0gc3RhcnQpIC8gMikgPCBlcnJvclRvbGVyYW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaWduKGZ1bmMob3V0cHV0KSkgPT09IHNpZ24oZnVuYyhzdGFydCkpKSB7XG4gICAgICAgICAgICBzdGFydCA9IG91dHB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVuZCA9IG91dHB1dDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignbWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9ucyBleGNlZWRlZCcpO1xufVxuXG4vKiBAZmxvdyAqL1xuXG5leHBvcnQgeyBsaW5lYXJSZWdyZXNzaW9uLCBsaW5lYXJSZWdyZXNzaW9uTGluZSwgc3RhbmRhcmREZXZpYXRpb24sIHJTcXVhcmVkLCBtb2RlLCBtb2RlRmFzdCwgbW9kZVNvcnRlZCwgbWluLCBtYXgsIGV4dGVudCwgbWluU29ydGVkLCBtYXhTb3J0ZWQsIGV4dGVudFNvcnRlZCwgc3VtLCBzdW1TaW1wbGUsIHByb2R1Y3QsIHF1YW50aWxlLCBxdWFudGlsZVNvcnRlZCwgcXVhbnRpbGVSYW5rLCBxdWFudGlsZVJhbmtTb3J0ZWQsIGludGVycXVhcnRpbGVSYW5nZSwgaW50ZXJxdWFydGlsZVJhbmdlIGFzIGlxciwgbWVkaWFuQWJzb2x1dGVEZXZpYXRpb24sIG1lZGlhbkFic29sdXRlRGV2aWF0aW9uIGFzIG1hZCwgY2h1bmssIHNhbXBsZVdpdGhSZXBsYWNlbWVudCwgc2h1ZmZsZSwgc2h1ZmZsZUluUGxhY2UsIHNhbXBsZSwgY2ttZWFucywgdW5pcXVlQ291bnRTb3J0ZWQsIHN1bU50aFBvd2VyRGV2aWF0aW9ucywgZXF1YWxJbnRlcnZhbEJyZWFrcywgc2FtcGxlQ292YXJpYW5jZSwgc2FtcGxlQ29ycmVsYXRpb24sIHNhbXBsZVZhcmlhbmNlLCBzYW1wbGVTdGFuZGFyZERldmlhdGlvbiwgc2FtcGxlU2tld25lc3MsIHNhbXBsZUt1cnRvc2lzLCBwZXJtdXRhdGlvbnNIZWFwLCBjb21iaW5hdGlvbnMsIGNvbWJpbmF0aW9uc1JlcGxhY2VtZW50LCBhZGRUb01lYW4sIGNvbWJpbmVNZWFucywgY29tYmluZVZhcmlhbmNlcywgZ2VvbWV0cmljTWVhbiwgaGFybW9uaWNNZWFuLCBtZWFuIGFzIGF2ZXJhZ2UsIG1lYW4sIG1lZGlhbiwgbWVkaWFuU29ydGVkLCBzdWJ0cmFjdEZyb21NZWFuLCByb290TWVhblNxdWFyZSwgcm9vdE1lYW5TcXVhcmUgYXMgcm1zLCB2YXJpYW5jZSwgdFRlc3QsIHRUZXN0VHdvU2FtcGxlLCBCYXllc2lhbkNsYXNzaWZpZXIsIEJheWVzaWFuQ2xhc3NpZmllciBhcyBiYXllc2lhbiwgUGVyY2VwdHJvbk1vZGVsLCBQZXJjZXB0cm9uTW9kZWwgYXMgcGVyY2VwdHJvbiwgZXBzaWxvbiwgZmFjdG9yaWFsLCBnYW1tYSwgZ2FtbWFsbiwgYmVybm91bGxpRGlzdHJpYnV0aW9uLCBiaW5vbWlhbERpc3RyaWJ1dGlvbiwgcG9pc3NvbkRpc3RyaWJ1dGlvbiwgY2hpU3F1YXJlZERpc3RyaWJ1dGlvblRhYmxlLCBjaGlTcXVhcmVkR29vZG5lc3NPZkZpdCwga2VybmVsRGVuc2l0eUVzdGltYXRpb24sIGtlcm5lbERlbnNpdHlFc3RpbWF0aW9uIGFzIGtkZSwgelNjb3JlLCBjdW11bGF0aXZlU3RkTm9ybWFsUHJvYmFiaWxpdHksIHN0YW5kYXJkTm9ybWFsVGFibGUsIGVycm9yRnVuY3Rpb24sIGVycm9yRnVuY3Rpb24gYXMgZXJmLCBpbnZlcnNlRXJyb3JGdW5jdGlvbiwgcHJvYml0LCBwZXJtdXRhdGlvblRlc3QsIGJpc2VjdCwgcXVpY2tzZWxlY3QsIHNpZ24sIG51bWVyaWNTb3J0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW1wbGUtc3RhdGlzdGljcy5tanMubWFwXG4iLCJpbXBvcnQge21heH0gZnJvbSAnc2ltcGxlLXN0YXRpc3RpY3MnO1xuaW1wb3J0IHtlcXVhbFBvaW50cywgcGFpck5vZGVMaW5rcywgZXF1YWxMaW5rc30gZnJvbSBcIi4va3J1c2thbC1tc3RcIjtcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgQ2x1bXB5IHtcbiAgICBjb25zdHJ1Y3Rvcih0cmVlKSB7XG4gICAgICAgIC8vQ2xvbmUgdGhlIHRyZWUgdG8gYXZvaWQgbW9kaWZ5aW5nIGl0XG4gICAgICAgIHRoaXMudHJlZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJlZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY2x1bXB5IHNjb3JlXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBzY29yZSgpIHtcbiAgICAgICAgbGV0IGFsbFJ1bnRSYXRpb3MgPSBbXTtcbiAgICAgICAgdGhpcy50cmVlLmxpbmtzLmZvckVhY2gobGluayA9PntcbiAgICAgICAgICAgIGxldCByZyA9IHRoaXMucnVudEdyYXBoKGxpbmspO1xuICAgICAgICAgICAgaWYocmcubGVuZ3RoPjApe1xuICAgICAgICAgICAgICAgIGFsbFJ1bnRSYXRpb3MucHVzaCh0aGlzLm1heExlbmd0aChyZykvbGluay53ZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYoYWxsUnVudFJhdGlvcy5sZW5ndGg+MCl7XG4gICAgICAgICAgICAvL09ubHkgaWYgdGhlcmUgYXJlIHNvbWUgcnVudCBncmFwaHNcbiAgICAgICAgICAgIHJldHVybiBtYXgoYWxsUnVudFJhdGlvcy5tYXAocnI9PjEtcnIpKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAvL0luIGNhc2UgYWxsIGxlbmd0aHMgYXJlIGVxdWFsID0+IHRoZW4gdGhlIHNjb3JlIGlzIDBcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHNjb3JlKCkge1xuICAgIC8vICAgICByZXR1cm4gbWF4KHRoaXMudHJlZS5saW5rcy5tYXAobGluaz0+MS10aGlzLm1heExlbmd0aCh0aGlzLnJ1bnRHcmFwaChsaW5rKSkvbGluay53ZWlnaHQpKTtcbiAgICAvLyB9XG4gICAgLy8gcnVudEdyYXBoKGxpbmspe1xuICAgIC8vICAgICBsZXQgZ3JlYXRlck9yRXF1YWxMaW5rcyA9IHRoaXMudHJlZS5saW5rcy5maWx0ZXIobD0+bC53ZWlnaHQgPj0gbGluay53ZWlnaHQpO1xuICAgIC8vICAgICAvL1JlbW92ZSB0aGUgY3VycmVudGx5IGNoZWNraW5nIGxpbmsuXG4gICAgLy8gICAgIGdyZWF0ZXJPckVxdWFsTGlua3MgPSBncmVhdGVyT3JFcXVhbExpbmtzLmZpbHRlcihsPT4hZXF1YWxMaW5rcyhsLCBsaW5rKSk7XG4gICAgLy8gICAgIGxldCBwYWlyZWRSZXN1bHRzID0gcGFpck5vZGVMaW5rcyhncmVhdGVyT3JFcXVhbExpbmtzKTtcbiAgICAvL1xuICAgIC8vICAgICAvL1Byb2Nlc3MgdGhlIHNvdXJjZSBzaWRlLlxuICAgIC8vICAgICBsZXQgc291cmNlQ29ubmVjdGVkTm9kZXMgPSBbbGluay5zb3VyY2VdO1xuICAgIC8vICAgICBsZXQgc291cmNlQ29ubmVjdGVkTGlua3MgPSB0aGlzLmdldENvbm5lY3RlZExpbmtzKHNvdXJjZUNvbm5lY3RlZE5vZGVzLCBwYWlyZWRSZXN1bHRzKTtcbiAgICAvL1xuICAgIC8vICAgICBsZXQgdGFyZ2V0Q29ubmVjdGVkTm9kZXMgPSBbbGluay50YXJnZXRdO1xuICAgIC8vICAgICBsZXQgdGFyZ2V0Q29ubmVjdGVkTGlua3MgPSB0aGlzLmdldENvbm5lY3RlZExpbmtzKHRhcmdldENvbm5lY3RlZE5vZGVzLCBwYWlyZWRSZXN1bHRzKTtcbiAgICAvL1xuICAgIC8vICAgICByZXR1cm4gc291cmNlQ29ubmVjdGVkTGlua3MubGVuZ3RoIDwgdGFyZ2V0Q29ubmVjdGVkTGlua3MubGVuZ3RoP3NvdXJjZUNvbm5lY3RlZExpbmtzOnRhcmdldENvbm5lY3RlZExpbmtzO1xuICAgIC8vIH1cbiAgICBydW50R3JhcGgobGluayl7XG4gICAgICAgIGxldCBncmVhdGVyT3JFcXVhbExpbmtzID0gdGhpcy50cmVlLmxpbmtzLmZpbHRlcihsPT5sLndlaWdodCA8IGxpbmsud2VpZ2h0KTtcbiAgICAgICAgLy9SZW1vdmUgdGhlIGN1cnJlbnRseSBjaGVja2luZyBsaW5rLlxuICAgICAgICBncmVhdGVyT3JFcXVhbExpbmtzID0gZ3JlYXRlck9yRXF1YWxMaW5rcy5maWx0ZXIobD0+IWVxdWFsTGlua3MobCwgbGluaykpO1xuICAgICAgICBsZXQgcGFpcmVkUmVzdWx0cyA9IHBhaXJOb2RlTGlua3MoZ3JlYXRlck9yRXF1YWxMaW5rcyk7XG5cbiAgICAgICAgLy9Qcm9jZXNzIHRoZSBzb3VyY2Ugc2lkZS5cbiAgICAgICAgbGV0IHNvdXJjZUNvbm5lY3RlZE5vZGVzID0gW2xpbmsuc291cmNlXTtcbiAgICAgICAgbGV0IHNvdXJjZUNvbm5lY3RlZExpbmtzID0gdGhpcy5nZXRDb25uZWN0ZWRMaW5rcyhzb3VyY2VDb25uZWN0ZWROb2RlcywgcGFpcmVkUmVzdWx0cyk7XG5cbiAgICAgICAgbGV0IHRhcmdldENvbm5lY3RlZE5vZGVzID0gW2xpbmsudGFyZ2V0XTtcbiAgICAgICAgbGV0IHRhcmdldENvbm5lY3RlZExpbmtzID0gdGhpcy5nZXRDb25uZWN0ZWRMaW5rcyh0YXJnZXRDb25uZWN0ZWROb2RlcywgcGFpcmVkUmVzdWx0cyk7XG5cbiAgICAgICAgcmV0dXJuIHNvdXJjZUNvbm5lY3RlZExpbmtzLmxlbmd0aCA8IHRhcmdldENvbm5lY3RlZExpbmtzLmxlbmd0aD9zb3VyY2VDb25uZWN0ZWRMaW5rczp0YXJnZXRDb25uZWN0ZWRMaW5rcztcbiAgICB9XG5cblxuICAgIGdldENvbm5lY3RlZExpbmtzKGNvbm5lY3RlZE5vZGVzLCBwYWlyZWRSZXN1bHRzKSB7XG4gICAgICAgIGxldCBwcm9jZXNzZWROb2RlcyA9IFtdO1xuICAgICAgICBsZXQgY29ubmVjdGVkTGlua3MgPSBbXTtcbiAgICAgICAgd2hpbGUgKGNvbm5lY3RlZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vQ2FuIHN0b3AgZWFybGllciBpZiB0aGlzIGlzIGhhdmluZyBtb3JlIHRoYW4gaGFsZiBvZiB0aGUgbGlua3MgaW4gdGhlIHdob2xlIHRyZWUuXG4gICAgICAgICAgICBpZihjb25uZWN0ZWRMaW5rcy5sZW5ndGggPiB0aGlzLnRyZWUubGlua3MubGVuZ3RoICsgMSl7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZmlyc3ROb2RlID0gXy5maXJzdChjb25uZWN0ZWROb2Rlcyk7XG4gICAgICAgICAgICAvL1JlbW92ZWQgdGhlIHByb2Nlc3NlZCBub2Rlc1xuICAgICAgICAgICAgY29ubmVjdGVkTm9kZXMgPSBfLndpdGhvdXQoY29ubmVjdGVkTm9kZXMsIGZpcnN0Tm9kZSk7XG4gICAgICAgICAgICAvL0FkZCBpdCB0byB0aGUgcHJvY2Vzc2VkIG5vZGVcbiAgICAgICAgICAgIHByb2Nlc3NlZE5vZGVzLnB1c2goZmlyc3ROb2RlKTtcbiAgICAgICAgICAgIC8vRmluZCB0aGUgZWRnZXMgY29ubmVjdGVkIHRvIHRoYXQgbm9kZS5cbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBwYWlyZWRSZXN1bHRzLmZpbmQocCA9PiBwWzBdID09PSBmaXJzdE5vZGUuam9pbihcIixcIikpO1xuICAgICAgICAgICAgbGV0IGxpbmtzID0gcmVzdWx0P3Jlc3VsdFsxXTpbXTtcbiAgICAgICAgICAgIGNvbm5lY3RlZExpbmtzID0gY29ubmVjdGVkTGlua3MuY29uY2F0KGxpbmtzKTtcbiAgICAgICAgICAgIC8vQWRkIG5ldyBub2RlcyB0byBiZSBwcm9jZXNzZWRcbiAgICAgICAgICAgIGxpbmtzLmZvckVhY2gobCA9PiB7XG4gICAgICAgICAgICAgICAgLy9JZiB0aGUgbm9kZSBpbiB0aGUgY29ubmVjdGVkIGxpbmsgaXMgbm90IHByb2Nlc3NlZCA9PiB0aGVuIGFkZCBpdCB0byBiZSBwcm9jZXNzZWQgKHRvIGV4cGFuZCBsYXRlciBvbikuXG4gICAgICAgICAgICAgICAgaWYgKCFwb2ludEV4aXN0cyhwcm9jZXNzZWROb2RlcywgbC5zb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RlZE5vZGVzLnB1c2gobC5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZighcG9pbnRFeGlzdHMocHJvY2Vzc2VkTm9kZXMsIGwudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWROb2Rlcy5wdXNoKGwudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGVkTGlua3M7XG4gICAgfVxuXG4gICAgbWF4TGVuZ3RoKHJ1bnRHcmFwaCl7XG4gICAgICAgIGlmKHJ1bnRHcmFwaC5sZW5ndGg9PT0wKXtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXgocnVudEdyYXBoLm1hcChsPT5sLndlaWdodCkpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBwb2ludEV4aXN0cyhwb2ludHMsIHBvaW50KXtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcG9pbnQxID0gcG9pbnRzW2ldO1xuICAgICAgICBpZiAoZXF1YWxQb2ludHMocG9pbnQxLCBwb2ludCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn0iLCIvKipcbiAqIENoZWNrIGlmIHNldCBvZiB1bmlxdWUgcG9pbnRzIChuZWVkIHRvIG1ha2Ugc3VyZSB0aGUgcG9pbnRzIGFyZSB1bmlxdWUpIGFyZSBpbiBhIGxpbmVcbiAqIEBwYXJhbSBwb2ludHNcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBMkRMaW5lKHBvaW50cykge1xuICAgIGxldCB4MSA9IHBvaW50c1swXVswXTtcbiAgICBsZXQgeTEgPSBwb2ludHNbMF1bMV07XG4gICAgbGV0IHgyID0gcG9pbnRzWzFdWzBdO1xuICAgIGxldCB5MiA9IHBvaW50c1sxXVsxXTtcblxuICAgIGZvciAobGV0IGkgPSAyOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB4MyA9IHBvaW50c1tpXVswXTtcbiAgICAgICAgbGV0IHkzID0gcG9pbnRzW2ldWzFdO1xuICAgICAgICBpZiAoKCh4MiAtIHgxKSAqICh5MyAtIHkxKSAtICh5MiAtIHkxKSAqICh4MyAtIHgxKSkgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0iLCJcbmNvbnN0IEVQU0lMT04gPSBNYXRoLnBvdygyLCAtNTIpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZWxhdW5hdG9yIHtcblxuICAgIHN0YXRpYyBmcm9tKHBvaW50cywgZ2V0WCwgZ2V0WSkge1xuICAgICAgICBpZiAoIWdldFgpIGdldFggPSBkZWZhdWx0R2V0WDtcbiAgICAgICAgaWYgKCFnZXRZKSBnZXRZID0gZGVmYXVsdEdldFk7XG5cbiAgICAgICAgY29uc3QgbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IG5ldyBGbG9hdDY0QXJyYXkobiAqIDIpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgY29vcmRzWzIgKiBpXSA9IGdldFgocCk7XG4gICAgICAgICAgICBjb29yZHNbMiAqIGkgKyAxXSA9IGdldFkocCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IERlbGF1bmF0b3IoY29vcmRzKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihjb29yZHMpIHtcbiAgICAgICAgbGV0IG1pblggPSBJbmZpbml0eTtcbiAgICAgICAgbGV0IG1pblkgPSBJbmZpbml0eTtcbiAgICAgICAgbGV0IG1heFggPSAtSW5maW5pdHk7XG4gICAgICAgIGxldCBtYXhZID0gLUluZmluaXR5O1xuXG4gICAgICAgIGNvbnN0IG4gPSBjb29yZHMubGVuZ3RoID4+IDE7XG4gICAgICAgIGNvbnN0IGlkcyA9IHRoaXMuaWRzID0gbmV3IFVpbnQzMkFycmF5KG4pO1xuXG4gICAgICAgIGlmIChuID4gMCAmJiB0eXBlb2YgY29vcmRzWzBdICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBjb29yZHMgdG8gY29udGFpbiBudW1iZXJzLicpO1xuXG4gICAgICAgIHRoaXMuY29vcmRzID0gY29vcmRzO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gY29vcmRzWzIgKiBpXTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBjb29yZHNbMiAqIGkgKyAxXTtcbiAgICAgICAgICAgIGlmICh4IDwgbWluWCkgbWluWCA9IHg7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIG1pblkgPSB5O1xuICAgICAgICAgICAgaWYgKHggPiBtYXhYKSBtYXhYID0geDtcbiAgICAgICAgICAgIGlmICh5ID4gbWF4WSkgbWF4WSA9IHk7XG4gICAgICAgICAgICBpZHNbaV0gPSBpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3ggPSAobWluWCArIG1heFgpIC8gMjtcbiAgICAgICAgY29uc3QgY3kgPSAobWluWSArIG1heFkpIC8gMjtcblxuICAgICAgICBsZXQgbWluRGlzdCA9IEluZmluaXR5O1xuICAgICAgICBsZXQgaTAsIGkxLCBpMjtcblxuICAgICAgICAvLyBwaWNrIGEgc2VlZCBwb2ludCBjbG9zZSB0byB0aGUgY2VudHJvaWRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGQgPSBkaXN0KGN4LCBjeSwgY29vcmRzWzIgKiBpXSwgY29vcmRzWzIgKiBpICsgMV0pO1xuICAgICAgICAgICAgaWYgKGQgPCBtaW5EaXN0KSB7XG4gICAgICAgICAgICAgICAgaTAgPSBpO1xuICAgICAgICAgICAgICAgIG1pbkRpc3QgPSBkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGkweCA9IGNvb3Jkc1syICogaTBdO1xuICAgICAgICBjb25zdCBpMHkgPSBjb29yZHNbMiAqIGkwICsgMV07XG5cbiAgICAgICAgbWluRGlzdCA9IEluZmluaXR5O1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIHBvaW50IGNsb3Nlc3QgdG8gdGhlIHNlZWRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpMCkgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBkID0gZGlzdChpMHgsIGkweSwgY29vcmRzWzIgKiBpXSwgY29vcmRzWzIgKiBpICsgMV0pO1xuICAgICAgICAgICAgaWYgKGQgPCBtaW5EaXN0ICYmIGQgPiAwKSB7XG4gICAgICAgICAgICAgICAgaTEgPSBpO1xuICAgICAgICAgICAgICAgIG1pbkRpc3QgPSBkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBpMXggPSBjb29yZHNbMiAqIGkxXTtcbiAgICAgICAgbGV0IGkxeSA9IGNvb3Jkc1syICogaTEgKyAxXTtcblxuICAgICAgICBsZXQgbWluUmFkaXVzID0gSW5maW5pdHk7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgdGhpcmQgcG9pbnQgd2hpY2ggZm9ybXMgdGhlIHNtYWxsZXN0IGNpcmN1bWNpcmNsZSB3aXRoIHRoZSBmaXJzdCB0d29cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpMCB8fCBpID09PSBpMSkgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCByID0gY2lyY3VtcmFkaXVzKGkweCwgaTB5LCBpMXgsIGkxeSwgY29vcmRzWzIgKiBpXSwgY29vcmRzWzIgKiBpICsgMV0pO1xuICAgICAgICAgICAgaWYgKHIgPCBtaW5SYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBpMiA9IGk7XG4gICAgICAgICAgICAgICAgbWluUmFkaXVzID0gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgaTJ4ID0gY29vcmRzWzIgKiBpMl07XG4gICAgICAgIGxldCBpMnkgPSBjb29yZHNbMiAqIGkyICsgMV07XG5cbiAgICAgICAgaWYgKG1pblJhZGl1cyA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gRGVsYXVuYXkgdHJpYW5ndWxhdGlvbiBleGlzdHMgZm9yIHRoaXMgaW5wdXQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzd2FwIHRoZSBvcmRlciBvZiB0aGUgc2VlZCBwb2ludHMgZm9yIGNvdW50ZXItY2xvY2t3aXNlIG9yaWVudGF0aW9uXG4gICAgICAgIGlmIChvcmllbnQoaTB4LCBpMHksIGkxeCwgaTF5LCBpMngsIGkyeSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBpMTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBpMXg7XG4gICAgICAgICAgICBjb25zdCB5ID0gaTF5O1xuICAgICAgICAgICAgaTEgPSBpMjtcbiAgICAgICAgICAgIGkxeCA9IGkyeDtcbiAgICAgICAgICAgIGkxeSA9IGkyeTtcbiAgICAgICAgICAgIGkyID0gaTtcbiAgICAgICAgICAgIGkyeCA9IHg7XG4gICAgICAgICAgICBpMnkgPSB5O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2VudGVyID0gY2lyY3VtY2VudGVyKGkweCwgaTB5LCBpMXgsIGkxeSwgaTJ4LCBpMnkpO1xuICAgICAgICB0aGlzLl9jeCA9IGNlbnRlci54O1xuICAgICAgICB0aGlzLl9jeSA9IGNlbnRlci55O1xuXG4gICAgICAgIC8vIHNvcnQgdGhlIHBvaW50cyBieSBkaXN0YW5jZSBmcm9tIHRoZSBzZWVkIHRyaWFuZ2xlIGNpcmN1bWNlbnRlclxuICAgICAgICBxdWlja3NvcnQoaWRzLCBjb29yZHMsIDAsIGlkcy5sZW5ndGggLSAxLCBjZW50ZXIueCwgY2VudGVyLnkpO1xuXG4gICAgICAgIC8vIGluaXRpYWxpemUgYSBoYXNoIHRhYmxlIGZvciBzdG9yaW5nIGVkZ2VzIG9mIHRoZSBhZHZhbmNpbmcgY29udmV4IGh1bGxcbiAgICAgICAgdGhpcy5faGFzaFNpemUgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KG4pKTtcbiAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBBcnJheSh0aGlzLl9oYXNoU2l6ZSk7XG5cbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBhIGNpcmN1bGFyIGRvdWJseS1saW5rZWQgbGlzdCB0aGF0IHdpbGwgaG9sZCBhbiBhZHZhbmNpbmcgY29udmV4IGh1bGxcbiAgICAgICAgbGV0IGUgPSB0aGlzLmh1bGwgPSBpbnNlcnROb2RlKGNvb3JkcywgaTApO1xuICAgICAgICB0aGlzLl9oYXNoRWRnZShlKTtcbiAgICAgICAgZS50ID0gMDtcbiAgICAgICAgZSA9IGluc2VydE5vZGUoY29vcmRzLCBpMSwgZSk7XG4gICAgICAgIHRoaXMuX2hhc2hFZGdlKGUpO1xuICAgICAgICBlLnQgPSAxO1xuICAgICAgICBlID0gaW5zZXJ0Tm9kZShjb29yZHMsIGkyLCBlKTtcbiAgICAgICAgdGhpcy5faGFzaEVkZ2UoZSk7XG4gICAgICAgIGUudCA9IDI7XG5cbiAgICAgICAgY29uc3QgbWF4VHJpYW5nbGVzID0gMiAqIG4gLSA1O1xuICAgICAgICBjb25zdCB0cmlhbmdsZXMgPSB0aGlzLnRyaWFuZ2xlcyA9IG5ldyBVaW50MzJBcnJheShtYXhUcmlhbmdsZXMgKiAzKTtcbiAgICAgICAgY29uc3QgaGFsZmVkZ2VzID0gdGhpcy5oYWxmZWRnZXMgPSBuZXcgSW50MzJBcnJheShtYXhUcmlhbmdsZXMgKiAzKTtcblxuICAgICAgICB0aGlzLnRyaWFuZ2xlc0xlbiA9IDA7XG5cbiAgICAgICAgdGhpcy5fYWRkVHJpYW5nbGUoaTAsIGkxLCBpMiwgLTEsIC0xLCAtMSk7XG5cbiAgICAgICAgZm9yIChsZXQgayA9IDAsIHhwLCB5cDsgayA8IGlkcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgY29uc3QgaSA9IGlkc1trXTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBjb29yZHNbMiAqIGldO1xuICAgICAgICAgICAgY29uc3QgeSA9IGNvb3Jkc1syICogaSArIDFdO1xuXG4gICAgICAgICAgICAvLyBza2lwIG5lYXItZHVwbGljYXRlIHBvaW50c1xuICAgICAgICAgICAgaWYgKGsgPiAwICYmIE1hdGguYWJzKHggLSB4cCkgPD0gRVBTSUxPTiAmJiBNYXRoLmFicyh5IC0geXApIDw9IEVQU0lMT04pIGNvbnRpbnVlO1xuICAgICAgICAgICAgeHAgPSB4O1xuICAgICAgICAgICAgeXAgPSB5O1xuXG4gICAgICAgICAgICAvLyBza2lwIHNlZWQgdHJpYW5nbGUgcG9pbnRzXG4gICAgICAgICAgICBpZiAoaSA9PT0gaTAgfHwgaSA9PT0gaTEgfHwgaSA9PT0gaTIpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBmaW5kIGEgdmlzaWJsZSBlZGdlIG9uIHRoZSBjb252ZXggaHVsbCB1c2luZyBlZGdlIGhhc2hcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0S2V5ID0gdGhpcy5faGFzaEtleSh4LCB5KTtcbiAgICAgICAgICAgIGxldCBrZXkgPSBzdGFydEtleTtcbiAgICAgICAgICAgIGxldCBzdGFydDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuX2hhc2hba2V5XTtcbiAgICAgICAgICAgICAgICBrZXkgPSAoa2V5ICsgMSkgJSB0aGlzLl9oYXNoU2l6ZTtcbiAgICAgICAgICAgIH0gd2hpbGUgKCghc3RhcnQgfHwgc3RhcnQucmVtb3ZlZCkgJiYga2V5ICE9PSBzdGFydEtleSk7XG5cbiAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQucHJldjtcbiAgICAgICAgICAgIGUgPSBzdGFydDtcbiAgICAgICAgICAgIHdoaWxlICghb3JpZW50KHgsIHksIGUueCwgZS55LCBlLm5leHQueCwgZS5uZXh0LnkpKSB7XG4gICAgICAgICAgICAgICAgZSA9IGUubmV4dDtcbiAgICAgICAgICAgICAgICBpZiAoZSA9PT0gc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGxpa2VseSBhIG5lYXItZHVwbGljYXRlIHBvaW50OyBza2lwIGl0XG4gICAgICAgICAgICBpZiAoIWUpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb25zdCB3YWxrQmFjayA9IGUgPT09IHN0YXJ0O1xuXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGZpcnN0IHRyaWFuZ2xlIGZyb20gdGhlIHBvaW50XG4gICAgICAgICAgICBsZXQgdCA9IHRoaXMuX2FkZFRyaWFuZ2xlKGUuaSwgaSwgZS5uZXh0LmksIC0xLCAtMSwgZS50KTtcblxuICAgICAgICAgICAgZS50ID0gdDsgLy8ga2VlcCB0cmFjayBvZiBib3VuZGFyeSB0cmlhbmdsZXMgb24gdGhlIGh1bGxcbiAgICAgICAgICAgIGUgPSBpbnNlcnROb2RlKGNvb3JkcywgaSwgZSk7XG5cbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGZsaXAgdHJpYW5nbGVzIGZyb20gdGhlIHBvaW50IHVudGlsIHRoZXkgc2F0aXNmeSB0aGUgRGVsYXVuYXkgY29uZGl0aW9uXG4gICAgICAgICAgICBlLnQgPSB0aGlzLl9sZWdhbGl6ZSh0ICsgMik7XG5cbiAgICAgICAgICAgIC8vIHdhbGsgZm9yd2FyZCB0aHJvdWdoIHRoZSBodWxsLCBhZGRpbmcgbW9yZSB0cmlhbmdsZXMgYW5kIGZsaXBwaW5nIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgICBsZXQgcSA9IGUubmV4dDtcbiAgICAgICAgICAgIHdoaWxlIChvcmllbnQoeCwgeSwgcS54LCBxLnksIHEubmV4dC54LCBxLm5leHQueSkpIHtcbiAgICAgICAgICAgICAgICB0ID0gdGhpcy5fYWRkVHJpYW5nbGUocS5pLCBpLCBxLm5leHQuaSwgcS5wcmV2LnQsIC0xLCBxLnQpO1xuICAgICAgICAgICAgICAgIHEucHJldi50ID0gdGhpcy5fbGVnYWxpemUodCArIDIpO1xuICAgICAgICAgICAgICAgIHRoaXMuaHVsbCA9IHJlbW92ZU5vZGUocSk7XG4gICAgICAgICAgICAgICAgcSA9IHEubmV4dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHdhbGtCYWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gd2FsayBiYWNrd2FyZCBmcm9tIHRoZSBvdGhlciBzaWRlLCBhZGRpbmcgbW9yZSB0cmlhbmdsZXMgYW5kIGZsaXBwaW5nXG4gICAgICAgICAgICAgICAgcSA9IGUucHJldjtcbiAgICAgICAgICAgICAgICB3aGlsZSAob3JpZW50KHgsIHksIHEucHJldi54LCBxLnByZXYueSwgcS54LCBxLnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLl9hZGRUcmlhbmdsZShxLnByZXYuaSwgaSwgcS5pLCAtMSwgcS50LCBxLnByZXYudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xlZ2FsaXplKHQgKyAyKTtcbiAgICAgICAgICAgICAgICAgICAgcS5wcmV2LnQgPSB0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmh1bGwgPSByZW1vdmVOb2RlKHEpO1xuICAgICAgICAgICAgICAgICAgICBxID0gcS5wcmV2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2F2ZSB0aGUgdHdvIG5ldyBlZGdlcyBpbiB0aGUgaGFzaCB0YWJsZVxuICAgICAgICAgICAgdGhpcy5faGFzaEVkZ2UoZSk7XG4gICAgICAgICAgICB0aGlzLl9oYXNoRWRnZShlLnByZXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJpbSB0eXBlZCB0cmlhbmdsZSBtZXNoIGFycmF5c1xuICAgICAgICB0aGlzLnRyaWFuZ2xlcyA9IHRyaWFuZ2xlcy5zdWJhcnJheSgwLCB0aGlzLnRyaWFuZ2xlc0xlbik7XG4gICAgICAgIHRoaXMuaGFsZmVkZ2VzID0gaGFsZmVkZ2VzLnN1YmFycmF5KDAsIHRoaXMudHJpYW5nbGVzTGVuKTtcbiAgICB9XG5cbiAgICBfaGFzaEVkZ2UoZSkge1xuICAgICAgICB0aGlzLl9oYXNoW3RoaXMuX2hhc2hLZXkoZS54LCBlLnkpXSA9IGU7XG4gICAgfVxuXG4gICAgX2hhc2hLZXkoeCwgeSkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihwc2V1ZG9BbmdsZSh4IC0gdGhpcy5fY3gsIHkgLSB0aGlzLl9jeSkgKiB0aGlzLl9oYXNoU2l6ZSkgJSB0aGlzLl9oYXNoU2l6ZTtcbiAgICB9XG5cbiAgICBfbGVnYWxpemUoYSkge1xuICAgICAgICBjb25zdCB7dHJpYW5nbGVzLCBjb29yZHMsIGhhbGZlZGdlc30gPSB0aGlzO1xuXG4gICAgICAgIGNvbnN0IGIgPSBoYWxmZWRnZXNbYV07XG5cbiAgICAgICAgLyogaWYgdGhlIHBhaXIgb2YgdHJpYW5nbGVzIGRvZXNuJ3Qgc2F0aXNmeSB0aGUgRGVsYXVuYXkgY29uZGl0aW9uXG4gICAgICAgICAqIChwMSBpcyBpbnNpZGUgdGhlIGNpcmN1bWNpcmNsZSBvZiBbcDAsIHBsLCBwcl0pLCBmbGlwIHRoZW0sXG4gICAgICAgICAqIHRoZW4gZG8gdGhlIHNhbWUgY2hlY2svZmxpcCByZWN1cnNpdmVseSBmb3IgdGhlIG5ldyBwYWlyIG9mIHRyaWFuZ2xlc1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgICAgcGwgICAgICAgICAgICAgICAgICAgIHBsXG4gICAgICAgICAqICAgICAgICAgIC98fFxcICAgICAgICAgICAgICAgICAgLyAgXFxcbiAgICAgICAgICogICAgICAgYWwvIHx8IFxcYmwgICAgICAgICAgICBhbC8gICAgXFxhXG4gICAgICAgICAqICAgICAgICAvICB8fCAgXFwgICAgICAgICAgICAgIC8gICAgICBcXFxuICAgICAgICAgKiAgICAgICAvICBhfHxiICBcXCAgICBmbGlwICAgIC9fX19hcl9fX1xcXG4gICAgICAgICAqICAgICBwMFxcICAgfHwgICAvcDEgICA9PiAgIHAwXFwtLS1ibC0tLS9wMVxuICAgICAgICAgKiAgICAgICAgXFwgIHx8ICAvICAgICAgICAgICAgICBcXCAgICAgIC9cbiAgICAgICAgICogICAgICAgYXJcXCB8fCAvYnIgICAgICAgICAgICAgYlxcICAgIC9iclxuICAgICAgICAgKiAgICAgICAgICBcXHx8LyAgICAgICAgICAgICAgICAgIFxcICAvXG4gICAgICAgICAqICAgICAgICAgICBwciAgICAgICAgICAgICAgICAgICAgcHJcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGEwID0gYSAtIGEgJSAzO1xuICAgICAgICBjb25zdCBiMCA9IGIgLSBiICUgMztcblxuICAgICAgICBjb25zdCBhbCA9IGEwICsgKGEgKyAxKSAlIDM7XG4gICAgICAgIGNvbnN0IGFyID0gYTAgKyAoYSArIDIpICUgMztcbiAgICAgICAgY29uc3QgYmwgPSBiMCArIChiICsgMikgJSAzO1xuXG4gICAgICAgIGlmIChiID09PSAtMSkgcmV0dXJuIGFyO1xuXG4gICAgICAgIGNvbnN0IHAwID0gdHJpYW5nbGVzW2FyXTtcbiAgICAgICAgY29uc3QgcHIgPSB0cmlhbmdsZXNbYV07XG4gICAgICAgIGNvbnN0IHBsID0gdHJpYW5nbGVzW2FsXTtcbiAgICAgICAgY29uc3QgcDEgPSB0cmlhbmdsZXNbYmxdO1xuXG4gICAgICAgIGNvbnN0IGlsbGVnYWwgPSBpbkNpcmNsZShcbiAgICAgICAgICAgIGNvb3Jkc1syICogcDBdLCBjb29yZHNbMiAqIHAwICsgMV0sXG4gICAgICAgICAgICBjb29yZHNbMiAqIHByXSwgY29vcmRzWzIgKiBwciArIDFdLFxuICAgICAgICAgICAgY29vcmRzWzIgKiBwbF0sIGNvb3Jkc1syICogcGwgKyAxXSxcbiAgICAgICAgICAgIGNvb3Jkc1syICogcDFdLCBjb29yZHNbMiAqIHAxICsgMV0pO1xuXG4gICAgICAgIGlmIChpbGxlZ2FsKSB7XG4gICAgICAgICAgICB0cmlhbmdsZXNbYV0gPSBwMTtcbiAgICAgICAgICAgIHRyaWFuZ2xlc1tiXSA9IHAwO1xuXG4gICAgICAgICAgICBjb25zdCBoYmwgPSBoYWxmZWRnZXNbYmxdO1xuXG4gICAgICAgICAgICAvLyBlZGdlIHN3YXBwZWQgb24gdGhlIG90aGVyIHNpZGUgb2YgdGhlIGh1bGwgKHJhcmUpOyBmaXggdGhlIGhhbGZlZGdlIHJlZmVyZW5jZVxuICAgICAgICAgICAgaWYgKGhibCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHRoaXMuaHVsbDtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnQgPT09IGJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnQgPSBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZSA9IGUubmV4dDtcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChlICE9PSB0aGlzLmh1bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGluayhhLCBoYmwpO1xuICAgICAgICAgICAgdGhpcy5fbGluayhiLCBoYWxmZWRnZXNbYXJdKTtcbiAgICAgICAgICAgIHRoaXMuX2xpbmsoYXIsIGJsKTtcblxuICAgICAgICAgICAgY29uc3QgYnIgPSBiMCArIChiICsgMSkgJSAzO1xuXG4gICAgICAgICAgICB0aGlzLl9sZWdhbGl6ZShhKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZWdhbGl6ZShicik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXI7XG4gICAgfVxuXG4gICAgX2xpbmsoYSwgYikge1xuICAgICAgICB0aGlzLmhhbGZlZGdlc1thXSA9IGI7XG4gICAgICAgIGlmIChiICE9PSAtMSkgdGhpcy5oYWxmZWRnZXNbYl0gPSBhO1xuICAgIH1cblxuICAgIC8vIGFkZCBhIG5ldyB0cmlhbmdsZSBnaXZlbiB2ZXJ0ZXggaW5kaWNlcyBhbmQgYWRqYWNlbnQgaGFsZi1lZGdlIGlkc1xuICAgIF9hZGRUcmlhbmdsZShpMCwgaTEsIGkyLCBhLCBiLCBjKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnRyaWFuZ2xlc0xlbjtcblxuICAgICAgICB0aGlzLnRyaWFuZ2xlc1t0XSA9IGkwO1xuICAgICAgICB0aGlzLnRyaWFuZ2xlc1t0ICsgMV0gPSBpMTtcbiAgICAgICAgdGhpcy50cmlhbmdsZXNbdCArIDJdID0gaTI7XG5cbiAgICAgICAgdGhpcy5fbGluayh0LCBhKTtcbiAgICAgICAgdGhpcy5fbGluayh0ICsgMSwgYik7XG4gICAgICAgIHRoaXMuX2xpbmsodCArIDIsIGMpO1xuXG4gICAgICAgIHRoaXMudHJpYW5nbGVzTGVuICs9IDM7XG5cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxufVxuXG4vLyBtb25vdG9uaWNhbGx5IGluY3JlYXNlcyB3aXRoIHJlYWwgYW5nbGUsIGJ1dCBkb2Vzbid0IG5lZWQgZXhwZW5zaXZlIHRyaWdvbm9tZXRyeVxuZnVuY3Rpb24gcHNldWRvQW5nbGUoZHgsIGR5KSB7XG4gICAgY29uc3QgcCA9IGR4IC8gKE1hdGguYWJzKGR4KSArIE1hdGguYWJzKGR5KSk7XG4gICAgcmV0dXJuIChkeSA+IDAgPyAzIC0gcCA6IDEgKyBwKSAvIDQ7IC8vIFswLi4xXVxufVxuXG5mdW5jdGlvbiBkaXN0KGF4LCBheSwgYngsIGJ5KSB7XG4gICAgY29uc3QgZHggPSBheCAtIGJ4O1xuICAgIGNvbnN0IGR5ID0gYXkgLSBieTtcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIG9yaWVudChweCwgcHksIHF4LCBxeSwgcngsIHJ5KSB7XG4gICAgcmV0dXJuIChxeSAtIHB5KSAqIChyeCAtIHF4KSAtIChxeCAtIHB4KSAqIChyeSAtIHF5KSA8IDA7XG59XG5cbmZ1bmN0aW9uIGluQ2lyY2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSkge1xuICAgIGNvbnN0IGR4ID0gYXggLSBweDtcbiAgICBjb25zdCBkeSA9IGF5IC0gcHk7XG4gICAgY29uc3QgZXggPSBieCAtIHB4O1xuICAgIGNvbnN0IGV5ID0gYnkgLSBweTtcbiAgICBjb25zdCBmeCA9IGN4IC0gcHg7XG4gICAgY29uc3QgZnkgPSBjeSAtIHB5O1xuXG4gICAgY29uc3QgYXAgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICBjb25zdCBicCA9IGV4ICogZXggKyBleSAqIGV5O1xuICAgIGNvbnN0IGNwID0gZnggKiBmeCArIGZ5ICogZnk7XG5cbiAgICByZXR1cm4gZHggKiAoZXkgKiBjcCAtIGJwICogZnkpIC1cbiAgICAgICAgICAgZHkgKiAoZXggKiBjcCAtIGJwICogZngpICtcbiAgICAgICAgICAgYXAgKiAoZXggKiBmeSAtIGV5ICogZngpIDwgMDtcbn1cblxuZnVuY3Rpb24gY2lyY3VtcmFkaXVzKGF4LCBheSwgYngsIGJ5LCBjeCwgY3kpIHtcbiAgICBjb25zdCBkeCA9IGJ4IC0gYXg7XG4gICAgY29uc3QgZHkgPSBieSAtIGF5O1xuICAgIGNvbnN0IGV4ID0gY3ggLSBheDtcbiAgICBjb25zdCBleSA9IGN5IC0gYXk7XG5cbiAgICBjb25zdCBibCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGNvbnN0IGNsID0gZXggKiBleCArIGV5ICogZXk7XG4gICAgY29uc3QgZCA9IGR4ICogZXkgLSBkeSAqIGV4O1xuXG4gICAgY29uc3QgeCA9IChleSAqIGJsIC0gZHkgKiBjbCkgKiAwLjUgLyBkO1xuICAgIGNvbnN0IHkgPSAoZHggKiBjbCAtIGV4ICogYmwpICogMC41IC8gZDtcblxuICAgIHJldHVybiBibCAmJiBjbCAmJiBkICYmICh4ICogeCArIHkgKiB5KSB8fCBJbmZpbml0eTtcbn1cblxuZnVuY3Rpb24gY2lyY3VtY2VudGVyKGF4LCBheSwgYngsIGJ5LCBjeCwgY3kpIHtcbiAgICBjb25zdCBkeCA9IGJ4IC0gYXg7XG4gICAgY29uc3QgZHkgPSBieSAtIGF5O1xuICAgIGNvbnN0IGV4ID0gY3ggLSBheDtcbiAgICBjb25zdCBleSA9IGN5IC0gYXk7XG5cbiAgICBjb25zdCBibCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGNvbnN0IGNsID0gZXggKiBleCArIGV5ICogZXk7XG4gICAgY29uc3QgZCA9IGR4ICogZXkgLSBkeSAqIGV4O1xuXG4gICAgY29uc3QgeCA9IGF4ICsgKGV5ICogYmwgLSBkeSAqIGNsKSAqIDAuNSAvIGQ7XG4gICAgY29uc3QgeSA9IGF5ICsgKGR4ICogY2wgLSBleCAqIGJsKSAqIDAuNSAvIGQ7XG5cbiAgICByZXR1cm4ge3gsIHl9O1xufVxuXG4vLyBjcmVhdGUgYSBuZXcgbm9kZSBpbiBhIGRvdWJseSBsaW5rZWQgbGlzdFxuZnVuY3Rpb24gaW5zZXJ0Tm9kZShjb29yZHMsIGksIHByZXYpIHtcbiAgICBjb25zdCBub2RlID0ge1xuICAgICAgICBpLFxuICAgICAgICB4OiBjb29yZHNbMiAqIGldLFxuICAgICAgICB5OiBjb29yZHNbMiAqIGkgKyAxXSxcbiAgICAgICAgdDogMCxcbiAgICAgICAgcHJldjogbnVsbCxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcmVtb3ZlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIG5vZGUucHJldiA9IG5vZGU7XG4gICAgICAgIG5vZGUubmV4dCA9IG5vZGU7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLm5leHQgPSBwcmV2Lm5leHQ7XG4gICAgICAgIG5vZGUucHJldiA9IHByZXY7XG4gICAgICAgIHByZXYubmV4dC5wcmV2ID0gbm9kZTtcbiAgICAgICAgcHJldi5uZXh0ID0gbm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSkge1xuICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2O1xuICAgIG5vZGUucmVtb3ZlZCA9IHRydWU7XG4gICAgcmV0dXJuIG5vZGUucHJldjtcbn1cblxuZnVuY3Rpb24gcXVpY2tzb3J0KGlkcywgY29vcmRzLCBsZWZ0LCByaWdodCwgY3gsIGN5KSB7XG4gICAgbGV0IGksIGosIHRlbXA7XG5cbiAgICBpZiAocmlnaHQgLSBsZWZ0IDw9IDIwKSB7XG4gICAgICAgIGZvciAoaSA9IGxlZnQgKyAxOyBpIDw9IHJpZ2h0OyBpKyspIHtcbiAgICAgICAgICAgIHRlbXAgPSBpZHNbaV07XG4gICAgICAgICAgICBqID0gaSAtIDE7XG4gICAgICAgICAgICB3aGlsZSAoaiA+PSBsZWZ0ICYmIGNvbXBhcmUoY29vcmRzLCBpZHNbal0sIHRlbXAsIGN4LCBjeSkgPiAwKSBpZHNbaiArIDFdID0gaWRzW2otLV07XG4gICAgICAgICAgICBpZHNbaiArIDFdID0gdGVtcDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1lZGlhbiA9IChsZWZ0ICsgcmlnaHQpID4+IDE7XG4gICAgICAgIGkgPSBsZWZ0ICsgMTtcbiAgICAgICAgaiA9IHJpZ2h0O1xuICAgICAgICBzd2FwKGlkcywgbWVkaWFuLCBpKTtcbiAgICAgICAgaWYgKGNvbXBhcmUoY29vcmRzLCBpZHNbbGVmdF0sIGlkc1tyaWdodF0sIGN4LCBjeSkgPiAwKSBzd2FwKGlkcywgbGVmdCwgcmlnaHQpO1xuICAgICAgICBpZiAoY29tcGFyZShjb29yZHMsIGlkc1tpXSwgaWRzW3JpZ2h0XSwgY3gsIGN5KSA+IDApIHN3YXAoaWRzLCBpLCByaWdodCk7XG4gICAgICAgIGlmIChjb21wYXJlKGNvb3JkcywgaWRzW2xlZnRdLCBpZHNbaV0sIGN4LCBjeSkgPiAwKSBzd2FwKGlkcywgbGVmdCwgaSk7XG5cbiAgICAgICAgdGVtcCA9IGlkc1tpXTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGRvIGkrKzsgd2hpbGUgKGNvbXBhcmUoY29vcmRzLCBpZHNbaV0sIHRlbXAsIGN4LCBjeSkgPCAwKTtcbiAgICAgICAgICAgIGRvIGotLTsgd2hpbGUgKGNvbXBhcmUoY29vcmRzLCBpZHNbal0sIHRlbXAsIGN4LCBjeSkgPiAwKTtcbiAgICAgICAgICAgIGlmIChqIDwgaSkgYnJlYWs7XG4gICAgICAgICAgICBzd2FwKGlkcywgaSwgaik7XG4gICAgICAgIH1cbiAgICAgICAgaWRzW2xlZnQgKyAxXSA9IGlkc1tqXTtcbiAgICAgICAgaWRzW2pdID0gdGVtcDtcblxuICAgICAgICBpZiAocmlnaHQgLSBpICsgMSA+PSBqIC0gbGVmdCkge1xuICAgICAgICAgICAgcXVpY2tzb3J0KGlkcywgY29vcmRzLCBpLCByaWdodCwgY3gsIGN5KTtcbiAgICAgICAgICAgIHF1aWNrc29ydChpZHMsIGNvb3JkcywgbGVmdCwgaiAtIDEsIGN4LCBjeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBxdWlja3NvcnQoaWRzLCBjb29yZHMsIGxlZnQsIGogLSAxLCBjeCwgY3kpO1xuICAgICAgICAgICAgcXVpY2tzb3J0KGlkcywgY29vcmRzLCBpLCByaWdodCwgY3gsIGN5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY29tcGFyZShjb29yZHMsIGksIGosIGN4LCBjeSkge1xuICAgIGNvbnN0IGQxID0gZGlzdChjb29yZHNbMiAqIGldLCBjb29yZHNbMiAqIGkgKyAxXSwgY3gsIGN5KTtcbiAgICBjb25zdCBkMiA9IGRpc3QoY29vcmRzWzIgKiBqXSwgY29vcmRzWzIgKiBqICsgMV0sIGN4LCBjeSk7XG4gICAgcmV0dXJuIChkMSAtIGQyKSB8fCAoY29vcmRzWzIgKiBpXSAtIGNvb3Jkc1syICogal0pIHx8IChjb29yZHNbMiAqIGkgKyAxXSAtIGNvb3Jkc1syICogaiArIDFdKTtcbn1cblxuZnVuY3Rpb24gc3dhcChhcnIsIGksIGopIHtcbiAgICBjb25zdCB0bXAgPSBhcnJbaV07XG4gICAgYXJyW2ldID0gYXJyW2pdO1xuICAgIGFycltqXSA9IHRtcDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEdldFgocCkge1xuICAgIHJldHVybiBwWzBdO1xufVxuZnVuY3Rpb24gZGVmYXVsdEdldFkocCkge1xuICAgIHJldHVybiBwWzFdO1xufVxuIiwiY29uc3QgZXBzaWxvbiA9IDFlLTY7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdGgge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3kwID0gLy8gc3RhcnQgb2YgY3VycmVudCBzdWJwYXRoXG4gICAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgICB0aGlzLl8gPSBcIlwiO1xuICB9XG4gIG1vdmVUbyh4LCB5KSB7XG4gICAgdGhpcy5fICs9IGBNJHt0aGlzLl94MCA9IHRoaXMuX3gxID0gK3h9LCR7dGhpcy5feTAgPSB0aGlzLl95MSA9ICt5fWA7XG4gIH1cbiAgY2xvc2VQYXRoKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH1cbiAgbGluZVRvKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gYEwke3RoaXMuX3gxID0gK3h9LCR7dGhpcy5feTEgPSAreX1gO1xuICB9XG4gIGFyYyh4LCB5LCByKSB7XG4gICAgeCA9ICt4LCB5ID0gK3ksIHIgPSArcjtcbiAgICBjb25zdCB4MCA9IHggKyByO1xuICAgIGNvbnN0IHkwID0geTtcbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1c1wiKTtcbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHRoaXMuXyArPSBgTSR7eDB9LCR7eTB9YDtcbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgaWYgKCFyKSByZXR1cm47XG4gICAgdGhpcy5fICs9IGBBJHtyfSwke3J9LDAsMSwxLCR7eCAtIHJ9LCR7eX1BJHtyfSwke3J9LDAsMSwxLCR7dGhpcy5feDEgPSB4MH0sJHt0aGlzLl95MSA9IHkwfWA7XG4gIH1cbiAgcmVjdCh4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IGBNJHt0aGlzLl94MCA9IHRoaXMuX3gxID0gK3h9LCR7dGhpcy5feTAgPSB0aGlzLl95MSA9ICt5fWgkeyt3fXYkeytofWgkey13fVpgO1xuICB9XG4gIHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl8gfHwgbnVsbDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9seWdvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuXyA9IFtdO1xuICB9XG4gIG1vdmVUbyh4LCB5KSB7XG4gICAgdGhpcy5fLnB1c2goW3gsIHldKTtcbiAgfVxuICBjbG9zZVBhdGgoKSB7XG4gICAgdGhpcy5fLnB1c2godGhpcy5fWzBdLnNsaWNlKCkpO1xuICB9XG4gIGxpbmVUbyh4LCB5KSB7XG4gICAgdGhpcy5fLnB1c2goW3gsIHldKTtcbiAgfVxuICB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fLmxlbmd0aCA/IHRoaXMuXyA6IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCBQYXRoIGZyb20gXCIuL3BhdGguanNcIjtcbmltcG9ydCBQb2x5Z29uIGZyb20gXCIuL3BvbHlnb24uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVm9yb25vaSB7XG4gIGNvbnN0cnVjdG9yKGRlbGF1bmF5LCBbeG1pbiwgeW1pbiwgeG1heCwgeW1heF0gPSBbMCwgMCwgOTYwLCA1MDBdKSB7XG4gICAgaWYgKCEoKHhtYXggPSAreG1heCkgPj0gKHhtaW4gPSAreG1pbikpIHx8ICEoKHltYXggPSAreW1heCkgPj0gKHltaW4gPSAreW1pbikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJvdW5kc1wiKTtcbiAgICBjb25zdCB7cG9pbnRzLCBodWxsLCB0cmlhbmdsZXN9ID0gdGhpcy5kZWxhdW5heSA9IGRlbGF1bmF5O1xuICAgIGNvbnN0IGNpcmN1bWNlbnRlcnMgPSB0aGlzLmNpcmN1bWNlbnRlcnMgPSBuZXcgRmxvYXQ2NEFycmF5KHRyaWFuZ2xlcy5sZW5ndGggLyAzICogMik7XG4gICAgY29uc3QgdmVjdG9ycyA9IHRoaXMudmVjdG9ycyA9IG5ldyBGbG9hdDY0QXJyYXkocG9pbnRzLmxlbmd0aCAqIDIpO1xuICAgIHRoaXMueG1heCA9IHhtYXgsIHRoaXMueG1pbiA9IHhtaW47XG4gICAgdGhpcy55bWF4ID0geW1heCwgdGhpcy55bWluID0geW1pbjtcblxuICAgIC8vIENvbXB1dGUgY2lyY3VtY2VudGVycy5cbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDAsIG4gPSB0cmlhbmdsZXMubGVuZ3RoOyBpIDwgbjsgaSArPSAzLCBqICs9IDIpIHtcbiAgICAgIGNvbnN0IHQxID0gdHJpYW5nbGVzW2ldICogMjtcbiAgICAgIGNvbnN0IHQyID0gdHJpYW5nbGVzW2kgKyAxXSAqIDI7XG4gICAgICBjb25zdCB0MyA9IHRyaWFuZ2xlc1tpICsgMl0gKiAyO1xuICAgICAgY29uc3QgeDEgPSBwb2ludHNbdDFdO1xuICAgICAgY29uc3QgeTEgPSBwb2ludHNbdDEgKyAxXTtcbiAgICAgIGNvbnN0IHgyID0gcG9pbnRzW3QyXTtcbiAgICAgIGNvbnN0IHkyID0gcG9pbnRzW3QyICsgMV07XG4gICAgICBjb25zdCB4MyA9IHBvaW50c1t0M107XG4gICAgICBjb25zdCB5MyA9IHBvaW50c1t0MyArIDFdO1xuICAgICAgY29uc3QgYTIgPSB4MSAtIHgyO1xuICAgICAgY29uc3QgYTMgPSB4MSAtIHgzO1xuICAgICAgY29uc3QgYjIgPSB5MSAtIHkyO1xuICAgICAgY29uc3QgYjMgPSB5MSAtIHkzO1xuICAgICAgY29uc3QgZDEgPSB4MSAqIHgxICsgeTEgKiB5MTtcbiAgICAgIGNvbnN0IGQyID0gZDEgLSB4MiAqIHgyIC0geTIgKiB5MjtcbiAgICAgIGNvbnN0IGQzID0gZDEgLSB4MyAqIHgzIC0geTMgKiB5MztcbiAgICAgIGNvbnN0IGFiID0gKGEzICogYjIgLSBhMiAqIGIzKSAqIDI7XG4gICAgICBjaXJjdW1jZW50ZXJzW2pdID0gKGIyICogZDMgLSBiMyAqIGQyKSAvIGFiO1xuICAgICAgY2lyY3VtY2VudGVyc1tqICsgMV0gPSAoYTMgKiBkMiAtIGEyICogZDMpIC8gYWI7XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZSBleHRlcmlvciBjZWxsIHJheXMuXG4gICAgbGV0IG5vZGUgPSBodWxsO1xuICAgIGxldCBwMCwgcDEgPSBub2RlLmkgKiA0O1xuICAgIGxldCB4MCwgeDEgPSBub2RlLng7XG4gICAgbGV0IHkwLCB5MSA9IG5vZGUueTtcbiAgICBkbyB7XG4gICAgICBub2RlID0gbm9kZS5uZXh0LCBwMCA9IHAxLCB4MCA9IHgxLCB5MCA9IHkxLCBwMSA9IG5vZGUuaSAqIDQsIHgxID0gbm9kZS54LCB5MSA9IG5vZGUueTtcbiAgICAgIHZlY3RvcnNbcDAgKyAyXSA9IHZlY3RvcnNbcDFdID0geTAgLSB5MTtcbiAgICAgIHZlY3RvcnNbcDAgKyAzXSA9IHZlY3RvcnNbcDEgKyAxXSA9IHgxIC0geDA7XG4gICAgfSB3aGlsZSAobm9kZSAhPT0gaHVsbCk7XG4gIH1cbiAgcmVuZGVyKGNvbnRleHQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBjb250ZXh0ID09IG51bGwgPyBjb250ZXh0ID0gbmV3IFBhdGggOiB1bmRlZmluZWQ7XG4gICAgY29uc3Qge2RlbGF1bmF5OiB7aGFsZmVkZ2VzLCBodWxsfSwgY2lyY3VtY2VudGVycywgdmVjdG9yc30gPSB0aGlzO1xuICAgIGZvciAobGV0IGkgPSAwLCBuID0gaGFsZmVkZ2VzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgY29uc3QgaiA9IGhhbGZlZGdlc1tpXTtcbiAgICAgIGlmIChqIDwgaSkgY29udGludWU7XG4gICAgICBjb25zdCB0aSA9IE1hdGguZmxvb3IoaSAvIDMpICogMjtcbiAgICAgIGNvbnN0IHRqID0gTWF0aC5mbG9vcihqIC8gMykgKiAyO1xuICAgICAgY29uc3QgeGkgPSBjaXJjdW1jZW50ZXJzW3RpXTtcbiAgICAgIGNvbnN0IHlpID0gY2lyY3VtY2VudGVyc1t0aSArIDFdO1xuICAgICAgY29uc3QgeGogPSBjaXJjdW1jZW50ZXJzW3RqXTtcbiAgICAgIGNvbnN0IHlqID0gY2lyY3VtY2VudGVyc1t0aiArIDFdO1xuICAgICAgdGhpcy5fcmVuZGVyU2VnbWVudCh4aSwgeWksIHhqLCB5aiwgY29udGV4dCk7XG4gICAgfVxuICAgIGxldCBub2RlID0gaHVsbDtcbiAgICBkbyB7XG4gICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgY29uc3QgdCA9IE1hdGguZmxvb3Iobm9kZS50IC8gMykgKiAyO1xuICAgICAgY29uc3QgeCA9IGNpcmN1bWNlbnRlcnNbdF07XG4gICAgICBjb25zdCB5ID0gY2lyY3VtY2VudGVyc1t0ICsgMV07XG4gICAgICBjb25zdCB2ID0gbm9kZS5pICogNDtcbiAgICAgIGNvbnN0IHAgPSB0aGlzLl9wcm9qZWN0KHgsIHksIHZlY3RvcnNbdiArIDJdLCB2ZWN0b3JzW3YgKyAzXSk7XG4gICAgICBpZiAocCkgdGhpcy5fcmVuZGVyU2VnbWVudCh4LCB5LCBwWzBdLCBwWzFdLCBjb250ZXh0KTtcbiAgICB9IHdoaWxlIChub2RlICE9PSBodWxsKTtcbiAgICByZXR1cm4gYnVmZmVyICYmIGJ1ZmZlci52YWx1ZSgpO1xuICB9XG4gIHJlbmRlckJvdW5kcyhjb250ZXh0KSB7XG4gICAgY29uc3QgYnVmZmVyID0gY29udGV4dCA9PSBudWxsID8gY29udGV4dCA9IG5ldyBQYXRoIDogdW5kZWZpbmVkO1xuICAgIGNvbnRleHQucmVjdCh0aGlzLnhtaW4sIHRoaXMueW1pbiwgdGhpcy54bWF4IC0gdGhpcy54bWluLCB0aGlzLnltYXggLSB0aGlzLnltaW4pO1xuICAgIHJldHVybiBidWZmZXIgJiYgYnVmZmVyLnZhbHVlKCk7XG4gIH1cbiAgcmVuZGVyQ2VsbChpLCBjb250ZXh0KSB7XG4gICAgY29uc3QgYnVmZmVyID0gY29udGV4dCA9PSBudWxsID8gY29udGV4dCA9IG5ldyBQYXRoIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMuX2NsaXAoaSk7XG4gICAgaWYgKHBvaW50cyA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXSwgcG9pbnRzWzFdKTtcbiAgICBmb3IgKGxldCBpID0gMiwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyBpICs9IDIpIHtcbiAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1tpXSwgcG9pbnRzW2kgKyAxXSk7XG4gICAgfVxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgcmV0dXJuIGJ1ZmZlciAmJiBidWZmZXIudmFsdWUoKTtcbiAgfVxuICAqY2VsbFBvbHlnb25zKCkge1xuICAgIGNvbnN0IHtkZWxhdW5heToge3BvaW50c319ID0gdGhpcztcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGggLyAyOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb25zdCBjZWxsID0gdGhpcy5jZWxsUG9seWdvbihpKTtcbiAgICAgIGlmIChjZWxsKSB5aWVsZCBjZWxsO1xuICAgIH1cbiAgfVxuICBjZWxsUG9seWdvbihpKSB7XG4gICAgY29uc3QgcG9seWdvbiA9IG5ldyBQb2x5Z29uO1xuICAgIHRoaXMucmVuZGVyQ2VsbChpLCBwb2x5Z29uKTtcbiAgICByZXR1cm4gcG9seWdvbi52YWx1ZSgpO1xuICB9XG4gIF9yZW5kZXJTZWdtZW50KHgwLCB5MCwgeDEsIHkxLCBjb250ZXh0KSB7XG4gICAgbGV0IFM7XG4gICAgY29uc3QgYzAgPSB0aGlzLl9yZWdpb25jb2RlKHgwLCB5MCk7XG4gICAgY29uc3QgYzEgPSB0aGlzLl9yZWdpb25jb2RlKHgxLCB5MSk7XG4gICAgaWYgKGMwID09PSAwICYmIGMxID09PSAwKSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICB9IGVsc2UgaWYgKFMgPSB0aGlzLl9jbGlwU2VnbWVudCh4MCwgeTAsIHgxLCB5MSwgYzAsIGMxKSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oU1swXSwgU1sxXSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhTWzJdLCBTWzNdKTtcbiAgICB9XG4gIH1cbiAgY29udGFpbnMoaSwgeCwgeSkge1xuICAgIGlmICgoeCA9ICt4LCB4ICE9PSB4KSB8fCAoeSA9ICt5LCB5ICE9PSB5KSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmRlbGF1bmF5Ll9zdGVwKGksIHgsIHkpID09PSBpO1xuICB9XG4gIF9jZWxsKGkpIHtcbiAgICBjb25zdCB7Y2lyY3VtY2VudGVycywgZGVsYXVuYXk6IHtpbmVkZ2VzLCBoYWxmZWRnZXMsIHRyaWFuZ2xlc319ID0gdGhpcztcbiAgICBjb25zdCBlMCA9IGluZWRnZXNbaV07XG4gICAgaWYgKGUwID09PSAtMSkgcmV0dXJuIG51bGw7IC8vIGNvaW5jaWRlbnQgcG9pbnRcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBsZXQgZSA9IGUwO1xuICAgIGRvIHtcbiAgICAgIGNvbnN0IHQgPSBNYXRoLmZsb29yKGUgLyAzKTtcbiAgICAgIHBvaW50cy5wdXNoKGNpcmN1bWNlbnRlcnNbdCAqIDJdLCBjaXJjdW1jZW50ZXJzW3QgKiAyICsgMV0pO1xuICAgICAgZSA9IGUgJSAzID09PSAyID8gZSAtIDIgOiBlICsgMTtcbiAgICAgIGlmICh0cmlhbmdsZXNbZV0gIT09IGkpIGJyZWFrOyAvLyBiYWQgdHJpYW5ndWxhdGlvblxuICAgICAgZSA9IGhhbGZlZGdlc1tlXTtcbiAgICB9IHdoaWxlIChlICE9PSBlMCAmJiBlICE9PSAtMSk7XG4gICAgcmV0dXJuIHBvaW50cztcbiAgfVxuICBfY2xpcChpKSB7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2VsbChpKTtcbiAgICBpZiAocG9pbnRzID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCB7dmVjdG9yczogVn0gPSB0aGlzO1xuICAgIGNvbnN0IHYgPSBpICogNDtcbiAgICByZXR1cm4gVlt2XSB8fCBWW3YgKyAxXVxuICAgICAgICA/IHRoaXMuX2NsaXBJbmZpbml0ZShpLCBwb2ludHMsIFZbdl0sIFZbdiArIDFdLCBWW3YgKyAyXSwgVlt2ICsgM10pXG4gICAgICAgIDogdGhpcy5fY2xpcEZpbml0ZShpLCBwb2ludHMpO1xuICB9XG4gIF9jbGlwRmluaXRlKGksIHBvaW50cykge1xuICAgIGNvbnN0IG4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBQID0gbnVsbDtcbiAgICBsZXQgeDAsIHkwLCB4MSA9IHBvaW50c1tuIC0gMl0sIHkxID0gcG9pbnRzW24gLSAxXTtcbiAgICBsZXQgYzAsIGMxID0gdGhpcy5fcmVnaW9uY29kZSh4MSwgeTEpO1xuICAgIGxldCBlMCwgZTE7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyBqICs9IDIpIHtcbiAgICAgIHgwID0geDEsIHkwID0geTEsIHgxID0gcG9pbnRzW2pdLCB5MSA9IHBvaW50c1tqICsgMV07XG4gICAgICBjMCA9IGMxLCBjMSA9IHRoaXMuX3JlZ2lvbmNvZGUoeDEsIHkxKTtcbiAgICAgIGlmIChjMCA9PT0gMCAmJiBjMSA9PT0gMCkge1xuICAgICAgICBlMCA9IGUxLCBlMSA9IDA7XG4gICAgICAgIGlmIChQKSBQLnB1c2goeDEsIHkxKTtcbiAgICAgICAgZWxzZSBQID0gW3gxLCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgUywgc3gwLCBzeTAsIHN4MSwgc3kxO1xuICAgICAgICBpZiAoYzAgPT09IDApIHtcbiAgICAgICAgICBpZiAoKFMgPSB0aGlzLl9jbGlwU2VnbWVudCh4MCwgeTAsIHgxLCB5MSwgYzAsIGMxKSkgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgIFtzeDAsIHN5MCwgc3gxLCBzeTFdID0gUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoKFMgPSB0aGlzLl9jbGlwU2VnbWVudCh4MSwgeTEsIHgwLCB5MCwgYzEsIGMwKSkgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgIFtzeDEsIHN5MSwgc3gwLCBzeTBdID0gUztcbiAgICAgICAgICBlMCA9IGUxLCBlMSA9IHRoaXMuX2VkZ2Vjb2RlKHN4MCwgc3kwKTtcbiAgICAgICAgICBpZiAoZTAgJiYgZTEpIHRoaXMuX2VkZ2UoaSwgZTAsIGUxLCBQLCBQLmxlbmd0aCk7XG4gICAgICAgICAgaWYgKFApIFAucHVzaChzeDAsIHN5MCk7XG4gICAgICAgICAgZWxzZSBQID0gW3N4MCwgc3kwXTtcbiAgICAgICAgfVxuICAgICAgICBlMCA9IGUxLCBlMSA9IHRoaXMuX2VkZ2Vjb2RlKHN4MSwgc3kxKTtcbiAgICAgICAgaWYgKGUwICYmIGUxKSB0aGlzLl9lZGdlKGksIGUwLCBlMSwgUCwgUC5sZW5ndGgpO1xuICAgICAgICBpZiAoUCkgUC5wdXNoKHN4MSwgc3kxKTtcbiAgICAgICAgZWxzZSBQID0gW3N4MSwgc3kxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKFApIHtcbiAgICAgIGUwID0gZTEsIGUxID0gdGhpcy5fZWRnZWNvZGUoUFswXSwgUFsxXSk7XG4gICAgICBpZiAoZTAgJiYgZTEpIHRoaXMuX2VkZ2UoaSwgZTAsIGUxLCBQLCBQLmxlbmd0aCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbnRhaW5zKGksICh0aGlzLnhtaW4gKyB0aGlzLnhtYXgpIC8gMiwgKHRoaXMueW1pbiArIHRoaXMueW1heCkgLyAyKSkge1xuICAgICAgcmV0dXJuIFt0aGlzLnhtYXgsIHRoaXMueW1pbiwgdGhpcy54bWF4LCB0aGlzLnltYXgsIHRoaXMueG1pbiwgdGhpcy55bWF4LCB0aGlzLnhtaW4sIHRoaXMueW1pbl07XG4gICAgfVxuICAgIHJldHVybiBQO1xuICB9XG4gIF9jbGlwU2VnbWVudCh4MCwgeTAsIHgxLCB5MSwgYzAsIGMxKSB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChjMCA9PT0gMCAmJiBjMSA9PT0gMCkgcmV0dXJuIFt4MCwgeTAsIHgxLCB5MV07XG4gICAgICBpZiAoYzAgJiBjMSkgcmV0dXJuIG51bGw7XG4gICAgICBsZXQgeCwgeSwgYyA9IGMwIHx8IGMxO1xuICAgICAgaWYgKGMgJiAwYjEwMDApIHggPSB4MCArICh4MSAtIHgwKSAqICh0aGlzLnltYXggLSB5MCkgLyAoeTEgLSB5MCksIHkgPSB0aGlzLnltYXg7XG4gICAgICBlbHNlIGlmIChjICYgMGIwMTAwKSB4ID0geDAgKyAoeDEgLSB4MCkgKiAodGhpcy55bWluIC0geTApIC8gKHkxIC0geTApLCB5ID0gdGhpcy55bWluO1xuICAgICAgZWxzZSBpZiAoYyAmIDBiMDAxMCkgeSA9IHkwICsgKHkxIC0geTApICogKHRoaXMueG1heCAtIHgwKSAvICh4MSAtIHgwKSwgeCA9IHRoaXMueG1heDtcbiAgICAgIGVsc2UgeSA9IHkwICsgKHkxIC0geTApICogKHRoaXMueG1pbiAtIHgwKSAvICh4MSAtIHgwKSwgeCA9IHRoaXMueG1pbjtcbiAgICAgIGlmIChjMCkgeDAgPSB4LCB5MCA9IHksIGMwID0gdGhpcy5fcmVnaW9uY29kZSh4MCwgeTApO1xuICAgICAgZWxzZSB4MSA9IHgsIHkxID0geSwgYzEgPSB0aGlzLl9yZWdpb25jb2RlKHgxLCB5MSk7XG4gICAgfVxuICB9XG4gIF9jbGlwSW5maW5pdGUoaSwgcG9pbnRzLCB2eDAsIHZ5MCwgdnhuLCB2eW4pIHtcbiAgICBsZXQgUCA9IEFycmF5LmZyb20ocG9pbnRzKSwgcDtcbiAgICBpZiAocCA9IHRoaXMuX3Byb2plY3QoUFswXSwgUFsxXSwgdngwLCB2eTApKSBQLnVuc2hpZnQocFswXSwgcFsxXSk7XG4gICAgaWYgKHAgPSB0aGlzLl9wcm9qZWN0KFBbUC5sZW5ndGggLSAyXSwgUFtQLmxlbmd0aCAtIDFdLCB2eG4sIHZ5bikpIFAucHVzaChwWzBdLCBwWzFdKTtcbiAgICBpZiAoUCA9IHRoaXMuX2NsaXBGaW5pdGUoaSwgUCkpIHtcbiAgICAgIGZvciAobGV0IGogPSAwLCBuID0gUC5sZW5ndGgsIGMwLCBjMSA9IHRoaXMuX2VkZ2Vjb2RlKFBbbiAtIDJdLCBQW24gLSAxXSk7IGogPCBuOyBqICs9IDIpIHtcbiAgICAgICAgYzAgPSBjMSwgYzEgPSB0aGlzLl9lZGdlY29kZShQW2pdLCBQW2ogKyAxXSk7XG4gICAgICAgIGlmIChjMCAmJiBjMSkgaiA9IHRoaXMuX2VkZ2UoaSwgYzAsIGMxLCBQLCBqKSwgbiA9IFAubGVuZ3RoO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5jb250YWlucyhpLCAodGhpcy54bWluICsgdGhpcy54bWF4KSAvIDIsICh0aGlzLnltaW4gKyB0aGlzLnltYXgpIC8gMikpIHtcbiAgICAgIFAgPSBbdGhpcy54bWluLCB0aGlzLnltaW4sIHRoaXMueG1heCwgdGhpcy55bWluLCB0aGlzLnhtYXgsIHRoaXMueW1heCwgdGhpcy54bWluLCB0aGlzLnltYXhdO1xuICAgIH1cbiAgICByZXR1cm4gUDtcbiAgfVxuICBfZWRnZShpLCBlMCwgZTEsIFAsIGopIHtcbiAgICB3aGlsZSAoZTAgIT09IGUxKSB7XG4gICAgICBsZXQgeCwgeTtcbiAgICAgIHN3aXRjaCAoZTApIHtcbiAgICAgICAgY2FzZSAwYjAxMDE6IGUwID0gMGIwMTAwOyBjb250aW51ZTsgLy8gdG9wLWxlZnRcbiAgICAgICAgY2FzZSAwYjAxMDA6IGUwID0gMGIwMTEwLCB4ID0gdGhpcy54bWF4LCB5ID0gdGhpcy55bWluOyBicmVhazsgLy8gdG9wXG4gICAgICAgIGNhc2UgMGIwMTEwOiBlMCA9IDBiMDAxMDsgY29udGludWU7IC8vIHRvcC1yaWdodFxuICAgICAgICBjYXNlIDBiMDAxMDogZTAgPSAwYjEwMTAsIHggPSB0aGlzLnhtYXgsIHkgPSB0aGlzLnltYXg7IGJyZWFrOyAvLyByaWdodFxuICAgICAgICBjYXNlIDBiMTAxMDogZTAgPSAwYjEwMDA7IGNvbnRpbnVlOyAvLyBib3R0b20tcmlnaHRcbiAgICAgICAgY2FzZSAwYjEwMDA6IGUwID0gMGIxMDAxLCB4ID0gdGhpcy54bWluLCB5ID0gdGhpcy55bWF4OyBicmVhazsgLy8gYm90dG9tXG4gICAgICAgIGNhc2UgMGIxMDAxOiBlMCA9IDBiMDAwMTsgY29udGludWU7IC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgIGNhc2UgMGIwMDAxOiBlMCA9IDBiMDEwMSwgeCA9IHRoaXMueG1pbiwgeSA9IHRoaXMueW1pbjsgYnJlYWs7IC8vIGxlZnRcbiAgICAgIH1cbiAgICAgIGlmICgoUFtqXSAhPT0geCB8fCBQW2ogKyAxXSAhPT0geSkgJiYgdGhpcy5jb250YWlucyhpLCB4LCB5KSkge1xuICAgICAgICBQLnNwbGljZShqLCAwLCB4LCB5KSwgaiArPSAyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gajtcbiAgfVxuICBfcHJvamVjdCh4MCwgeTAsIHZ4LCB2eSkge1xuICAgIGxldCB0ID0gSW5maW5pdHksIGMsIHgsIHk7XG4gICAgaWYgKHZ5IDwgMCkgeyAvLyB0b3BcbiAgICAgIGlmICh5MCA8PSB0aGlzLnltaW4pIHJldHVybiBudWxsO1xuICAgICAgaWYgKChjID0gKHRoaXMueW1pbiAtIHkwKSAvIHZ5KSA8IHQpIHkgPSB0aGlzLnltaW4sIHggPSB4MCArICh0ID0gYykgKiB2eDtcbiAgICB9IGVsc2UgaWYgKHZ5ID4gMCkgeyAvLyBib3R0b21cbiAgICAgIGlmICh5MCA+PSB0aGlzLnltYXgpIHJldHVybiBudWxsO1xuICAgICAgaWYgKChjID0gKHRoaXMueW1heCAtIHkwKSAvIHZ5KSA8IHQpIHkgPSB0aGlzLnltYXgsIHggPSB4MCArICh0ID0gYykgKiB2eDtcbiAgICB9XG4gICAgaWYgKHZ4ID4gMCkgeyAvLyByaWdodFxuICAgICAgaWYgKHgwID49IHRoaXMueG1heCkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoKGMgPSAodGhpcy54bWF4IC0geDApIC8gdngpIDwgdCkgeCA9IHRoaXMueG1heCwgeSA9IHkwICsgKHQgPSBjKSAqIHZ5O1xuICAgIH0gZWxzZSBpZiAodnggPCAwKSB7IC8vIGxlZnRcbiAgICAgIGlmICh4MCA8PSB0aGlzLnhtaW4pIHJldHVybiBudWxsO1xuICAgICAgaWYgKChjID0gKHRoaXMueG1pbiAtIHgwKSAvIHZ4KSA8IHQpIHggPSB0aGlzLnhtaW4sIHkgPSB5MCArICh0ID0gYykgKiB2eTtcbiAgICB9XG4gICAgcmV0dXJuIFt4LCB5XTtcbiAgfVxuICBfZWRnZWNvZGUoeCwgeSkge1xuICAgIHJldHVybiAoeCA9PT0gdGhpcy54bWluID8gMGIwMDAxXG4gICAgICAgIDogeCA9PT0gdGhpcy54bWF4ID8gMGIwMDEwIDogMGIwMDAwKVxuICAgICAgICB8ICh5ID09PSB0aGlzLnltaW4gPyAwYjAxMDBcbiAgICAgICAgOiB5ID09PSB0aGlzLnltYXggPyAwYjEwMDAgOiAwYjAwMDApO1xuICB9XG4gIF9yZWdpb25jb2RlKHgsIHkpIHtcbiAgICByZXR1cm4gKHggPCB0aGlzLnhtaW4gPyAwYjAwMDFcbiAgICAgICAgOiB4ID4gdGhpcy54bWF4ID8gMGIwMDEwIDogMGIwMDAwKVxuICAgICAgICB8ICh5IDwgdGhpcy55bWluID8gMGIwMTAwXG4gICAgICAgIDogeSA+IHRoaXMueW1heCA/IDBiMTAwMCA6IDBiMDAwMCk7XG4gIH1cbn1cbiIsImltcG9ydCBEZWxhdW5hdG9yIGZyb20gXCJkZWxhdW5hdG9yXCI7XG5pbXBvcnQgUGF0aCBmcm9tIFwiLi9wYXRoLmpzXCI7XG5pbXBvcnQgUG9seWdvbiBmcm9tIFwiLi9wb2x5Z29uLmpzXCI7XG5pbXBvcnQgVm9yb25vaSBmcm9tIFwiLi92b3Jvbm9pLmpzXCI7XG5cbmNvbnN0IHRhdSA9IDIgKiBNYXRoLlBJO1xuXG5mdW5jdGlvbiBwb2ludFgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZnVuY3Rpb24gcG9pbnRZKHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbGF1bmF5IHtcbiAgY29uc3RydWN0b3IocG9pbnRzKSB7XG4gICAgY29uc3Qge2hhbGZlZGdlcywgaHVsbCwgdHJpYW5nbGVzfSA9IG5ldyBEZWxhdW5hdG9yKHBvaW50cyk7XG4gICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gICAgdGhpcy5oYWxmZWRnZXMgPSBoYWxmZWRnZXM7XG4gICAgdGhpcy5odWxsID0gaHVsbDtcbiAgICB0aGlzLnRyaWFuZ2xlcyA9IHRyaWFuZ2xlcztcbiAgICBjb25zdCBpbmVkZ2VzID0gdGhpcy5pbmVkZ2VzID0gbmV3IEludDMyQXJyYXkocG9pbnRzLmxlbmd0aCAvIDIpLmZpbGwoLTEpO1xuICAgIGNvbnN0IG91dGVkZ2VzID0gdGhpcy5vdXRlZGdlcyA9IG5ldyBJbnQzMkFycmF5KHBvaW50cy5sZW5ndGggLyAyKS5maWxsKC0xKTtcblxuICAgIC8vIENvbXB1dGUgYW4gaW5kZXggZnJvbSBlYWNoIHBvaW50IHRvIGFuIChhcmJpdHJhcnkpIGluY29taW5nIGhhbGZlZGdlLlxuICAgIGZvciAobGV0IGUgPSAwLCBuID0gaGFsZmVkZ2VzLmxlbmd0aDsgZSA8IG47ICsrZSkge1xuICAgICAgaW5lZGdlc1t0cmlhbmdsZXNbZSAlIDMgPT09IDIgPyBlIC0gMiA6IGUgKyAxXV0gPSBlO1xuICAgIH1cblxuICAgIC8vIEZvciBwb2ludHMgb24gdGhlIGh1bGwsIGluZGV4IGJvdGggdGhlIGluY29taW5nIGFuZCBvdXRnb2luZyBoYWxmZWRnZXMuXG4gICAgbGV0IG5vZGUwLCBub2RlMSA9IGh1bGw7XG4gICAgZG8ge1xuICAgICAgbm9kZTAgPSBub2RlMSwgbm9kZTEgPSBub2RlMS5uZXh0O1xuICAgICAgaW5lZGdlc1tub2RlMS5pXSA9IG5vZGUwLnQ7XG4gICAgICBvdXRlZGdlc1tub2RlMC5pXSA9IG5vZGUxLnQ7XG4gICAgfSB3aGlsZSAobm9kZTEgIT09IGh1bGwpO1xuICB9XG4gIHZvcm9ub2koYm91bmRzKSB7XG4gICAgcmV0dXJuIG5ldyBWb3Jvbm9pKHRoaXMsIGJvdW5kcyk7XG4gIH1cbiAgKm5laWdoYm9ycyhpKSB7XG4gICAgY29uc3Qge2luZWRnZXMsIG91dGVkZ2VzLCBoYWxmZWRnZXMsIHRyaWFuZ2xlc30gPSB0aGlzO1xuICAgIGNvbnN0IGUwID0gaW5lZGdlc1tpXTtcbiAgICBpZiAoZTAgPT09IC0xKSByZXR1cm47IC8vIGNvaW5jaWRlbnQgcG9pbnRcbiAgICBsZXQgZSA9IGUwO1xuICAgIGRvIHtcbiAgICAgIHlpZWxkIHRyaWFuZ2xlc1tlXTtcbiAgICAgIGUgPSBlICUgMyA9PT0gMiA/IGUgLSAyIDogZSArIDE7XG4gICAgICBpZiAodHJpYW5nbGVzW2VdICE9PSBpKSByZXR1cm47IC8vIGJhZCB0cmlhbmd1bGF0aW9uXG4gICAgICBlID0gaGFsZmVkZ2VzW2VdO1xuICAgICAgaWYgKGUgPT09IC0xKSByZXR1cm4geWllbGQgdHJpYW5nbGVzW291dGVkZ2VzW2ldXTtcbiAgICB9IHdoaWxlIChlICE9PSBlMCk7XG4gIH1cbiAgZmluZCh4LCB5LCBpID0gMCkge1xuICAgIGlmICgoeCA9ICt4LCB4ICE9PSB4KSB8fCAoeSA9ICt5LCB5ICE9PSB5KSkgcmV0dXJuIC0xO1xuICAgIGxldCBjO1xuICAgIHdoaWxlICgoYyA9IHRoaXMuX3N0ZXAoaSwgeCwgeSkpID49IDAgJiYgYyAhPT0gaSkgaSA9IGM7XG4gICAgcmV0dXJuIGM7XG4gIH1cbiAgX3N0ZXAoaSwgeCwgeSkge1xuICAgIGNvbnN0IHtpbmVkZ2VzLCBwb2ludHN9ID0gdGhpcztcbiAgICBpZiAoaW5lZGdlc1tpXSA9PT0gLTEpIHJldHVybiAtMTsgLy8gY29pbmNpZGVudCBwb2ludFxuICAgIGxldCBjID0gaTtcbiAgICBsZXQgZGMgPSAoeCAtIHBvaW50c1tpICogMl0pICoqIDIgKyAoeSAtIHBvaW50c1tpICogMiArIDFdKSAqKiAyO1xuICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLm5laWdoYm9ycyhpKSkge1xuICAgICAgY29uc3QgZHQgPSAoeCAtIHBvaW50c1t0ICogMl0pICoqIDIgKyAoeSAtIHBvaW50c1t0ICogMiArIDFdKSAqKiAyO1xuICAgICAgaWYgKGR0IDwgZGMpIGRjID0gZHQsIGMgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gYztcbiAgfVxuICByZW5kZXIoY29udGV4dCkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGNvbnRleHQgPT0gbnVsbCA/IGNvbnRleHQgPSBuZXcgUGF0aCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCB7cG9pbnRzLCBoYWxmZWRnZXMsIHRyaWFuZ2xlc30gPSB0aGlzO1xuICAgIGZvciAobGV0IGkgPSAwLCBuID0gaGFsZmVkZ2VzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgY29uc3QgaiA9IGhhbGZlZGdlc1tpXTtcbiAgICAgIGlmIChqIDwgaSkgY29udGludWU7XG4gICAgICBjb25zdCB0aSA9IHRyaWFuZ2xlc1tpXSAqIDI7XG4gICAgICBjb25zdCB0aiA9IHRyaWFuZ2xlc1tqXSAqIDI7XG4gICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbdGldLCBwb2ludHNbdGkgKyAxXSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbdGpdLCBwb2ludHNbdGogKyAxXSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVySHVsbChjb250ZXh0KTtcbiAgICByZXR1cm4gYnVmZmVyICYmIGJ1ZmZlci52YWx1ZSgpO1xuICB9XG4gIHJlbmRlclBvaW50cyhjb250ZXh0LCByID0gMikge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGNvbnRleHQgPT0gbnVsbCA/IGNvbnRleHQgPSBuZXcgUGF0aCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCB7cG9pbnRzfSA9IHRoaXM7XG4gICAgZm9yIChsZXQgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgaSArPSAyKSB7XG4gICAgICBjb25zdCB4ID0gcG9pbnRzW2ldLCB5ID0gcG9pbnRzW2kgKyAxXTtcbiAgICAgIGNvbnRleHQubW92ZVRvKHggKyByLCB5KTtcbiAgICAgIGNvbnRleHQuYXJjKHgsIHksIHIsIDAsIHRhdSk7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXIgJiYgYnVmZmVyLnZhbHVlKCk7XG4gIH1cbiAgcmVuZGVySHVsbChjb250ZXh0KSB7XG4gICAgY29uc3QgYnVmZmVyID0gY29udGV4dCA9PSBudWxsID8gY29udGV4dCA9IG5ldyBQYXRoIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHtodWxsfSA9IHRoaXM7XG4gICAgbGV0IG5vZGUgPSBodWxsO1xuICAgIGNvbnRleHQubW92ZVRvKG5vZGUueCwgbm9kZS55KTtcbiAgICB3aGlsZSAobm9kZSA9IG5vZGUubmV4dCwgbm9kZSAhPT0gaHVsbCkgY29udGV4dC5saW5lVG8obm9kZS54LCBub2RlLnkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgcmV0dXJuIGJ1ZmZlciAmJiBidWZmZXIudmFsdWUoKTtcbiAgfVxuICBodWxsUG9seWdvbigpIHtcbiAgICBjb25zdCBwb2x5Z29uID0gbmV3IFBvbHlnb247XG4gICAgdGhpcy5yZW5kZXJIdWxsKHBvbHlnb24pO1xuICAgIHJldHVybiBwb2x5Z29uLnZhbHVlKCk7XG4gIH1cbiAgcmVuZGVyVHJpYW5nbGUoaSwgY29udGV4dCkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGNvbnRleHQgPT0gbnVsbCA/IGNvbnRleHQgPSBuZXcgUGF0aCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCB7cG9pbnRzLCB0cmlhbmdsZXN9ID0gdGhpcztcbiAgICBjb25zdCB0MCA9IHRyaWFuZ2xlc1tpICo9IDNdICogMjtcbiAgICBjb25zdCB0MSA9IHRyaWFuZ2xlc1tpICsgMV0gKiAyO1xuICAgIGNvbnN0IHQyID0gdHJpYW5nbGVzW2kgKyAyXSAqIDI7XG4gICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzW3QwXSwgcG9pbnRzW3QwICsgMV0pO1xuICAgIGNvbnRleHQubGluZVRvKHBvaW50c1t0MV0sIHBvaW50c1t0MSArIDFdKTtcbiAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbdDJdLCBwb2ludHNbdDIgKyAxXSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICByZXR1cm4gYnVmZmVyICYmIGJ1ZmZlci52YWx1ZSgpO1xuICB9XG4gICp0cmlhbmdsZVBvbHlnb25zKCkge1xuICAgIGNvbnN0IHt0cmlhbmdsZXN9ID0gdGhpcztcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IHRyaWFuZ2xlcy5sZW5ndGggLyAzOyBpIDwgbjsgKytpKSB7XG4gICAgICB5aWVsZCB0aGlzLnRyaWFuZ2xlUG9seWdvbihpKTtcbiAgICB9XG4gIH1cbiAgdHJpYW5nbGVQb2x5Z29uKGkpIHtcbiAgICBjb25zdCBwb2x5Z29uID0gbmV3IFBvbHlnb247XG4gICAgdGhpcy5yZW5kZXJUcmlhbmdsZShpLCBwb2x5Z29uKTtcbiAgICByZXR1cm4gcG9seWdvbi52YWx1ZSgpO1xuICB9XG59XG5cbkRlbGF1bmF5LmZyb20gPSBmdW5jdGlvbihwb2ludHMsIGZ4ID0gcG9pbnRYLCBmeSA9IHBvaW50WSwgdGhhdCkge1xuICByZXR1cm4gbmV3IERlbGF1bmF5KFwibGVuZ3RoXCIgaW4gcG9pbnRzXG4gICAgICA/IGZsYXRBcnJheShwb2ludHMsIGZ4LCBmeSwgdGhhdClcbiAgICAgIDogRmxvYXQ2NEFycmF5LmZyb20oZmxhdEl0ZXJhYmxlKHBvaW50cywgZngsIGZ5LCB0aGF0KSkpO1xufTtcblxuZnVuY3Rpb24gZmxhdEFycmF5KHBvaW50cywgZngsIGZ5LCB0aGF0KSB7XG4gIGNvbnN0IG4gPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCBhcnJheSA9IG5ldyBGbG9hdDY0QXJyYXkobiAqIDIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGNvbnN0IHAgPSBwb2ludHNbaV07XG4gICAgYXJyYXlbaSAqIDJdID0gZnguY2FsbCh0aGF0LCBwLCBpLCBwb2ludHMpO1xuICAgIGFycmF5W2kgKiAyICsgMV0gPSBmeS5jYWxsKHRoYXQsIHAsIGksIHBvaW50cyk7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiogZmxhdEl0ZXJhYmxlKHBvaW50cywgZngsIGZ5LCB0aGF0KSB7XG4gIGxldCBpID0gMDtcbiAgZm9yIChjb25zdCBwIG9mIHBvaW50cykge1xuICAgIHlpZWxkIGZ4LmNhbGwodGhhdCwgcCwgaSwgcG9pbnRzKTtcbiAgICB5aWVsZCBmeS5jYWxsKHRoYXQsIHAsIGksIHBvaW50cyk7XG4gICAgKytpO1xuICB9XG59XG4iLCJpbXBvcnQge2lzQTJETGluZX0gZnJvbSBcIi4vbGluZVwiO1xuaW1wb3J0IHtEZWxhdW5heX0gZnJvbSBcImQzLWRlbGF1bmF5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxhdW5heUZyb21Qb2ludHMoc2l0ZXMpIHtcbiAgICBsZXQgZGVsYXVuYXkgPSB7fTtcblxuICAgIC8vQnV0IHdlIG5lZWQgdG8gb3JkZXIgdGhlIHNpdGVzXG4gICAgaWYgKGlzQTJETGluZShzaXRlcykpIHtcbiAgICAgICAgLy9JZiBpdCBpcyBhIHN0cmFpZ2h0IGxpbmUgPT4gc2ltdWxhdGUgYXMgdHJpYW5nbGVzIG9mIHRocmVlIGNvbnNlY3V0aXZlIHBvaW50cyAod2l0aCBjb25uZWN0aW9uIG9mIGEgY29tbW9uIHBvaW50cyBiZXR3ZWVuIHR3byBjb25zZWN1dGl2ZSB0cmlhbmdsZXMpXG4gICAgICAgIGxldCBjb3BpZWRTaXRlcyA9IHNpdGVzLnNsaWNlKCk7XG4gICAgICAgIC8vV2UgbmVlZCB0byBzb3J0IHBvaW50cyBzbyB0aGF0IHRoZSBtc3Qgd2lsbCBiZSBzZXF1ZW50aWFsLlxuICAgICAgICBjb3BpZWRTaXRlcy5zb3J0KChhLCBiKT0+IGFbMF0+YlswXSA/IGFbMF0tYlswXTogYVsxXS1iWzFdKTtcblxuICAgICAgICBsZXQgdGdzID0gW107XG4gICAgICAgIGxldCBzaXRlTGVuZ3RoID0gY29waWVkU2l0ZXMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpdGVMZW5ndGg7IGkgPSBpICsgMikge1xuICAgICAgICAgICAgaWYgKGkgKyAxIDwgc2l0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRncy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIHRncy5wdXNoKGkgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpICsgMiA8IHNpdGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0Z3MucHVzaChpICsgMik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNpdGVMZW5ndGggJSAyID09IDApIHtcbiAgICAgICAgICAgICAgICB0Z3MucHVzaChpIC0gMSk7Ly9JZiBpdCBpcyBvZGQgPT4gd2UgYWRkIGJhY2sgb25lIHBvaW50LiB0byBtYWtlIHRoZW0gZGl2aXNpYmxlIGJ5IDMgKGFzIHRyaWFuZ2xlcykuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVsYXVuYXkudHJpYW5nbGVzID0gdGdzO1xuICAgICAgICBkZWxhdW5heS5wb2ludHMgPSBjb3BpZWRTaXRlcztcbiAgICB9IGVsc2Uge1xuICAgICAgICBkZWxhdW5heSA9IERlbGF1bmF5LmZyb20oc2l0ZXMpO1xuICAgICAgICBkZWxhdW5heS5wb2ludHMgPSBzaXRlcztcbiAgICB9XG5cbiAgICAvL1RPRE86IFRoZXJlIGFyZSBtYW55IHBsYWNlcyB3ZSBuZWVkIHRoZSB0cmlhbmdsZUNvb3JkaW5hdGVzIGZ1bmN0aW9uID0+IHdlIHNob3VsZCBidWlsZCBpdCBhcyBhIHByb3RvdHlwZSBpbnN0ZWFkIG9mIGNvcHkvcGFzdGUgdGhpcyBmdW5jdGlvbiBpbiBtYW55IGRpZmZlcmVudCBwbGFjZXMuXG4gICAgZGVsYXVuYXkudHJpYW5nbGVDb29yZGluYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHRyaWFuZ2xlcyA9IHRoaXMudHJpYW5nbGVzO1xuICAgICAgICBsZXQgdGMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIHRjLnB1c2goW1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzW3RyaWFuZ2xlc1tpXV0sXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludHNbdHJpYW5nbGVzW2kgKyAxXV0sXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludHNbdHJpYW5nbGVzW2kgKyAyXV1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YztcbiAgICB9XG4gICAgcmV0dXJuIGRlbGF1bmF5O1xufSIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHtxdWFudGlsZX0gZnJvbSAnc2ltcGxlLXN0YXRpc3RpY3MnO1xuaW1wb3J0IHtwb2ludEV4aXN0c30gZnJvbSBcIi4vY2x1bXB5XCI7XG5pbXBvcnQge2NyZWF0ZUdyYXBoLCBtc3QsIGdldEFsbFYyT3JHcmVhdGVyRnJvbVRyZWV9IGZyb20gXCIuL2tydXNrYWwtbXN0XCI7XG5pbXBvcnQge2RlbGF1bmF5RnJvbVBvaW50c30gZnJvbSBcIi4vZGVsYXVuYXlcIjtcblxuZXhwb3J0IGNsYXNzIE91dGx5aW5nIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmVlLCB1cHBlckJvdW5kKSB7XG4gICAgICAgIC8vQ2xvbmUgdGhlIHRyZWUgdG8gYXZvaWQgbW9kaWZ5aW5nIGl0XG4gICAgICAgIHRoaXMudHJlZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJlZSkpO1xuICAgICAgICB0aGlzLnVwcGVyQm91bmQgPSB1cHBlckJvdW5kO1xuXG4gICAgICAgIC8vQ2FsY3VsYXRlIHRoZSB1cHBlciBib3VuZCBpZiBpdCBpcyBub3QgcHJvdmlkZWQuXG4gICAgICAgIGlmICghdXBwZXJCb3VuZCkge1xuICAgICAgICAgICAgdXBwZXJCb3VuZCA9IGZpbmRVcHBlckJvdW5kKHRoaXMudHJlZSwgMS41KTtcbiAgICAgICAgICAgIC8vU2F2ZSBpdCBmb3IgZGlzcGxheWluZyBwdXJwb3NlLlxuICAgICAgICAgICAgdGhpcy51cHBlckJvdW5kID0gdXBwZXJCb3VuZDtcbiAgICAgICAgfVxuICAgICAgICAvL01hcmsgdGhlIGxvbmcgbGlua3NcbiAgICAgICAgbWFya0xvbmdMaW5rcyh0aGlzLnRyZWUsIHVwcGVyQm91bmQpO1xuICAgICAgICAvL0ZpbmRpbmcgbm9ybWFsIG5vZGVzXG4gICAgICAgIGxldCBub3JtYWxOb2RlcyA9IGZpbmROb3JtYWxOb2Rlcyh0aGlzLnRyZWUpO1xuXG4gICAgICAgIC8vRmluZGluZyBvdXRseWluZyBwb2ludHNcbiAgICAgICAgdGhpcy5vdXRseWluZ1BvaW50cyA9IGZpbmRPdXRseWluZ1BvaW50cyh0aGlzLnRyZWUsIG5vcm1hbE5vZGVzKTtcblxuICAgICAgICAvL05vdyBtYXJrIHRoZSBvdXRseWluZyBsaW5rc1xuICAgICAgICBtYXJrT3V0bHlpbmdMaW5rcyh0aGlzLnRyZWUsIHRoaXMub3V0bHlpbmdQb2ludHMpO1xuXG4gICAgICAgIC8vQ3JlYXRlIG5vbmUgb3V0bHlpbmcgdHJlZVxuICAgICAgICB0aGlzLm5vT3V0bHlpbmdUcmVlID0gYnVpbGROb091dGx5aW5nVHJlZSh0aGlzLnRyZWUsIHRoaXMub3V0bHlpbmdQb2ludHMpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkTm9PdXRseWluZ1RyZWUodHJlZSwgb3V0bHlpbmdQb2ludHMpIHtcbiAgICAgICAgICAgIGxldCBub091dGx5aW5nVHJlZSA9IHt9O1xuICAgICAgICAgICAgbm9PdXRseWluZ1RyZWUubm9kZXMgPSBub3JtYWxOb2RlcztcbiAgICAgICAgICAgIG5vT3V0bHlpbmdUcmVlLmxpbmtzID0gdHJlZS5saW5rcy5maWx0ZXIobCA9PiBsLmlzT3V0bHlpbmcgIT09IHRydWUpXG4gICAgICAgICAgICAvL0lmIHRoZSBvdXRseWluZyBub2RlcyBoYXMgdGhlIGRlZ3JlZSBvZiAyIG9yIGdyZWF0ZXIgPT4gaXQgd2lsbCBicmVhayB0aGUgdHJlZSBpbnRvIHN1YnRyZWVzID0+IHNvIHdlIG5lZWQgdG8gcmVidWlsZCB0aGUgdHJlZS5cbiAgICAgICAgICAgIC8vVGFrZSB0aGUgb3V0bHlpbmcgcG9pbnRzXG4gICAgICAgICAgICBsZXQgb3V0bHlpbmdQb2ludHNTdHIgPSBvdXRseWluZ1BvaW50cy5tYXAocCA9PiBwLmpvaW4oJywnKSk7XG4gICAgICAgICAgICBsZXQgdjJPckdyZWF0ZXJTdHIgPSBnZXRBbGxWMk9yR3JlYXRlckZyb21UcmVlKHRyZWUpLm1hcChwID0+IHAuam9pbignLCcpKTtcblxuICAgICAgICAgICAgbGV0IGRpZmYgPSBfLmRpZmZlcmVuY2Uob3V0bHlpbmdQb2ludHNTdHIsIHYyT3JHcmVhdGVyU3RyKTtcbiAgICAgICAgICAgIGlmIChkaWZmLmxlbmd0aCA8IG91dGx5aW5nUG9pbnRzU3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vTWVhbnMgdGhlcmUgaXMgb3V0bHlpbmcgbm9kZShzKSB3aXRoIGRlZ3JlZSAyIG9yIGhpZ2hlciAoc28gd2Ugc2hvdWxkIHJlYnVpbGQgdGhlIHRyZWUpXG4gICAgICAgICAgICAgICAgbGV0IGRlbGF1bmF5ID0gZGVsYXVuYXlGcm9tUG9pbnRzKG5vT3V0bHlpbmdUcmVlLm5vZGVzLm1hcChuID0+IG4uaWQpKTtcbiAgICAgICAgICAgICAgICBsZXQgZ3JhcGggPSBjcmVhdGVHcmFwaChkZWxhdW5heS50cmlhbmdsZUNvb3JkaW5hdGVzKCkpXG4gICAgICAgICAgICAgICAgbm9PdXRseWluZ1RyZWUgPSBtc3QoZ3JhcGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vT3V0bHlpbmdUcmVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWFya091dGx5aW5nTGlua3ModHJlZSwgb3V0bHlpbmdQb2ludHMpIHtcbiAgICAgICAgICAgIGlmIChvdXRseWluZ1BvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy9DaGVjayB0aGUgbG9uZyBsaW5rcyBvbmx5XG4gICAgICAgICAgICAgICAgdHJlZS5saW5rcy5maWx0ZXIobCA9PiBsLmlzTG9uZykuZm9yRWFjaChsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy9BbHNvIGNoZWNrIGlmIHRoZSBsaW5rIGNvbnRhaW5zIG91dGx5aW5nIHBvaW50cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50RXhpc3RzKG91dGx5aW5nUG9pbnRzLCBsLnNvdXJjZSkgfHwgcG9pbnRFeGlzdHMob3V0bHlpbmdQb2ludHMsIGwudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbC5pc091dGx5aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZmluZE5vcm1hbE5vZGVzKHRyZWUpIHtcbiAgICAgICAgICAgIC8vUmVtb3ZlIGxvbmcgbGlua3NcbiAgICAgICAgICAgIGxldCBub3JtYWxMaW5rcyA9IHRyZWUubGlua3MuZmlsdGVyKGwgPT4gIWwuaXNMb25nKTtcbiAgICAgICAgICAgIC8vUmVtb3ZlIG91dGx5aW5nIG5vZGVzIChub2RlcyBhcmUgbm90IGluIGFueSBub25lLWxvbmcgbGlua3MpXG4gICAgICAgICAgICBsZXQgYWxsTm9kZXNXaXRoTGlua3MgPSBbXTtcbiAgICAgICAgICAgIG5vcm1hbExpbmtzLmZvckVhY2gobCA9PiB7XG4gICAgICAgICAgICAgICAgYWxsTm9kZXNXaXRoTGlua3MucHVzaChsLnNvdXJjZSk7XG4gICAgICAgICAgICAgICAgYWxsTm9kZXNXaXRoTGlua3MucHVzaChsLnRhcmdldCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFsbE5vZGVzV2l0aExpbmtzID0gXy51bmlxKGFsbE5vZGVzV2l0aExpbmtzLCBmYWxzZSwgZCA9PiBkLmpvaW4oJywnKSk7XG4gICAgICAgICAgICBsZXQgbm9ybWFsTm9kZXMgPSBhbGxOb2Rlc1dpdGhMaW5rcy5tYXAobiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtpZDogbn07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxOb2RlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpbmRPdXRseWluZ1BvaW50cyh0cmVlLCBub3JtYWxOb2Rlcykge1xuICAgICAgICAgICAgbGV0IG5ld05vZGVzID0gbm9ybWFsTm9kZXM7XG4gICAgICAgICAgICBsZXQgb2xkTm9kZXMgPSB0cmVlLm5vZGVzO1xuICAgICAgICAgICAgLy9HZXQgdGhlIG91dGx5aW5nIHBvaW50c1xuICAgICAgICAgICAgbGV0IG9wcyA9IFtdO1xuICAgICAgICAgICAgb2xkTm9kZXMuZm9yRWFjaChvbiA9PiB7XG4gICAgICAgICAgICAgICAgLy8uaWQgc2luY2Ugd2UgYXJlIGFjY2Vzc2luZyB0byBwb2ludHMgYW5kIHRoZSBub2RlIGlzIGluIGZvcm0gb2Yge2lkOiB0aGVQb2ludH1cbiAgICAgICAgICAgICAgICBpZiAoIXBvaW50RXhpc3RzKG5ld05vZGVzLm1hcChubiA9PiBubi5pZCksIG9uLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHMucHVzaChvbi5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3BzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWFya0xvbmdMaW5rcyh0cmVlLCB1cHBlckJvdW5kKSB7XG4gICAgICAgICAgICB0cmVlLmxpbmtzLmZvckVhY2gobCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGwud2VpZ2h0ID4gdXBwZXJCb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsLmlzTG9uZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaW5kVXBwZXJCb3VuZCh0cmVlLCBjb2VmZmljaWVudCkge1xuICAgICAgICAgICAgbGV0IGFsbExlbmd0aHMgPSB0cmVlLmxpbmtzLm1hcChsID0+IGwud2VpZ2h0KSxcbiAgICAgICAgICAgICAgICBxMSA9IHF1YW50aWxlKGFsbExlbmd0aHMsIDAuMjUpLFxuICAgICAgICAgICAgICAgIHEzID0gcXVhbnRpbGUoYWxsTGVuZ3RocywgMC43NSksXG4gICAgICAgICAgICAgICAgaXFyID0gcTMgLSBxMSxcbiAgICAgICAgICAgICAgICB1cHBlckJvdW5kID0gcTMgKyBjb2VmZmljaWVudCAqIGlxcjtcbiAgICAgICAgICAgIHJldHVybiB1cHBlckJvdW5kO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvdXRseWluZyBzY29yZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2NvcmUoKSB7XG4gICAgICAgIGxldCB0b3RhbExlbmd0aHMgPSAwO1xuICAgICAgICBsZXQgdG90YWxPdXRseWluZ0xlbmd0aHMgPSAwO1xuICAgICAgICB0aGlzLnRyZWUubGlua3MuZm9yRWFjaChsID0+IHtcbiAgICAgICAgICAgIHRvdGFsTGVuZ3RocyArPSBsLndlaWdodDtcbiAgICAgICAgICAgIC8vSWYgdGhlcmUgYXJlIG91dGx5aW5nIHBvaW50cyBmaXJzdC5cbiAgICAgICAgICAgIGlmIChsLmlzT3V0bHlpbmcpIHtcbiAgICAgICAgICAgICAgICB0b3RhbE91dGx5aW5nTGVuZ3RocyArPSBsLndlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b3RhbE91dGx5aW5nTGVuZ3RocyAvIHRvdGFsTGVuZ3RocztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG91dGx5aW5nIGxpbmtzXG4gICAgICovXG4gICAgbGlua3MoKSB7XG4gICAgICAgIGlmICghdGhpcy5vdXRseWluZ0xpbmtzKSB7XG4gICAgICAgICAgICB0aGlzLm91dGx5aW5nTGlua3MgPSB0aGlzLnRyZWUubGlua3MuZmlsdGVyKGwgPT4gbC5pc091dGx5aW5nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5vdXRseWluZ0xpbmtzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBvdXRseWluZyBsaW5rcyBhbmQgbm9kZXMgYW5kIHJldHVybiBhIG5ldyB0cmVlIHdpdGhvdXQgb3V0bHlpbmcgcG9pbnRzL2VkZ2VzXG4gICAgICovXG4gICAgcmVtb3ZlT3V0bHlpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vT3V0bHlpbmdUcmVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG91dGx5aW5nIHBvaW50cyAoaW4gZm9ybSBvZiBwb2ludHMsIG5vdCBub2RlIG9iamVjdCkuXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqL1xuICAgIHBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0bHlpbmdQb2ludHM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtxdWFudGlsZX0gZnJvbSAnc2ltcGxlLXN0YXRpc3RpY3MnO1xuXG5leHBvcnQgY2xhc3MgU2tld2VkIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmVlKSB7XG4gICAgICAgIC8vQ2xvbmUgdGhlIHRyZWUgdG8gYXZvaWQgbW9kaWZ5aW5nIGl0XG4gICAgICAgIHRoaXMudHJlZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJlZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc2tld2VkIHNjb3JlXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBzY29yZSgpIHtcbiAgICAgICAgbGV0IGFsbExlbmd0aHMgPSB0aGlzLnRyZWUubGlua3MubWFwKGw9Pmwud2VpZ2h0KSxcbiAgICAgICAgcTkwID0gcXVhbnRpbGUoYWxsTGVuZ3RocywgLjkpLFxuICAgICAgICBxNTAgPSBxdWFudGlsZShhbGxMZW5ndGhzLCAuNSksXG4gICAgICAgIHExMCA9IHF1YW50aWxlKGFsbExlbmd0aHMsIC4xKTtcbiAgICAgICAgaWYocTkwIT1xMTApe1xuICAgICAgICAgICAgcmV0dXJuIChxOTAtcTUwKS8ocTkwLXExMCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgIH1cbn1cbiIsImltcG9ydCB7cXVhbnRpbGV9IGZyb20gJ3NpbXBsZS1zdGF0aXN0aWNzJztcblxuZXhwb3J0IGNsYXNzIFNwYXJzZSB7XG4gICAgY29uc3RydWN0b3IodHJlZSkge1xuICAgICAgICAvL0Nsb25lIHRoZSB0cmVlIHRvIGF2b2lkIG1vZGlmeWluZyBpdFxuICAgICAgICB0aGlzLnRyZWUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRyZWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHNwYXJzZSBzY29yZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2NvcmUoKSB7XG4gICAgICAgIGxldCBhbGxMZW5ndGhzID0gdGhpcy50cmVlLmxpbmtzLm1hcChsPT5sLndlaWdodCksXG4gICAgICAgICAgICBxOTAgPSBxdWFudGlsZShhbGxMZW5ndGhzLCAuOSk7XG4gICAgICAgIHJldHVybiBxOTA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtkaXN0YW5jZSwgZ2V0QWxsVjJDb3JuZXJzRnJvbVRyZWUsIGdldEFsbFYxc0Zyb21UcmVlfSBmcm9tIFwiLi9rcnVza2FsLW1zdFwiO1xuXG5leHBvcnQgY2xhc3MgU3RyaWF0ZWQge1xuICAgIGNvbnN0cnVjdG9yKHRyZWUpIHtcbiAgICAgICAgLy9DbG9uZSB0aGUgdHJlZSB0byBhdm9pZCBtb2RpZnlpbmcgaXRcbiAgICAgICAgdGhpcy50cmVlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdHJpYXRlZCBzY29yZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2NvcmUoKSB7XG4gICAgICAgIC8vTG9vcCB0aHJvdWdoIHRoZSBub2Rlcy5cbiAgICAgICAgbGV0IGFsbE9idHVzZVYyQ29ybmVyc0NvdW50ID0gdGhpcy5nZXRBbGxPYnR1c2VWMkNvcm5lcnMoKS5sZW5ndGg7XG4gICAgICAgIGxldCB2MUNvdW50ID0gZ2V0QWxsVjFzRnJvbVRyZWUodGhpcy50cmVlKS5sZW5ndGg7XG4gICAgICAgIC8vVE9ETzogTmVlZHMgdG8gbWFrZSBzdXJlIHRoZSBkaXZpc29yIGlzIGFsbCB2ZXJ0aWNlcyBjb3VudCBvciB2ZXJ0aWNlcyBjb3VudCBmb3IgZGVncmVlIDIgdmVydGljZXMgb25seS5cbiAgICAgICAgbGV0IHZlcnRpY2VzQ291bnQgPSB0aGlzLnRyZWUubm9kZXMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gYWxsT2J0dXNlVjJDb3JuZXJzQ291bnQgLyAodmVydGljZXNDb3VudCAtIHYxQ291bnQpO1xuICAgICAgICAvLyBsZXQgdjJDb3VudCA9IHRoaXMuZ2V0QWxsVjJDb3JuZXJzKCkubGVuZ3RoO1xuICAgICAgICAvLyByZXR1cm4gYWxsT2J0dXNlVjJDb3JuZXJzQ291bnQgLyB2MkNvdW50O1xuICAgIH1cblxuICAgIGdldEFsbE9idHVzZVYyQ29ybmVycygpIHtcbiAgICAgICAgbGV0IGFsbFYyQ29ybmVycyA9IHRoaXMuZ2V0QWxsVjJDb3JuZXJzKCk7XG4gICAgICAgIGxldCBhbGxPYnR1c2VWMkNvcm5lcnMgPSBbXTtcbiAgICAgICAgYWxsVjJDb3JuZXJzLmZvckVhY2goY29ybmVyID0+IHtcbiAgICAgICAgICAgIGxldCBjcyA9IGNvc2luZShjb3JuZXJbMF0sIGNvcm5lclsxXSwgY29ybmVyWzJdKTtcbiAgICAgICAgICAgIGlmIChjcyA8PSAtLjc1KSB7XG4gICAgICAgICAgICAgICAgYWxsT2J0dXNlVjJDb3JuZXJzLnB1c2goY29ybmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhbGxPYnR1c2VWMkNvcm5lcnM7XG5cbiAgICAgICAgZnVuY3Rpb24gY29zaW5lKHAxLCBwMiwgcDMpIHtcbiAgICAgICAgICAgIGxldCBwMTIgPSBkaXN0YW5jZShwMSwgcDIpLFxuICAgICAgICAgICAgICAgIHAxMyA9IGRpc3RhbmNlKHAxLCBwMyksXG4gICAgICAgICAgICAgICAgcDIzID0gZGlzdGFuY2UocDIsIHAzKTtcbiAgICAgICAgICAgIHJldHVybiAoKE1hdGgucG93KHAxMiwgMikpICsgKE1hdGgucG93KHAxMywgMikpIC0gKE1hdGgucG93KHAyMywgMikpKSAvICgyICogcDEyICogcDEzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBjb3JuZXJzICh0aHJlZSB2ZXJ0aWNlcykgb2YgdmVydGljZXMgb2YgZGVncmVlIHR3byBpbiB0aGUgZm9yIG1hdCBvZlxuICAgICAqIHBvaW50MSwgcG9pbnQyLCBwb2ludDMgPT4gcG9pbnQxIGlzIHRoZSB0aGUgdmVydGV4IHdpdGggZGVncmVlIHR3byAodHdvIGVkZ2VzIGNvbm5lY3RlZCB0byBpdCBhcmUgW3BvaW50MSwgcG9pbnQyXSBhbmQgW3BvaW50MSwgcG9pbnQzXSAob3JkZXIgb2YgdGhlIHBvaW50cyBpbiBlYWNoIGVkZ2UgaXMgbm90IGltcG9ydGFudCkpLlxuICAgICAqL1xuICAgIGdldEFsbFYyQ29ybmVycygpIHtcbiAgICAgICAgcmV0dXJuIGdldEFsbFYyQ29ybmVyc0Zyb21UcmVlKHRoaXMudHJlZSk7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSB0d29Qcm9kdWN0XG5cbnZhciBTUExJVFRFUiA9ICsoTWF0aC5wb3coMiwgMjcpICsgMS4wKVxuXG5mdW5jdGlvbiB0d29Qcm9kdWN0KGEsIGIsIHJlc3VsdCkge1xuICB2YXIgeCA9IGEgKiBiXG5cbiAgdmFyIGMgPSBTUExJVFRFUiAqIGFcbiAgdmFyIGFiaWcgPSBjIC0gYVxuICB2YXIgYWhpID0gYyAtIGFiaWdcbiAgdmFyIGFsbyA9IGEgLSBhaGlcblxuICB2YXIgZCA9IFNQTElUVEVSICogYlxuICB2YXIgYmJpZyA9IGQgLSBiXG4gIHZhciBiaGkgPSBkIC0gYmJpZ1xuICB2YXIgYmxvID0gYiAtIGJoaVxuXG4gIHZhciBlcnIxID0geCAtIChhaGkgKiBiaGkpXG4gIHZhciBlcnIyID0gZXJyMSAtIChhbG8gKiBiaGkpXG4gIHZhciBlcnIzID0gZXJyMiAtIChhaGkgKiBibG8pXG5cbiAgdmFyIHkgPSBhbG8gKiBibG8gLSBlcnIzXG5cbiAgaWYocmVzdWx0KSB7XG4gICAgcmVzdWx0WzBdID0geVxuICAgIHJlc3VsdFsxXSA9IHhcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICByZXR1cm4gWyB5LCB4IF1cbn0iLCJcInVzZSBzdHJpY3RcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpbmVhckV4cGFuc2lvblN1bVxuXG4vL0Vhc3kgY2FzZTogQWRkIHR3byBzY2FsYXJzXG5mdW5jdGlvbiBzY2FsYXJTY2FsYXIoYSwgYikge1xuICB2YXIgeCA9IGEgKyBiXG4gIHZhciBidiA9IHggLSBhXG4gIHZhciBhdiA9IHggLSBidlxuICB2YXIgYnIgPSBiIC0gYnZcbiAgdmFyIGFyID0gYSAtIGF2XG4gIHZhciB5ID0gYXIgKyBiclxuICBpZih5KSB7XG4gICAgcmV0dXJuIFt5LCB4XVxuICB9XG4gIHJldHVybiBbeF1cbn1cblxuZnVuY3Rpb24gbGluZWFyRXhwYW5zaW9uU3VtKGUsIGYpIHtcbiAgdmFyIG5lID0gZS5sZW5ndGh8MFxuICB2YXIgbmYgPSBmLmxlbmd0aHwwXG4gIGlmKG5lID09PSAxICYmIG5mID09PSAxKSB7XG4gICAgcmV0dXJuIHNjYWxhclNjYWxhcihlWzBdLCBmWzBdKVxuICB9XG4gIHZhciBuID0gbmUgKyBuZlxuICB2YXIgZyA9IG5ldyBBcnJheShuKVxuICB2YXIgY291bnQgPSAwXG4gIHZhciBlcHRyID0gMFxuICB2YXIgZnB0ciA9IDBcbiAgdmFyIGFicyA9IE1hdGguYWJzXG4gIHZhciBlaSA9IGVbZXB0cl1cbiAgdmFyIGVhID0gYWJzKGVpKVxuICB2YXIgZmkgPSBmW2ZwdHJdXG4gIHZhciBmYSA9IGFicyhmaSlcbiAgdmFyIGEsIGJcbiAgaWYoZWEgPCBmYSkge1xuICAgIGIgPSBlaVxuICAgIGVwdHIgKz0gMVxuICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgZWkgPSBlW2VwdHJdXG4gICAgICBlYSA9IGFicyhlaSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYiA9IGZpXG4gICAgZnB0ciArPSAxXG4gICAgaWYoZnB0ciA8IG5mKSB7XG4gICAgICBmaSA9IGZbZnB0cl1cbiAgICAgIGZhID0gYWJzKGZpKVxuICAgIH1cbiAgfVxuICBpZigoZXB0ciA8IG5lICYmIGVhIDwgZmEpIHx8IChmcHRyID49IG5mKSkge1xuICAgIGEgPSBlaVxuICAgIGVwdHIgKz0gMVxuICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgZWkgPSBlW2VwdHJdXG4gICAgICBlYSA9IGFicyhlaSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYSA9IGZpXG4gICAgZnB0ciArPSAxXG4gICAgaWYoZnB0ciA8IG5mKSB7XG4gICAgICBmaSA9IGZbZnB0cl1cbiAgICAgIGZhID0gYWJzKGZpKVxuICAgIH1cbiAgfVxuICB2YXIgeCA9IGEgKyBiXG4gIHZhciBidiA9IHggLSBhXG4gIHZhciB5ID0gYiAtIGJ2XG4gIHZhciBxMCA9IHlcbiAgdmFyIHExID0geFxuICB2YXIgX3gsIF9idiwgX2F2LCBfYnIsIF9hclxuICB3aGlsZShlcHRyIDwgbmUgJiYgZnB0ciA8IG5mKSB7XG4gICAgaWYoZWEgPCBmYSkge1xuICAgICAgYSA9IGVpXG4gICAgICBlcHRyICs9IDFcbiAgICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgICBlaSA9IGVbZXB0cl1cbiAgICAgICAgZWEgPSBhYnMoZWkpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBmaVxuICAgICAgZnB0ciArPSAxXG4gICAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgICAgZmkgPSBmW2ZwdHJdXG4gICAgICAgIGZhID0gYWJzKGZpKVxuICAgICAgfVxuICAgIH1cbiAgICBiID0gcTBcbiAgICB4ID0gYSArIGJcbiAgICBidiA9IHggLSBhXG4gICAgeSA9IGIgLSBidlxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfVxuICAgIF94ID0gcTEgKyB4XG4gICAgX2J2ID0gX3ggLSBxMVxuICAgIF9hdiA9IF94IC0gX2J2XG4gICAgX2JyID0geCAtIF9idlxuICAgIF9hciA9IHExIC0gX2F2XG4gICAgcTAgPSBfYXIgKyBfYnJcbiAgICBxMSA9IF94XG4gIH1cbiAgd2hpbGUoZXB0ciA8IG5lKSB7XG4gICAgYSA9IGVpXG4gICAgYiA9IHEwXG4gICAgeCA9IGEgKyBiXG4gICAgYnYgPSB4IC0gYVxuICAgIHkgPSBiIC0gYnZcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH1cbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICAgIGVwdHIgKz0gMVxuICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgZWkgPSBlW2VwdHJdXG4gICAgfVxuICB9XG4gIHdoaWxlKGZwdHIgPCBuZikge1xuICAgIGEgPSBmaVxuICAgIGIgPSBxMFxuICAgIHggPSBhICsgYlxuICAgIGJ2ID0geCAtIGFcbiAgICB5ID0gYiAtIGJ2XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9IFxuICAgIF94ID0gcTEgKyB4XG4gICAgX2J2ID0gX3ggLSBxMVxuICAgIF9hdiA9IF94IC0gX2J2XG4gICAgX2JyID0geCAtIF9idlxuICAgIF9hciA9IHExIC0gX2F2XG4gICAgcTAgPSBfYXIgKyBfYnJcbiAgICBxMSA9IF94XG4gICAgZnB0ciArPSAxXG4gICAgaWYoZnB0ciA8IG5mKSB7XG4gICAgICBmaSA9IGZbZnB0cl1cbiAgICB9XG4gIH1cbiAgaWYocTApIHtcbiAgICBnW2NvdW50KytdID0gcTBcbiAgfVxuICBpZihxMSkge1xuICAgIGdbY291bnQrK10gPSBxMVxuICB9XG4gIGlmKCFjb3VudCkge1xuICAgIGdbY291bnQrK10gPSAwLjAgIFxuICB9XG4gIGcubGVuZ3RoID0gY291bnRcbiAgcmV0dXJuIGdcbn0iLCJcInVzZSBzdHJpY3RcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhc3RUd29TdW1cblxuZnVuY3Rpb24gZmFzdFR3b1N1bShhLCBiLCByZXN1bHQpIHtcblx0dmFyIHggPSBhICsgYlxuXHR2YXIgYnYgPSB4IC0gYVxuXHR2YXIgYXYgPSB4IC0gYnZcblx0dmFyIGJyID0gYiAtIGJ2XG5cdHZhciBhciA9IGEgLSBhdlxuXHRpZihyZXN1bHQpIHtcblx0XHRyZXN1bHRbMF0gPSBhciArIGJyXG5cdFx0cmVzdWx0WzFdID0geFxuXHRcdHJldHVybiByZXN1bHRcblx0fVxuXHRyZXR1cm4gW2FyK2JyLCB4XVxufSIsIlwidXNlIHN0cmljdFwiXG5cbnZhciB0d29Qcm9kdWN0ID0gcmVxdWlyZShcInR3by1wcm9kdWN0XCIpXG52YXIgdHdvU3VtID0gcmVxdWlyZShcInR3by1zdW1cIilcblxubW9kdWxlLmV4cG9ydHMgPSBzY2FsZUxpbmVhckV4cGFuc2lvblxuXG5mdW5jdGlvbiBzY2FsZUxpbmVhckV4cGFuc2lvbihlLCBzY2FsZSkge1xuICB2YXIgbiA9IGUubGVuZ3RoXG4gIGlmKG4gPT09IDEpIHtcbiAgICB2YXIgdHMgPSB0d29Qcm9kdWN0KGVbMF0sIHNjYWxlKVxuICAgIGlmKHRzWzBdKSB7XG4gICAgICByZXR1cm4gdHNcbiAgICB9XG4gICAgcmV0dXJuIFsgdHNbMV0gXVxuICB9XG4gIHZhciBnID0gbmV3IEFycmF5KDIgKiBuKVxuICB2YXIgcSA9IFswLjEsIDAuMV1cbiAgdmFyIHQgPSBbMC4xLCAwLjFdXG4gIHZhciBjb3VudCA9IDBcbiAgdHdvUHJvZHVjdChlWzBdLCBzY2FsZSwgcSlcbiAgaWYocVswXSkge1xuICAgIGdbY291bnQrK10gPSBxWzBdXG4gIH1cbiAgZm9yKHZhciBpPTE7IGk8bjsgKytpKSB7XG4gICAgdHdvUHJvZHVjdChlW2ldLCBzY2FsZSwgdClcbiAgICB2YXIgcHEgPSBxWzFdXG4gICAgdHdvU3VtKHBxLCB0WzBdLCBxKVxuICAgIGlmKHFbMF0pIHtcbiAgICAgIGdbY291bnQrK10gPSBxWzBdXG4gICAgfVxuICAgIHZhciBhID0gdFsxXVxuICAgIHZhciBiID0gcVsxXVxuICAgIHZhciB4ID0gYSArIGJcbiAgICB2YXIgYnYgPSB4IC0gYVxuICAgIHZhciB5ID0gYiAtIGJ2XG4gICAgcVsxXSA9IHhcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH1cbiAgfVxuICBpZihxWzFdKSB7XG4gICAgZ1tjb3VudCsrXSA9IHFbMV1cbiAgfVxuICBpZihjb3VudCA9PT0gMCkge1xuICAgIGdbY291bnQrK10gPSAwLjBcbiAgfVxuICBnLmxlbmd0aCA9IGNvdW50XG4gIHJldHVybiBnXG59IiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSByb2J1c3RTdWJ0cmFjdFxuXG4vL0Vhc3kgY2FzZTogQWRkIHR3byBzY2FsYXJzXG5mdW5jdGlvbiBzY2FsYXJTY2FsYXIoYSwgYikge1xuICB2YXIgeCA9IGEgKyBiXG4gIHZhciBidiA9IHggLSBhXG4gIHZhciBhdiA9IHggLSBidlxuICB2YXIgYnIgPSBiIC0gYnZcbiAgdmFyIGFyID0gYSAtIGF2XG4gIHZhciB5ID0gYXIgKyBiclxuICBpZih5KSB7XG4gICAgcmV0dXJuIFt5LCB4XVxuICB9XG4gIHJldHVybiBbeF1cbn1cblxuZnVuY3Rpb24gcm9idXN0U3VidHJhY3QoZSwgZikge1xuICB2YXIgbmUgPSBlLmxlbmd0aHwwXG4gIHZhciBuZiA9IGYubGVuZ3RofDBcbiAgaWYobmUgPT09IDEgJiYgbmYgPT09IDEpIHtcbiAgICByZXR1cm4gc2NhbGFyU2NhbGFyKGVbMF0sIC1mWzBdKVxuICB9XG4gIHZhciBuID0gbmUgKyBuZlxuICB2YXIgZyA9IG5ldyBBcnJheShuKVxuICB2YXIgY291bnQgPSAwXG4gIHZhciBlcHRyID0gMFxuICB2YXIgZnB0ciA9IDBcbiAgdmFyIGFicyA9IE1hdGguYWJzXG4gIHZhciBlaSA9IGVbZXB0cl1cbiAgdmFyIGVhID0gYWJzKGVpKVxuICB2YXIgZmkgPSAtZltmcHRyXVxuICB2YXIgZmEgPSBhYnMoZmkpXG4gIHZhciBhLCBiXG4gIGlmKGVhIDwgZmEpIHtcbiAgICBiID0gZWlcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgZWEgPSBhYnMoZWkpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGIgPSBmaVxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSAtZltmcHRyXVxuICAgICAgZmEgPSBhYnMoZmkpXG4gICAgfVxuICB9XG4gIGlmKChlcHRyIDwgbmUgJiYgZWEgPCBmYSkgfHwgKGZwdHIgPj0gbmYpKSB7XG4gICAgYSA9IGVpXG4gICAgZXB0ciArPSAxXG4gICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICBlaSA9IGVbZXB0cl1cbiAgICAgIGVhID0gYWJzKGVpKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhID0gZmlcbiAgICBmcHRyICs9IDFcbiAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgIGZpID0gLWZbZnB0cl1cbiAgICAgIGZhID0gYWJzKGZpKVxuICAgIH1cbiAgfVxuICB2YXIgeCA9IGEgKyBiXG4gIHZhciBidiA9IHggLSBhXG4gIHZhciB5ID0gYiAtIGJ2XG4gIHZhciBxMCA9IHlcbiAgdmFyIHExID0geFxuICB2YXIgX3gsIF9idiwgX2F2LCBfYnIsIF9hclxuICB3aGlsZShlcHRyIDwgbmUgJiYgZnB0ciA8IG5mKSB7XG4gICAgaWYoZWEgPCBmYSkge1xuICAgICAgYSA9IGVpXG4gICAgICBlcHRyICs9IDFcbiAgICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgICBlaSA9IGVbZXB0cl1cbiAgICAgICAgZWEgPSBhYnMoZWkpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBmaVxuICAgICAgZnB0ciArPSAxXG4gICAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgICAgZmkgPSAtZltmcHRyXVxuICAgICAgICBmYSA9IGFicyhmaSlcbiAgICAgIH1cbiAgICB9XG4gICAgYiA9IHEwXG4gICAgeCA9IGEgKyBiXG4gICAgYnYgPSB4IC0gYVxuICAgIHkgPSBiIC0gYnZcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH1cbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICB9XG4gIHdoaWxlKGVwdHIgPCBuZSkge1xuICAgIGEgPSBlaVxuICAgIGIgPSBxMFxuICAgIHggPSBhICsgYlxuICAgIGJ2ID0geCAtIGFcbiAgICB5ID0gYiAtIGJ2XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9XG4gICAgX3ggPSBxMSArIHhcbiAgICBfYnYgPSBfeCAtIHExXG4gICAgX2F2ID0gX3ggLSBfYnZcbiAgICBfYnIgPSB4IC0gX2J2XG4gICAgX2FyID0gcTEgLSBfYXZcbiAgICBxMCA9IF9hciArIF9iclxuICAgIHExID0gX3hcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgIH1cbiAgfVxuICB3aGlsZShmcHRyIDwgbmYpIHtcbiAgICBhID0gZmlcbiAgICBiID0gcTBcbiAgICB4ID0gYSArIGJcbiAgICBidiA9IHggLSBhXG4gICAgeSA9IGIgLSBidlxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfSBcbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSAtZltmcHRyXVxuICAgIH1cbiAgfVxuICBpZihxMCkge1xuICAgIGdbY291bnQrK10gPSBxMFxuICB9XG4gIGlmKHExKSB7XG4gICAgZ1tjb3VudCsrXSA9IHExXG4gIH1cbiAgaWYoIWNvdW50KSB7XG4gICAgZ1tjb3VudCsrXSA9IDAuMCAgXG4gIH1cbiAgZy5sZW5ndGggPSBjb3VudFxuICByZXR1cm4gZ1xufSIsIlwidXNlIHN0cmljdFwiXG5cbnZhciB0d29Qcm9kdWN0ID0gcmVxdWlyZShcInR3by1wcm9kdWN0XCIpXG52YXIgcm9idXN0U3VtID0gcmVxdWlyZShcInJvYnVzdC1zdW1cIilcbnZhciByb2J1c3RTY2FsZSA9IHJlcXVpcmUoXCJyb2J1c3Qtc2NhbGVcIilcbnZhciByb2J1c3RTdWJ0cmFjdCA9IHJlcXVpcmUoXCJyb2J1c3Qtc3VidHJhY3RcIilcblxudmFyIE5VTV9FWFBBTkQgPSA1XG5cbnZhciBFUFNJTE9OICAgICA9IDEuMTEwMjIzMDI0NjI1MTU2NWUtMTZcbnZhciBFUlJCT1VORDMgICA9ICgzLjAgKyAxNi4wICogRVBTSUxPTikgKiBFUFNJTE9OXG52YXIgRVJSQk9VTkQ0ICAgPSAoNy4wICsgNTYuMCAqIEVQU0lMT04pICogRVBTSUxPTlxuXG5mdW5jdGlvbiBjb2ZhY3RvcihtLCBjKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobS5sZW5ndGgtMSlcbiAgZm9yKHZhciBpPTE7IGk8bS5sZW5ndGg7ICsraSkge1xuICAgIHZhciByID0gcmVzdWx0W2ktMV0gPSBuZXcgQXJyYXkobS5sZW5ndGgtMSlcbiAgICBmb3IodmFyIGo9MCxrPTA7IGo8bS5sZW5ndGg7ICsraikge1xuICAgICAgaWYoaiA9PT0gYykge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgcltrKytdID0gbVtpXVtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIG1hdHJpeChuKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobilcbiAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgcmVzdWx0W2ldID0gbmV3IEFycmF5KG4pXG4gICAgZm9yKHZhciBqPTA7IGo8bjsgKytqKSB7XG4gICAgICByZXN1bHRbaV1bal0gPSBbXCJtXCIsIGosIFwiW1wiLCAobi1pLTEpLCBcIl1cIl0uam9pbihcIlwiKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHNpZ24obikge1xuICBpZihuICYgMSkge1xuICAgIHJldHVybiBcIi1cIlxuICB9XG4gIHJldHVybiBcIlwiXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3VtKGV4cHIpIHtcbiAgaWYoZXhwci5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZXhwclswXVxuICB9IGVsc2UgaWYoZXhwci5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gW1wic3VtKFwiLCBleHByWzBdLCBcIixcIiwgZXhwclsxXSwgXCIpXCJdLmpvaW4oXCJcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbSA9IGV4cHIubGVuZ3RoPj4xXG4gICAgcmV0dXJuIFtcInN1bShcIiwgZ2VuZXJhdGVTdW0oZXhwci5zbGljZSgwLCBtKSksIFwiLFwiLCBnZW5lcmF0ZVN1bShleHByLnNsaWNlKG0pKSwgXCIpXCJdLmpvaW4oXCJcIilcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmFudChtKSB7XG4gIGlmKG0ubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIFtbXCJzdW0ocHJvZChcIiwgbVswXVswXSwgXCIsXCIsIG1bMV1bMV0sIFwiKSxwcm9kKC1cIiwgbVswXVsxXSwgXCIsXCIsIG1bMV1bMF0sIFwiKSlcIl0uam9pbihcIlwiKV1cbiAgfSBlbHNlIHtcbiAgICB2YXIgZXhwciA9IFtdXG4gICAgZm9yKHZhciBpPTA7IGk8bS5sZW5ndGg7ICsraSkge1xuICAgICAgZXhwci5wdXNoKFtcInNjYWxlKFwiLCBnZW5lcmF0ZVN1bShkZXRlcm1pbmFudChjb2ZhY3RvcihtLCBpKSkpLCBcIixcIiwgc2lnbihpKSwgbVswXVtpXSwgXCIpXCJdLmpvaW4oXCJcIikpXG4gICAgfVxuICAgIHJldHVybiBleHByXG4gIH1cbn1cblxuZnVuY3Rpb24gb3JpZW50YXRpb24obikge1xuICB2YXIgcG9zID0gW11cbiAgdmFyIG5lZyA9IFtdXG4gIHZhciBtID0gbWF0cml4KG4pXG4gIHZhciBhcmdzID0gW11cbiAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgaWYoKGkmMSk9PT0wKSB7XG4gICAgICBwb3MucHVzaC5hcHBseShwb3MsIGRldGVybWluYW50KGNvZmFjdG9yKG0sIGkpKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmVnLnB1c2guYXBwbHkobmVnLCBkZXRlcm1pbmFudChjb2ZhY3RvcihtLCBpKSkpXG4gICAgfVxuICAgIGFyZ3MucHVzaChcIm1cIiArIGkpXG4gIH1cbiAgdmFyIHBvc0V4cHIgPSBnZW5lcmF0ZVN1bShwb3MpXG4gIHZhciBuZWdFeHByID0gZ2VuZXJhdGVTdW0obmVnKVxuICB2YXIgZnVuY05hbWUgPSBcIm9yaWVudGF0aW9uXCIgKyBuICsgXCJFeGFjdFwiXG4gIHZhciBjb2RlID0gW1wiZnVuY3Rpb24gXCIsIGZ1bmNOYW1lLCBcIihcIiwgYXJncy5qb2luKCksIFwiKXt2YXIgcD1cIiwgcG9zRXhwciwgXCIsbj1cIiwgbmVnRXhwciwgXCIsZD1zdWIocCxuKTtcXFxucmV0dXJuIGRbZC5sZW5ndGgtMV07fTtyZXR1cm4gXCIsIGZ1bmNOYW1lXS5qb2luKFwiXCIpXG4gIHZhciBwcm9jID0gbmV3IEZ1bmN0aW9uKFwic3VtXCIsIFwicHJvZFwiLCBcInNjYWxlXCIsIFwic3ViXCIsIGNvZGUpXG4gIHJldHVybiBwcm9jKHJvYnVzdFN1bSwgdHdvUHJvZHVjdCwgcm9idXN0U2NhbGUsIHJvYnVzdFN1YnRyYWN0KVxufVxuXG52YXIgb3JpZW50YXRpb24zRXhhY3QgPSBvcmllbnRhdGlvbigzKVxudmFyIG9yaWVudGF0aW9uNEV4YWN0ID0gb3JpZW50YXRpb24oNClcblxudmFyIENBQ0hFRCA9IFtcbiAgZnVuY3Rpb24gb3JpZW50YXRpb24wKCkgeyByZXR1cm4gMCB9LFxuICBmdW5jdGlvbiBvcmllbnRhdGlvbjEoKSB7IHJldHVybiAwIH0sXG4gIGZ1bmN0aW9uIG9yaWVudGF0aW9uMihhLCBiKSB7IFxuICAgIHJldHVybiBiWzBdIC0gYVswXVxuICB9LFxuICBmdW5jdGlvbiBvcmllbnRhdGlvbjMoYSwgYiwgYykge1xuICAgIHZhciBsID0gKGFbMV0gLSBjWzFdKSAqIChiWzBdIC0gY1swXSlcbiAgICB2YXIgciA9IChhWzBdIC0gY1swXSkgKiAoYlsxXSAtIGNbMV0pXG4gICAgdmFyIGRldCA9IGwgLSByXG4gICAgdmFyIHNcbiAgICBpZihsID4gMCkge1xuICAgICAgaWYociA8PSAwKSB7XG4gICAgICAgIHJldHVybiBkZXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSBsICsgclxuICAgICAgfVxuICAgIH0gZWxzZSBpZihsIDwgMCkge1xuICAgICAgaWYociA+PSAwKSB7XG4gICAgICAgIHJldHVybiBkZXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSAtKGwgKyByKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGV0XG4gICAgfVxuICAgIHZhciB0b2wgPSBFUlJCT1VORDMgKiBzXG4gICAgaWYoZGV0ID49IHRvbCB8fCBkZXQgPD0gLXRvbCkge1xuICAgICAgcmV0dXJuIGRldFxuICAgIH1cbiAgICByZXR1cm4gb3JpZW50YXRpb24zRXhhY3QoYSwgYiwgYylcbiAgfSxcbiAgZnVuY3Rpb24gb3JpZW50YXRpb240KGEsYixjLGQpIHtcbiAgICB2YXIgYWR4ID0gYVswXSAtIGRbMF1cbiAgICB2YXIgYmR4ID0gYlswXSAtIGRbMF1cbiAgICB2YXIgY2R4ID0gY1swXSAtIGRbMF1cbiAgICB2YXIgYWR5ID0gYVsxXSAtIGRbMV1cbiAgICB2YXIgYmR5ID0gYlsxXSAtIGRbMV1cbiAgICB2YXIgY2R5ID0gY1sxXSAtIGRbMV1cbiAgICB2YXIgYWR6ID0gYVsyXSAtIGRbMl1cbiAgICB2YXIgYmR6ID0gYlsyXSAtIGRbMl1cbiAgICB2YXIgY2R6ID0gY1syXSAtIGRbMl1cbiAgICB2YXIgYmR4Y2R5ID0gYmR4ICogY2R5XG4gICAgdmFyIGNkeGJkeSA9IGNkeCAqIGJkeVxuICAgIHZhciBjZHhhZHkgPSBjZHggKiBhZHlcbiAgICB2YXIgYWR4Y2R5ID0gYWR4ICogY2R5XG4gICAgdmFyIGFkeGJkeSA9IGFkeCAqIGJkeVxuICAgIHZhciBiZHhhZHkgPSBiZHggKiBhZHlcbiAgICB2YXIgZGV0ID0gYWR6ICogKGJkeGNkeSAtIGNkeGJkeSkgXG4gICAgICAgICAgICArIGJkeiAqIChjZHhhZHkgLSBhZHhjZHkpXG4gICAgICAgICAgICArIGNkeiAqIChhZHhiZHkgLSBiZHhhZHkpXG4gICAgdmFyIHBlcm1hbmVudCA9IChNYXRoLmFicyhiZHhjZHkpICsgTWF0aC5hYnMoY2R4YmR5KSkgKiBNYXRoLmFicyhhZHopXG4gICAgICAgICAgICAgICAgICArIChNYXRoLmFicyhjZHhhZHkpICsgTWF0aC5hYnMoYWR4Y2R5KSkgKiBNYXRoLmFicyhiZHopXG4gICAgICAgICAgICAgICAgICArIChNYXRoLmFicyhhZHhiZHkpICsgTWF0aC5hYnMoYmR4YWR5KSkgKiBNYXRoLmFicyhjZHopXG4gICAgdmFyIHRvbCA9IEVSUkJPVU5ENCAqIHBlcm1hbmVudFxuICAgIGlmICgoZGV0ID4gdG9sKSB8fCAoLWRldCA+IHRvbCkpIHtcbiAgICAgIHJldHVybiBkZXRcbiAgICB9XG4gICAgcmV0dXJuIG9yaWVudGF0aW9uNEV4YWN0KGEsYixjLGQpXG4gIH1cbl1cblxuZnVuY3Rpb24gc2xvd09yaWVudChhcmdzKSB7XG4gIHZhciBwcm9jID0gQ0FDSEVEW2FyZ3MubGVuZ3RoXVxuICBpZighcHJvYykge1xuICAgIHByb2MgPSBDQUNIRURbYXJncy5sZW5ndGhdID0gb3JpZW50YXRpb24oYXJncy5sZW5ndGgpXG4gIH1cbiAgcmV0dXJuIHByb2MuYXBwbHkodW5kZWZpbmVkLCBhcmdzKVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU9yaWVudGF0aW9uUHJvYygpIHtcbiAgd2hpbGUoQ0FDSEVELmxlbmd0aCA8PSBOVU1fRVhQQU5EKSB7XG4gICAgQ0FDSEVELnB1c2gob3JpZW50YXRpb24oQ0FDSEVELmxlbmd0aCkpXG4gIH1cbiAgdmFyIGFyZ3MgPSBbXVxuICB2YXIgcHJvY0FyZ3MgPSBbXCJzbG93XCJdXG4gIGZvcih2YXIgaT0wOyBpPD1OVU1fRVhQQU5EOyArK2kpIHtcbiAgICBhcmdzLnB1c2goXCJhXCIgKyBpKVxuICAgIHByb2NBcmdzLnB1c2goXCJvXCIgKyBpKVxuICB9XG4gIHZhciBjb2RlID0gW1xuICAgIFwiZnVuY3Rpb24gZ2V0T3JpZW50YXRpb24oXCIsIGFyZ3Muam9pbigpLCBcIil7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpjYXNlIDE6cmV0dXJuIDA7XCJcbiAgXVxuICBmb3IodmFyIGk9MjsgaTw9TlVNX0VYUEFORDsgKytpKSB7XG4gICAgY29kZS5wdXNoKFwiY2FzZSBcIiwgaSwgXCI6cmV0dXJuIG9cIiwgaSwgXCIoXCIsIGFyZ3Muc2xpY2UoMCwgaSkuam9pbigpLCBcIik7XCIpXG4gIH1cbiAgY29kZS5wdXNoKFwifXZhciBzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7KytpKXtzW2ldPWFyZ3VtZW50c1tpXX07cmV0dXJuIHNsb3cocyk7fXJldHVybiBnZXRPcmllbnRhdGlvblwiKVxuICBwcm9jQXJncy5wdXNoKGNvZGUuam9pbihcIlwiKSlcblxuICB2YXIgcHJvYyA9IEZ1bmN0aW9uLmFwcGx5KHVuZGVmaW5lZCwgcHJvY0FyZ3MpXG4gIG1vZHVsZS5leHBvcnRzID0gcHJvYy5hcHBseSh1bmRlZmluZWQsIFtzbG93T3JpZW50XS5jb25jYXQoQ0FDSEVEKSlcbiAgZm9yKHZhciBpPTA7IGk8PU5VTV9FWFBBTkQ7ICsraSkge1xuICAgIG1vZHVsZS5leHBvcnRzW2ldID0gQ0FDSEVEW2ldXG4gIH1cbn1cblxuZ2VuZXJhdGVPcmllbnRhdGlvblByb2MoKSIsIi8qKlxuICogQml0IHR3aWRkbGluZyBoYWNrcyBmb3IgSmF2YVNjcmlwdC5cbiAqXG4gKiBBdXRob3I6IE1pa29sYSBMeXNlbmtvXG4gKlxuICogUG9ydGVkIGZyb20gU3RhbmZvcmQgYml0IHR3aWRkbGluZyBoYWNrIGxpYnJhcnk6XG4gKiAgICBodHRwOi8vZ3JhcGhpY3Muc3RhbmZvcmQuZWR1L35zZWFuZGVyL2JpdGhhY2tzLmh0bWxcbiAqL1xuXG5cbi8vTnVtYmVyIG9mIGJpdHMgaW4gYW4gaW50ZWdlclxudmFyIElOVF9CSVRTID0gMzI7XG5cbi8vQ29uc3RhbnRzXG5leHBvcnRzLklOVF9CSVRTICA9IElOVF9CSVRTO1xuZXhwb3J0cy5JTlRfTUFYICAgPSAgMHg3ZmZmZmZmZjtcbmV4cG9ydHMuSU5UX01JTiAgID0gLTE8PChJTlRfQklUUy0xKTtcblxuLy9SZXR1cm5zIC0xLCAwLCArMSBkZXBlbmRpbmcgb24gc2lnbiBvZiB4XG5leHBvcnRzLnNpZ24gPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiAodiA+IDApIC0gKHYgPCAwKTtcbn1cblxuLy9Db21wdXRlcyBhYnNvbHV0ZSB2YWx1ZSBvZiBpbnRlZ2VyXG5leHBvcnRzLmFicyA9IGZ1bmN0aW9uKHYpIHtcbiAgdmFyIG1hc2sgPSB2ID4+IChJTlRfQklUUy0xKTtcbiAgcmV0dXJuICh2IF4gbWFzaykgLSBtYXNrO1xufVxuXG4vL0NvbXB1dGVzIG1pbmltdW0gb2YgaW50ZWdlcnMgeCBhbmQgeVxuZXhwb3J0cy5taW4gPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiB5IF4gKCh4IF4geSkgJiAtKHggPCB5KSk7XG59XG5cbi8vQ29tcHV0ZXMgbWF4aW11bSBvZiBpbnRlZ2VycyB4IGFuZCB5XG5leHBvcnRzLm1heCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIHggXiAoKHggXiB5KSAmIC0oeCA8IHkpKTtcbn1cblxuLy9DaGVja3MgaWYgYSBudW1iZXIgaXMgYSBwb3dlciBvZiB0d29cbmV4cG9ydHMuaXNQb3cyID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gISh2ICYgKHYtMSkpICYmICghIXYpO1xufVxuXG4vL0NvbXB1dGVzIGxvZyBiYXNlIDIgb2YgdlxuZXhwb3J0cy5sb2cyID0gZnVuY3Rpb24odikge1xuICB2YXIgciwgc2hpZnQ7XG4gIHIgPSAgICAgKHYgPiAweEZGRkYpIDw8IDQ7IHYgPj4+PSByO1xuICBzaGlmdCA9ICh2ID4gMHhGRiAgKSA8PCAzOyB2ID4+Pj0gc2hpZnQ7IHIgfD0gc2hpZnQ7XG4gIHNoaWZ0ID0gKHYgPiAweEYgICApIDw8IDI7IHYgPj4+PSBzaGlmdDsgciB8PSBzaGlmdDtcbiAgc2hpZnQgPSAodiA+IDB4MyAgICkgPDwgMTsgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xuICByZXR1cm4gciB8ICh2ID4+IDEpO1xufVxuXG4vL0NvbXB1dGVzIGxvZyBiYXNlIDEwIG9mIHZcbmV4cG9ydHMubG9nMTAgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiAgKHYgPj0gMTAwMDAwMDAwMCkgPyA5IDogKHYgPj0gMTAwMDAwMDAwKSA/IDggOiAodiA+PSAxMDAwMDAwMCkgPyA3IDpcbiAgICAgICAgICAodiA+PSAxMDAwMDAwKSA/IDYgOiAodiA+PSAxMDAwMDApID8gNSA6ICh2ID49IDEwMDAwKSA/IDQgOlxuICAgICAgICAgICh2ID49IDEwMDApID8gMyA6ICh2ID49IDEwMCkgPyAyIDogKHYgPj0gMTApID8gMSA6IDA7XG59XG5cbi8vQ291bnRzIG51bWJlciBvZiBiaXRzXG5leHBvcnRzLnBvcENvdW50ID0gZnVuY3Rpb24odikge1xuICB2ID0gdiAtICgodiA+Pj4gMSkgJiAweDU1NTU1NTU1KTtcbiAgdiA9ICh2ICYgMHgzMzMzMzMzMykgKyAoKHYgPj4+IDIpICYgMHgzMzMzMzMzMyk7XG4gIHJldHVybiAoKHYgKyAodiA+Pj4gNCkgJiAweEYwRjBGMEYpICogMHgxMDEwMTAxKSA+Pj4gMjQ7XG59XG5cbi8vQ291bnRzIG51bWJlciBvZiB0cmFpbGluZyB6ZXJvc1xuZnVuY3Rpb24gY291bnRUcmFpbGluZ1plcm9zKHYpIHtcbiAgdmFyIGMgPSAzMjtcbiAgdiAmPSAtdjtcbiAgaWYgKHYpIGMtLTtcbiAgaWYgKHYgJiAweDAwMDBGRkZGKSBjIC09IDE2O1xuICBpZiAodiAmIDB4MDBGRjAwRkYpIGMgLT0gODtcbiAgaWYgKHYgJiAweDBGMEYwRjBGKSBjIC09IDQ7XG4gIGlmICh2ICYgMHgzMzMzMzMzMykgYyAtPSAyO1xuICBpZiAodiAmIDB4NTU1NTU1NTUpIGMgLT0gMTtcbiAgcmV0dXJuIGM7XG59XG5leHBvcnRzLmNvdW50VHJhaWxpbmdaZXJvcyA9IGNvdW50VHJhaWxpbmdaZXJvcztcblxuLy9Sb3VuZHMgdG8gbmV4dCBwb3dlciBvZiAyXG5leHBvcnRzLm5leHRQb3cyID0gZnVuY3Rpb24odikge1xuICB2ICs9IHYgPT09IDA7XG4gIC0tdjtcbiAgdiB8PSB2ID4+PiAxO1xuICB2IHw9IHYgPj4+IDI7XG4gIHYgfD0gdiA+Pj4gNDtcbiAgdiB8PSB2ID4+PiA4O1xuICB2IHw9IHYgPj4+IDE2O1xuICByZXR1cm4gdiArIDE7XG59XG5cbi8vUm91bmRzIGRvd24gdG8gcHJldmlvdXMgcG93ZXIgb2YgMlxuZXhwb3J0cy5wcmV2UG93MiA9IGZ1bmN0aW9uKHYpIHtcbiAgdiB8PSB2ID4+PiAxO1xuICB2IHw9IHYgPj4+IDI7XG4gIHYgfD0gdiA+Pj4gNDtcbiAgdiB8PSB2ID4+PiA4O1xuICB2IHw9IHYgPj4+IDE2O1xuICByZXR1cm4gdiAtICh2Pj4+MSk7XG59XG5cbi8vQ29tcHV0ZXMgcGFyaXR5IG9mIHdvcmRcbmV4cG9ydHMucGFyaXR5ID0gZnVuY3Rpb24odikge1xuICB2IF49IHYgPj4+IDE2O1xuICB2IF49IHYgPj4+IDg7XG4gIHYgXj0gdiA+Pj4gNDtcbiAgdiAmPSAweGY7XG4gIHJldHVybiAoMHg2OTk2ID4+PiB2KSAmIDE7XG59XG5cbnZhciBSRVZFUlNFX1RBQkxFID0gbmV3IEFycmF5KDI1Nik7XG5cbihmdW5jdGlvbih0YWIpIHtcbiAgZm9yKHZhciBpPTA7IGk8MjU2OyArK2kpIHtcbiAgICB2YXIgdiA9IGksIHIgPSBpLCBzID0gNztcbiAgICBmb3IgKHYgPj4+PSAxOyB2OyB2ID4+Pj0gMSkge1xuICAgICAgciA8PD0gMTtcbiAgICAgIHIgfD0gdiAmIDE7XG4gICAgICAtLXM7XG4gICAgfVxuICAgIHRhYltpXSA9IChyIDw8IHMpICYgMHhmZjtcbiAgfVxufSkoUkVWRVJTRV9UQUJMRSk7XG5cbi8vUmV2ZXJzZSBiaXRzIGluIGEgMzIgYml0IHdvcmRcbmV4cG9ydHMucmV2ZXJzZSA9IGZ1bmN0aW9uKHYpIHtcbiAgcmV0dXJuICAoUkVWRVJTRV9UQUJMRVsgdiAgICAgICAgICYgMHhmZl0gPDwgMjQpIHxcbiAgICAgICAgICAoUkVWRVJTRV9UQUJMRVsodiA+Pj4gOCkgICYgMHhmZl0gPDwgMTYpIHxcbiAgICAgICAgICAoUkVWRVJTRV9UQUJMRVsodiA+Pj4gMTYpICYgMHhmZl0gPDwgOCkgIHxcbiAgICAgICAgICAgUkVWRVJTRV9UQUJMRVsodiA+Pj4gMjQpICYgMHhmZl07XG59XG5cbi8vSW50ZXJsZWF2ZSBiaXRzIG9mIDIgY29vcmRpbmF0ZXMgd2l0aCAxNiBiaXRzLiAgVXNlZnVsIGZvciBmYXN0IHF1YWR0cmVlIGNvZGVzXG5leHBvcnRzLmludGVybGVhdmUyID0gZnVuY3Rpb24oeCwgeSkge1xuICB4ICY9IDB4RkZGRjtcbiAgeCA9ICh4IHwgKHggPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgeCA9ICh4IHwgKHggPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgeCA9ICh4IHwgKHggPDwgMikpICYgMHgzMzMzMzMzMztcbiAgeCA9ICh4IHwgKHggPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICB5ICY9IDB4RkZGRjtcbiAgeSA9ICh5IHwgKHkgPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgeSA9ICh5IHwgKHkgPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgeSA9ICh5IHwgKHkgPDwgMikpICYgMHgzMzMzMzMzMztcbiAgeSA9ICh5IHwgKHkgPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICByZXR1cm4geCB8ICh5IDw8IDEpO1xufVxuXG4vL0V4dHJhY3RzIHRoZSBudGggaW50ZXJsZWF2ZWQgY29tcG9uZW50XG5leHBvcnRzLmRlaW50ZXJsZWF2ZTIgPSBmdW5jdGlvbih2LCBuKSB7XG4gIHYgPSAodiA+Pj4gbikgJiAweDU1NTU1NTU1O1xuICB2ID0gKHYgfCAodiA+Pj4gMSkpICAmIDB4MzMzMzMzMzM7XG4gIHYgPSAodiB8ICh2ID4+PiAyKSkgICYgMHgwRjBGMEYwRjtcbiAgdiA9ICh2IHwgKHYgPj4+IDQpKSAgJiAweDAwRkYwMEZGO1xuICB2ID0gKHYgfCAodiA+Pj4gMTYpKSAmIDB4MDAwRkZGRjtcbiAgcmV0dXJuICh2IDw8IDE2KSA+PiAxNjtcbn1cblxuXG4vL0ludGVybGVhdmUgYml0cyBvZiAzIGNvb3JkaW5hdGVzLCBlYWNoIHdpdGggMTAgYml0cy4gIFVzZWZ1bCBmb3IgZmFzdCBvY3RyZWUgY29kZXNcbmV4cG9ydHMuaW50ZXJsZWF2ZTMgPSBmdW5jdGlvbih4LCB5LCB6KSB7XG4gIHggJj0gMHgzRkY7XG4gIHggID0gKHggfCAoeDw8MTYpKSAmIDQyNzgxOTAzMzU7XG4gIHggID0gKHggfCAoeDw8OCkpICAmIDI1MTcxOTY5NTtcbiAgeCAgPSAoeCB8ICh4PDw0KSkgICYgMzI3MjM1NjAzNTtcbiAgeCAgPSAoeCB8ICh4PDwyKSkgICYgMTIyNzEzMzUxMztcblxuICB5ICY9IDB4M0ZGO1xuICB5ICA9ICh5IHwgKHk8PDE2KSkgJiA0Mjc4MTkwMzM1O1xuICB5ICA9ICh5IHwgKHk8PDgpKSAgJiAyNTE3MTk2OTU7XG4gIHkgID0gKHkgfCAoeTw8NCkpICAmIDMyNzIzNTYwMzU7XG4gIHkgID0gKHkgfCAoeTw8MikpICAmIDEyMjcxMzM1MTM7XG4gIHggfD0gKHkgPDwgMSk7XG4gIFxuICB6ICY9IDB4M0ZGO1xuICB6ICA9ICh6IHwgKHo8PDE2KSkgJiA0Mjc4MTkwMzM1O1xuICB6ICA9ICh6IHwgKHo8PDgpKSAgJiAyNTE3MTk2OTU7XG4gIHogID0gKHogfCAoejw8NCkpICAmIDMyNzIzNTYwMzU7XG4gIHogID0gKHogfCAoejw8MikpICAmIDEyMjcxMzM1MTM7XG4gIFxuICByZXR1cm4geCB8ICh6IDw8IDIpO1xufVxuXG4vL0V4dHJhY3RzIG50aCBpbnRlcmxlYXZlZCBjb21wb25lbnQgb2YgYSAzLXR1cGxlXG5leHBvcnRzLmRlaW50ZXJsZWF2ZTMgPSBmdW5jdGlvbih2LCBuKSB7XG4gIHYgPSAodiA+Pj4gbikgICAgICAgJiAxMjI3MTMzNTEzO1xuICB2ID0gKHYgfCAodj4+PjIpKSAgICYgMzI3MjM1NjAzNTtcbiAgdiA9ICh2IHwgKHY+Pj40KSkgICAmIDI1MTcxOTY5NTtcbiAgdiA9ICh2IHwgKHY+Pj44KSkgICAmIDQyNzgxOTAzMzU7XG4gIHYgPSAodiB8ICh2Pj4+MTYpKSAgJiAweDNGRjtcbiAgcmV0dXJuICh2PDwyMik+PjIyO1xufVxuXG4vL0NvbXB1dGVzIG5leHQgY29tYmluYXRpb24gaW4gY29sZXhpY29ncmFwaGljIG9yZGVyICh0aGlzIGlzIG1pc3Rha2VubHkgY2FsbGVkIG5leHRQZXJtdXRhdGlvbiBvbiB0aGUgYml0IHR3aWRkbGluZyBoYWNrcyBwYWdlKVxuZXhwb3J0cy5uZXh0Q29tYmluYXRpb24gPSBmdW5jdGlvbih2KSB7XG4gIHZhciB0ID0gdiB8ICh2IC0gMSk7XG4gIHJldHVybiAodCArIDEpIHwgKCgofnQgJiAtfnQpIC0gMSkgPj4+IChjb3VudFRyYWlsaW5nWmVyb3ModikgKyAxKSk7XG59XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gVW5pb25GaW5kO1xuXG5mdW5jdGlvbiBVbmlvbkZpbmQoY291bnQpIHtcbiAgdGhpcy5yb290cyA9IG5ldyBBcnJheShjb3VudCk7XG4gIHRoaXMucmFua3MgPSBuZXcgQXJyYXkoY291bnQpO1xuICBcbiAgZm9yKHZhciBpPTA7IGk8Y291bnQ7ICsraSkge1xuICAgIHRoaXMucm9vdHNbaV0gPSBpO1xuICAgIHRoaXMucmFua3NbaV0gPSAwO1xuICB9XG59XG5cbnZhciBwcm90byA9IFVuaW9uRmluZC5wcm90b3R5cGVcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBcImxlbmd0aFwiLCB7XG4gIFwiZ2V0XCI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJvb3RzLmxlbmd0aFxuICB9XG59KVxuXG5wcm90by5tYWtlU2V0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBuID0gdGhpcy5yb290cy5sZW5ndGg7XG4gIHRoaXMucm9vdHMucHVzaChuKTtcbiAgdGhpcy5yYW5rcy5wdXNoKDApO1xuICByZXR1cm4gbjtcbn1cblxucHJvdG8uZmluZCA9IGZ1bmN0aW9uKHgpIHtcbiAgdmFyIHgwID0geFxuICB2YXIgcm9vdHMgPSB0aGlzLnJvb3RzO1xuICB3aGlsZShyb290c1t4XSAhPT0geCkge1xuICAgIHggPSByb290c1t4XVxuICB9XG4gIHdoaWxlKHJvb3RzW3gwXSAhPT0geCkge1xuICAgIHZhciB5ID0gcm9vdHNbeDBdXG4gICAgcm9vdHNbeDBdID0geFxuICAgIHgwID0geVxuICB9XG4gIHJldHVybiB4O1xufVxuXG5wcm90by5saW5rID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgeHIgPSB0aGlzLmZpbmQoeClcbiAgICAsIHlyID0gdGhpcy5maW5kKHkpO1xuICBpZih4ciA9PT0geXIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHJhbmtzID0gdGhpcy5yYW5rc1xuICAgICwgcm9vdHMgPSB0aGlzLnJvb3RzXG4gICAgLCB4ZCAgICA9IHJhbmtzW3hyXVxuICAgICwgeWQgICAgPSByYW5rc1t5cl07XG4gIGlmKHhkIDwgeWQpIHtcbiAgICByb290c1t4cl0gPSB5cjtcbiAgfSBlbHNlIGlmKHlkIDwgeGQpIHtcbiAgICByb290c1t5cl0gPSB4cjtcbiAgfSBlbHNlIHtcbiAgICByb290c1t5cl0gPSB4cjtcbiAgICArK3JhbmtzW3hyXTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiOyBcInVzZSByZXN0cmljdFwiO1xuXG52YXIgYml0cyAgICAgID0gcmVxdWlyZShcImJpdC10d2lkZGxlXCIpXG4gICwgVW5pb25GaW5kID0gcmVxdWlyZShcInVuaW9uLWZpbmRcIilcblxuLy9SZXR1cm5zIHRoZSBkaW1lbnNpb24gb2YgYSBjZWxsIGNvbXBsZXhcbmZ1bmN0aW9uIGRpbWVuc2lvbihjZWxscykge1xuICB2YXIgZCA9IDBcbiAgICAsIG1heCA9IE1hdGgubWF4XG4gIGZvcih2YXIgaT0wLCBpbD1jZWxscy5sZW5ndGg7IGk8aWw7ICsraSkge1xuICAgIGQgPSBtYXgoZCwgY2VsbHNbaV0ubGVuZ3RoKVxuICB9XG4gIHJldHVybiBkLTFcbn1cbmV4cG9ydHMuZGltZW5zaW9uID0gZGltZW5zaW9uXG5cbi8vQ291bnRzIHRoZSBudW1iZXIgb2YgdmVydGljZXMgaW4gZmFjZXNcbmZ1bmN0aW9uIGNvdW50VmVydGljZXMoY2VsbHMpIHtcbiAgdmFyIHZjID0gLTFcbiAgICAsIG1heCA9IE1hdGgubWF4XG4gIGZvcih2YXIgaT0wLCBpbD1jZWxscy5sZW5ndGg7IGk8aWw7ICsraSkge1xuICAgIHZhciBjID0gY2VsbHNbaV1cbiAgICBmb3IodmFyIGo9MCwgamw9Yy5sZW5ndGg7IGo8amw7ICsraikge1xuICAgICAgdmMgPSBtYXgodmMsIGNbal0pXG4gICAgfVxuICB9XG4gIHJldHVybiB2YysxXG59XG5leHBvcnRzLmNvdW50VmVydGljZXMgPSBjb3VudFZlcnRpY2VzXG5cbi8vUmV0dXJucyBhIGRlZXAgY29weSBvZiBjZWxsc1xuZnVuY3Rpb24gY2xvbmVDZWxscyhjZWxscykge1xuICB2YXIgbmNlbGxzID0gbmV3IEFycmF5KGNlbGxzLmxlbmd0aClcbiAgZm9yKHZhciBpPTAsIGlsPWNlbGxzLmxlbmd0aDsgaTxpbDsgKytpKSB7XG4gICAgbmNlbGxzW2ldID0gY2VsbHNbaV0uc2xpY2UoMClcbiAgfVxuICByZXR1cm4gbmNlbGxzXG59XG5leHBvcnRzLmNsb25lQ2VsbHMgPSBjbG9uZUNlbGxzXG5cbi8vUmFua3MgYSBwYWlyIG9mIGNlbGxzIHVwIHRvIHBlcm11dGF0aW9uXG5mdW5jdGlvbiBjb21wYXJlQ2VsbHMoYSwgYikge1xuICB2YXIgbiA9IGEubGVuZ3RoXG4gICAgLCB0ID0gYS5sZW5ndGggLSBiLmxlbmd0aFxuICAgICwgbWluID0gTWF0aC5taW5cbiAgaWYodCkge1xuICAgIHJldHVybiB0XG4gIH1cbiAgc3dpdGNoKG4pIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gYVswXSAtIGJbMF07XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIGQgPSBhWzBdK2FbMV0tYlswXS1iWzFdXG4gICAgICBpZihkKSB7XG4gICAgICAgIHJldHVybiBkXG4gICAgICB9XG4gICAgICByZXR1cm4gbWluKGFbMF0sYVsxXSkgLSBtaW4oYlswXSxiWzFdKVxuICAgIGNhc2UgMzpcbiAgICAgIHZhciBsMSA9IGFbMF0rYVsxXVxuICAgICAgICAsIG0xID0gYlswXStiWzFdXG4gICAgICBkID0gbDErYVsyXSAtIChtMStiWzJdKVxuICAgICAgaWYoZCkge1xuICAgICAgICByZXR1cm4gZFxuICAgICAgfVxuICAgICAgdmFyIGwwID0gbWluKGFbMF0sIGFbMV0pXG4gICAgICAgICwgbTAgPSBtaW4oYlswXSwgYlsxXSlcbiAgICAgICAgLCBkICA9IG1pbihsMCwgYVsyXSkgLSBtaW4obTAsIGJbMl0pXG4gICAgICBpZihkKSB7XG4gICAgICAgIHJldHVybiBkXG4gICAgICB9XG4gICAgICByZXR1cm4gbWluKGwwK2FbMl0sIGwxKSAtIG1pbihtMCtiWzJdLCBtMSlcbiAgICBcbiAgICAvL1RPRE86IE1heWJlIG9wdGltaXplIG49NCBhcyB3ZWxsP1xuICAgIFxuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgYXMgPSBhLnNsaWNlKDApXG4gICAgICBhcy5zb3J0KClcbiAgICAgIHZhciBicyA9IGIuc2xpY2UoMClcbiAgICAgIGJzLnNvcnQoKVxuICAgICAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgICAgIHQgPSBhc1tpXSAtIGJzW2ldXG4gICAgICAgIGlmKHQpIHtcbiAgICAgICAgICByZXR1cm4gdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMFxuICB9XG59XG5leHBvcnRzLmNvbXBhcmVDZWxscyA9IGNvbXBhcmVDZWxsc1xuXG5mdW5jdGlvbiBjb21wYXJlWmlwcGVkKGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVDZWxscyhhWzBdLCBiWzBdKVxufVxuXG4vL1B1dHMgYSBjZWxsIGNvbXBsZXggaW50byBub3JtYWwgb3JkZXIgZm9yIHRoZSBwdXJwb3NlcyBvZiBmaW5kQ2VsbCBxdWVyaWVzXG5mdW5jdGlvbiBub3JtYWxpemUoY2VsbHMsIGF0dHIpIHtcbiAgaWYoYXR0cikge1xuICAgIHZhciBsZW4gPSBjZWxscy5sZW5ndGhcbiAgICB2YXIgemlwcGVkID0gbmV3IEFycmF5KGxlbilcbiAgICBmb3IodmFyIGk9MDsgaTxsZW47ICsraSkge1xuICAgICAgemlwcGVkW2ldID0gW2NlbGxzW2ldLCBhdHRyW2ldXVxuICAgIH1cbiAgICB6aXBwZWQuc29ydChjb21wYXJlWmlwcGVkKVxuICAgIGZvcih2YXIgaT0wOyBpPGxlbjsgKytpKSB7XG4gICAgICBjZWxsc1tpXSA9IHppcHBlZFtpXVswXVxuICAgICAgYXR0cltpXSA9IHppcHBlZFtpXVsxXVxuICAgIH1cbiAgICByZXR1cm4gY2VsbHNcbiAgfSBlbHNlIHtcbiAgICBjZWxscy5zb3J0KGNvbXBhcmVDZWxscylcbiAgICByZXR1cm4gY2VsbHNcbiAgfVxufVxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemVcblxuLy9SZW1vdmVzIGFsbCBkdXBsaWNhdGUgY2VsbHMgaW4gdGhlIGNvbXBsZXhcbmZ1bmN0aW9uIHVuaXF1ZShjZWxscykge1xuICBpZihjZWxscy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICB2YXIgcHRyID0gMVxuICAgICwgbGVuID0gY2VsbHMubGVuZ3RoXG4gIGZvcih2YXIgaT0xOyBpPGxlbjsgKytpKSB7XG4gICAgdmFyIGEgPSBjZWxsc1tpXVxuICAgIGlmKGNvbXBhcmVDZWxscyhhLCBjZWxsc1tpLTFdKSkge1xuICAgICAgaWYoaSA9PT0gcHRyKSB7XG4gICAgICAgIHB0cisrXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBjZWxsc1twdHIrK10gPSBhXG4gICAgfVxuICB9XG4gIGNlbGxzLmxlbmd0aCA9IHB0clxuICByZXR1cm4gY2VsbHNcbn1cbmV4cG9ydHMudW5pcXVlID0gdW5pcXVlO1xuXG4vL0ZpbmRzIGEgY2VsbCBpbiBhIG5vcm1hbGl6ZWQgY2VsbCBjb21wbGV4XG5mdW5jdGlvbiBmaW5kQ2VsbChjZWxscywgYykge1xuICB2YXIgbG8gPSAwXG4gICAgLCBoaSA9IGNlbGxzLmxlbmd0aC0xXG4gICAgLCByICA9IC0xXG4gIHdoaWxlIChsbyA8PSBoaSkge1xuICAgIHZhciBtaWQgPSAobG8gKyBoaSkgPj4gMVxuICAgICAgLCBzICAgPSBjb21wYXJlQ2VsbHMoY2VsbHNbbWlkXSwgYylcbiAgICBpZihzIDw9IDApIHtcbiAgICAgIGlmKHMgPT09IDApIHtcbiAgICAgICAgciA9IG1pZFxuICAgICAgfVxuICAgICAgbG8gPSBtaWQgKyAxXG4gICAgfSBlbHNlIGlmKHMgPiAwKSB7XG4gICAgICBoaSA9IG1pZCAtIDFcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJcbn1cbmV4cG9ydHMuZmluZENlbGwgPSBmaW5kQ2VsbDtcblxuLy9CdWlsZHMgYW4gaW5kZXggZm9yIGFuIG4tY2VsbC4gIFRoaXMgaXMgbW9yZSBnZW5lcmFsIHRoYW4gZHVhbCwgYnV0IGxlc3MgZWZmaWNpZW50XG5mdW5jdGlvbiBpbmNpZGVuY2UoZnJvbV9jZWxscywgdG9fY2VsbHMpIHtcbiAgdmFyIGluZGV4ID0gbmV3IEFycmF5KGZyb21fY2VsbHMubGVuZ3RoKVxuICBmb3IodmFyIGk9MCwgaWw9aW5kZXgubGVuZ3RoOyBpPGlsOyArK2kpIHtcbiAgICBpbmRleFtpXSA9IFtdXG4gIH1cbiAgdmFyIGIgPSBbXVxuICBmb3IodmFyIGk9MCwgbj10b19jZWxscy5sZW5ndGg7IGk8bjsgKytpKSB7XG4gICAgdmFyIGMgPSB0b19jZWxsc1tpXVxuICAgIHZhciBjbCA9IGMubGVuZ3RoXG4gICAgZm9yKHZhciBrPTEsIGtuPSgxPDxjbCk7IGs8a247ICsraykge1xuICAgICAgYi5sZW5ndGggPSBiaXRzLnBvcENvdW50KGspXG4gICAgICB2YXIgbCA9IDBcbiAgICAgIGZvcih2YXIgaj0wOyBqPGNsOyArK2opIHtcbiAgICAgICAgaWYoayAmICgxPDxqKSkge1xuICAgICAgICAgIGJbbCsrXSA9IGNbal1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGlkeD1maW5kQ2VsbChmcm9tX2NlbGxzLCBiKVxuICAgICAgaWYoaWR4IDwgMCkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICBpbmRleFtpZHgrK10ucHVzaChpKVxuICAgICAgICBpZihpZHggPj0gZnJvbV9jZWxscy5sZW5ndGggfHwgY29tcGFyZUNlbGxzKGZyb21fY2VsbHNbaWR4XSwgYikgIT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmRleFxufVxuZXhwb3J0cy5pbmNpZGVuY2UgPSBpbmNpZGVuY2VcblxuLy9Db21wdXRlcyB0aGUgZHVhbCBvZiB0aGUgbWVzaC4gIFRoaXMgaXMgYmFzaWNhbGx5IGFuIG9wdGltaXplZCB2ZXJzaW9uIG9mIGJ1aWxkSW5kZXggZm9yIHRoZSBzaXR1YXRpb24gd2hlcmUgZnJvbV9jZWxscyBpcyBqdXN0IHRoZSBsaXN0IG9mIHZlcnRpY2VzXG5mdW5jdGlvbiBkdWFsKGNlbGxzLCB2ZXJ0ZXhfY291bnQpIHtcbiAgaWYoIXZlcnRleF9jb3VudCkge1xuICAgIHJldHVybiBpbmNpZGVuY2UodW5pcXVlKHNrZWxldG9uKGNlbGxzLCAwKSksIGNlbGxzLCAwKVxuICB9XG4gIHZhciByZXMgPSBuZXcgQXJyYXkodmVydGV4X2NvdW50KVxuICBmb3IodmFyIGk9MDsgaTx2ZXJ0ZXhfY291bnQ7ICsraSkge1xuICAgIHJlc1tpXSA9IFtdXG4gIH1cbiAgZm9yKHZhciBpPTAsIGxlbj1jZWxscy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICB2YXIgYyA9IGNlbGxzW2ldXG4gICAgZm9yKHZhciBqPTAsIGNsPWMubGVuZ3RoOyBqPGNsOyArK2opIHtcbiAgICAgIHJlc1tjW2pdXS5wdXNoKGkpXG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cbmV4cG9ydHMuZHVhbCA9IGR1YWxcblxuLy9FbnVtZXJhdGVzIGFsbCBjZWxscyBpbiB0aGUgY29tcGxleFxuZnVuY3Rpb24gZXhwbG9kZShjZWxscykge1xuICB2YXIgcmVzdWx0ID0gW11cbiAgZm9yKHZhciBpPTAsIGlsPWNlbGxzLmxlbmd0aDsgaTxpbDsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgICAgLCBjbCA9IGMubGVuZ3RofDBcbiAgICBmb3IodmFyIGo9MSwgamw9KDE8PGNsKTsgajxqbDsgKytqKSB7XG4gICAgICB2YXIgYiA9IFtdXG4gICAgICBmb3IodmFyIGs9MDsgazxjbDsgKytrKSB7XG4gICAgICAgIGlmKChqID4+PiBrKSAmIDEpIHtcbiAgICAgICAgICBiLnB1c2goY1trXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2goYilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZShyZXN1bHQpXG59XG5leHBvcnRzLmV4cGxvZGUgPSBleHBsb2RlXG5cbi8vRW51bWVyYXRlcyBhbGwgb2YgdGhlIG4tY2VsbHMgb2YgYSBjZWxsIGNvbXBsZXhcbmZ1bmN0aW9uIHNrZWxldG9uKGNlbGxzLCBuKSB7XG4gIGlmKG4gPCAwKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdXG4gICAgLCBrMCAgICAgPSAoMTw8KG4rMSkpLTFcbiAgZm9yKHZhciBpPTA7IGk8Y2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYyA9IGNlbGxzW2ldXG4gICAgZm9yKHZhciBrPWswOyBrPCgxPDxjLmxlbmd0aCk7IGs9Yml0cy5uZXh0Q29tYmluYXRpb24oaykpIHtcbiAgICAgIHZhciBiID0gbmV3IEFycmF5KG4rMSlcbiAgICAgICAgLCBsID0gMFxuICAgICAgZm9yKHZhciBqPTA7IGo8Yy5sZW5ndGg7ICsraikge1xuICAgICAgICBpZihrICYgKDE8PGopKSB7XG4gICAgICAgICAgYltsKytdID0gY1tqXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaChiKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbm9ybWFsaXplKHJlc3VsdClcbn1cbmV4cG9ydHMuc2tlbGV0b24gPSBza2VsZXRvbjtcblxuLy9Db21wdXRlcyB0aGUgYm91bmRhcnkgb2YgYWxsIGNlbGxzLCBkb2VzIG5vdCByZW1vdmUgZHVwbGljYXRlc1xuZnVuY3Rpb24gYm91bmRhcnkoY2VsbHMpIHtcbiAgdmFyIHJlcyA9IFtdXG4gIGZvcih2YXIgaT0wLGlsPWNlbGxzLmxlbmd0aDsgaTxpbDsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgIGZvcih2YXIgaj0wLGNsPWMubGVuZ3RoOyBqPGNsOyArK2opIHtcbiAgICAgIHZhciBiID0gbmV3IEFycmF5KGMubGVuZ3RoLTEpXG4gICAgICBmb3IodmFyIGs9MCwgbD0wOyBrPGNsOyArK2spIHtcbiAgICAgICAgaWYoayAhPT0gaikge1xuICAgICAgICAgIGJbbCsrXSA9IGNba11cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzLnB1c2goYilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZShyZXMpXG59XG5leHBvcnRzLmJvdW5kYXJ5ID0gYm91bmRhcnk7XG5cbi8vQ29tcHV0ZXMgY29ubmVjdGVkIGNvbXBvbmVudHMgZm9yIGEgZGVuc2UgY2VsbCBjb21wbGV4XG5mdW5jdGlvbiBjb25uZWN0ZWRDb21wb25lbnRzX2RlbnNlKGNlbGxzLCB2ZXJ0ZXhfY291bnQpIHtcbiAgdmFyIGxhYmVscyA9IG5ldyBVbmlvbkZpbmQodmVydGV4X2NvdW50KVxuICBmb3IodmFyIGk9MDsgaTxjZWxscy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBjID0gY2VsbHNbaV1cbiAgICBmb3IodmFyIGo9MDsgajxjLmxlbmd0aDsgKytqKSB7XG4gICAgICBmb3IodmFyIGs9aisxOyBrPGMubGVuZ3RoOyArK2spIHtcbiAgICAgICAgbGFiZWxzLmxpbmsoY1tqXSwgY1trXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIGNvbXBvbmVudHMgPSBbXVxuICAgICwgY29tcG9uZW50X2xhYmVscyA9IGxhYmVscy5yYW5rc1xuICBmb3IodmFyIGk9MDsgaTxjb21wb25lbnRfbGFiZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgY29tcG9uZW50X2xhYmVsc1tpXSA9IC0xXG4gIH1cbiAgZm9yKHZhciBpPTA7IGk8Y2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgbCA9IGxhYmVscy5maW5kKGNlbGxzW2ldWzBdKVxuICAgIGlmKGNvbXBvbmVudF9sYWJlbHNbbF0gPCAwKSB7XG4gICAgICBjb21wb25lbnRfbGFiZWxzW2xdID0gY29tcG9uZW50cy5sZW5ndGhcbiAgICAgIGNvbXBvbmVudHMucHVzaChbY2VsbHNbaV0uc2xpY2UoMCldKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnRzW2NvbXBvbmVudF9sYWJlbHNbbF1dLnB1c2goY2VsbHNbaV0uc2xpY2UoMCkpXG4gICAgfVxuICB9XG4gIHJldHVybiBjb21wb25lbnRzXG59XG5cbi8vQ29tcHV0ZXMgY29ubmVjdGVkIGNvbXBvbmVudHMgZm9yIGEgc3BhcnNlIGdyYXBoXG5mdW5jdGlvbiBjb25uZWN0ZWRDb21wb25lbnRzX3NwYXJzZShjZWxscykge1xuICB2YXIgdmVydGljZXMgID0gdW5pcXVlKG5vcm1hbGl6ZShza2VsZXRvbihjZWxscywgMCkpKVxuICAgICwgbGFiZWxzICAgID0gbmV3IFVuaW9uRmluZCh2ZXJ0aWNlcy5sZW5ndGgpXG4gIGZvcih2YXIgaT0wOyBpPGNlbGxzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgIGZvcih2YXIgaj0wOyBqPGMubGVuZ3RoOyArK2opIHtcbiAgICAgIHZhciB2aiA9IGZpbmRDZWxsKHZlcnRpY2VzLCBbY1tqXV0pXG4gICAgICBmb3IodmFyIGs9aisxOyBrPGMubGVuZ3RoOyArK2spIHtcbiAgICAgICAgbGFiZWxzLmxpbmsodmosIGZpbmRDZWxsKHZlcnRpY2VzLCBbY1trXV0pKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgY29tcG9uZW50cyAgICAgICAgPSBbXVxuICAgICwgY29tcG9uZW50X2xhYmVscyAgPSBsYWJlbHMucmFua3NcbiAgZm9yKHZhciBpPTA7IGk8Y29tcG9uZW50X2xhYmVscy5sZW5ndGg7ICsraSkge1xuICAgIGNvbXBvbmVudF9sYWJlbHNbaV0gPSAtMVxuICB9XG4gIGZvcih2YXIgaT0wOyBpPGNlbGxzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGwgPSBsYWJlbHMuZmluZChmaW5kQ2VsbCh2ZXJ0aWNlcywgW2NlbGxzW2ldWzBdXSkpO1xuICAgIGlmKGNvbXBvbmVudF9sYWJlbHNbbF0gPCAwKSB7XG4gICAgICBjb21wb25lbnRfbGFiZWxzW2xdID0gY29tcG9uZW50cy5sZW5ndGhcbiAgICAgIGNvbXBvbmVudHMucHVzaChbY2VsbHNbaV0uc2xpY2UoMCldKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnRzW2NvbXBvbmVudF9sYWJlbHNbbF1dLnB1c2goY2VsbHNbaV0uc2xpY2UoMCkpXG4gICAgfVxuICB9XG4gIHJldHVybiBjb21wb25lbnRzXG59XG5cbi8vQ29tcHV0ZXMgY29ubmVjdGVkIGNvbXBvbmVudHMgZm9yIGEgY2VsbCBjb21wbGV4XG5mdW5jdGlvbiBjb25uZWN0ZWRDb21wb25lbnRzKGNlbGxzLCB2ZXJ0ZXhfY291bnQpIHtcbiAgaWYodmVydGV4X2NvdW50KSB7XG4gICAgcmV0dXJuIGNvbm5lY3RlZENvbXBvbmVudHNfZGVuc2UoY2VsbHMsIHZlcnRleF9jb3VudClcbiAgfVxuICByZXR1cm4gY29ubmVjdGVkQ29tcG9uZW50c19zcGFyc2UoY2VsbHMpXG59XG5leHBvcnRzLmNvbm5lY3RlZENvbXBvbmVudHMgPSBjb25uZWN0ZWRDb21wb25lbnRzXG4iLCJcInVzZSBzdHJpY3RcIlxuXG4vL0hpZ2ggbGV2ZWwgaWRlYTpcbi8vIDEuIFVzZSBDbGFya3NvbidzIGluY3JlbWVudGFsIGNvbnN0cnVjdGlvbiB0byBmaW5kIGNvbnZleCBodWxsXG4vLyAyLiBQb2ludCBsb2NhdGlvbiBpbiB0cmlhbmd1bGF0aW9uIGJ5IGp1bXAgYW5kIHdhbGtcblxubW9kdWxlLmV4cG9ydHMgPSBpbmNyZW1lbnRhbENvbnZleEh1bGxcblxudmFyIG9yaWVudCA9IHJlcXVpcmUoXCJyb2J1c3Qtb3JpZW50YXRpb25cIilcbnZhciBjb21wYXJlQ2VsbCA9IHJlcXVpcmUoXCJzaW1wbGljaWFsLWNvbXBsZXhcIikuY29tcGFyZUNlbGxzXG5cbmZ1bmN0aW9uIGNvbXBhcmVJbnQoYSwgYikge1xuICByZXR1cm4gYSAtIGJcbn1cblxuZnVuY3Rpb24gU2ltcGxleCh2ZXJ0aWNlcywgYWRqYWNlbnQsIGJvdW5kYXJ5KSB7XG4gIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlc1xuICB0aGlzLmFkamFjZW50ID0gYWRqYWNlbnRcbiAgdGhpcy5ib3VuZGFyeSA9IGJvdW5kYXJ5XG4gIHRoaXMubGFzdFZpc2l0ZWQgPSAtMVxufVxuXG5TaW1wbGV4LnByb3RvdHlwZS5mbGlwID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gdGhpcy52ZXJ0aWNlc1swXVxuICB0aGlzLnZlcnRpY2VzWzBdID0gdGhpcy52ZXJ0aWNlc1sxXVxuICB0aGlzLnZlcnRpY2VzWzFdID0gdFxuICB2YXIgdSA9IHRoaXMuYWRqYWNlbnRbMF1cbiAgdGhpcy5hZGphY2VudFswXSA9IHRoaXMuYWRqYWNlbnRbMV1cbiAgdGhpcy5hZGphY2VudFsxXSA9IHVcbn1cblxuZnVuY3Rpb24gR2x1ZUZhY2V0KHZlcnRpY2VzLCBjZWxsLCBpbmRleCkge1xuICB0aGlzLnZlcnRpY2VzID0gdmVydGljZXNcbiAgdGhpcy5jZWxsID0gY2VsbFxuICB0aGlzLmluZGV4ID0gaW5kZXhcbn1cblxuZnVuY3Rpb24gY29tcGFyZUdsdWUoYSwgYikge1xuICByZXR1cm4gY29tcGFyZUNlbGwoYS52ZXJ0aWNlcywgYi52ZXJ0aWNlcylcbn1cblxuZnVuY3Rpb24gYmFrZU9yaWVudChkKSB7XG4gIHZhciBjb2RlID0gW1wiZnVuY3Rpb24gb3JpZW50KCl7dmFyIHR1cGxlPXRoaXMudHVwbGU7cmV0dXJuIHRlc3QoXCJdXG4gIGZvcih2YXIgaT0wOyBpPD1kOyArK2kpIHtcbiAgICBpZihpID4gMCkge1xuICAgICAgY29kZS5wdXNoKFwiLFwiKVxuICAgIH1cbiAgICBjb2RlLnB1c2goXCJ0dXBsZVtcIiwgaSwgXCJdXCIpXG4gIH1cbiAgY29kZS5wdXNoKFwiKX1yZXR1cm4gb3JpZW50XCIpXG4gIHZhciBwcm9jID0gbmV3IEZ1bmN0aW9uKFwidGVzdFwiLCBjb2RlLmpvaW4oXCJcIikpXG4gIHZhciB0ZXN0ID0gb3JpZW50W2QrMV1cbiAgaWYoIXRlc3QpIHtcbiAgICB0ZXN0ID0gb3JpZW50XG4gIH1cbiAgcmV0dXJuIHByb2ModGVzdClcbn1cblxudmFyIEJBS0VEID0gW11cblxuZnVuY3Rpb24gVHJpYW5ndWxhdGlvbihkaW1lbnNpb24sIHZlcnRpY2VzLCBzaW1wbGljZXMpIHtcbiAgdGhpcy5kaW1lbnNpb24gPSBkaW1lbnNpb25cbiAgdGhpcy52ZXJ0aWNlcyA9IHZlcnRpY2VzXG4gIHRoaXMuc2ltcGxpY2VzID0gc2ltcGxpY2VzXG4gIHRoaXMuaW50ZXJpb3IgPSBzaW1wbGljZXMuZmlsdGVyKGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gIWMuYm91bmRhcnlcbiAgfSlcblxuICB0aGlzLnR1cGxlID0gbmV3IEFycmF5KGRpbWVuc2lvbisxKVxuICBmb3IodmFyIGk9MDsgaTw9ZGltZW5zaW9uOyArK2kpIHtcbiAgICB0aGlzLnR1cGxlW2ldID0gdGhpcy52ZXJ0aWNlc1tpXVxuICB9XG5cbiAgdmFyIG8gPSBCQUtFRFtkaW1lbnNpb25dXG4gIGlmKCFvKSB7XG4gICAgbyA9IEJBS0VEW2RpbWVuc2lvbl0gPSBiYWtlT3JpZW50KGRpbWVuc2lvbilcbiAgfVxuICB0aGlzLm9yaWVudCA9IG9cbn1cblxudmFyIHByb3RvID0gVHJpYW5ndWxhdGlvbi5wcm90b3R5cGVcblxuLy9EZWdlbmVyYXRlIHNpdHVhdGlvbiB3aGVyZSB3ZSBhcmUgb24gYm91bmRhcnksIGJ1dCBjb3BsYW5hciB0byBmYWNlXG5wcm90by5oYW5kbGVCb3VuZGFyeURlZ2VuZXJhY3kgPSBmdW5jdGlvbihjZWxsLCBwb2ludCkge1xuICB2YXIgZCA9IHRoaXMuZGltZW5zaW9uXG4gIHZhciBuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGggLSAxXG4gIHZhciB0dXBsZSA9IHRoaXMudHVwbGVcbiAgdmFyIHZlcnRzID0gdGhpcy52ZXJ0aWNlc1xuXG4gIC8vRHVtYiBzb2x1dGlvbjogSnVzdCBkbyBkZnMgZnJvbSBib3VuZGFyeSBjZWxsIHVudGlsIHdlIGZpbmQgYW55IHBlYWssIG9yIHRlcm1pbmF0ZVxuICB2YXIgdG9WaXNpdCA9IFsgY2VsbCBdXG4gIGNlbGwubGFzdFZpc2l0ZWQgPSAtblxuICB3aGlsZSh0b1Zpc2l0Lmxlbmd0aCA+IDApIHtcbiAgICBjZWxsID0gdG9WaXNpdC5wb3AoKVxuICAgIHZhciBjZWxsVmVydHMgPSBjZWxsLnZlcnRpY2VzXG4gICAgdmFyIGNlbGxBZGogPSBjZWxsLmFkamFjZW50XG4gICAgZm9yKHZhciBpPTA7IGk8PWQ7ICsraSkge1xuICAgICAgdmFyIG5laWdoYm9yID0gY2VsbEFkaltpXVxuICAgICAgaWYoIW5laWdoYm9yLmJvdW5kYXJ5IHx8IG5laWdoYm9yLmxhc3RWaXNpdGVkIDw9IC1uKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICB2YXIgbnYgPSBuZWlnaGJvci52ZXJ0aWNlc1xuICAgICAgZm9yKHZhciBqPTA7IGo8PWQ7ICsraikge1xuICAgICAgICB2YXIgdnYgPSBudltqXVxuICAgICAgICBpZih2diA8IDApIHtcbiAgICAgICAgICB0dXBsZVtqXSA9IHBvaW50XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHVwbGVbal0gPSB2ZXJ0c1t2dl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG8gPSB0aGlzLm9yaWVudCgpXG4gICAgICBpZihvID4gMCkge1xuICAgICAgICByZXR1cm4gbmVpZ2hib3JcbiAgICAgIH1cbiAgICAgIG5laWdoYm9yLmxhc3RWaXNpdGVkID0gLW5cbiAgICAgIGlmKG8gPT09IDApIHtcbiAgICAgICAgdG9WaXNpdC5wdXNoKG5laWdoYm9yKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5wcm90by53YWxrID0gZnVuY3Rpb24ocG9pbnQsIHJhbmRvbSkge1xuICAvL0FsaWFzIGxvY2FsIHByb3BlcnRpZXNcbiAgdmFyIG4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCAtIDFcbiAgdmFyIGQgPSB0aGlzLmRpbWVuc2lvblxuICB2YXIgdmVydHMgPSB0aGlzLnZlcnRpY2VzXG4gIHZhciB0dXBsZSA9IHRoaXMudHVwbGVcblxuICAvL0NvbXB1dGUgaW5pdGlhbCBqdW1wIGNlbGxcbiAgdmFyIGluaXRJbmRleCA9IHJhbmRvbSA/ICh0aGlzLmludGVyaW9yLmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpfDAgOiAodGhpcy5pbnRlcmlvci5sZW5ndGgtMSlcbiAgdmFyIGNlbGwgPSB0aGlzLmludGVyaW9yWyBpbml0SW5kZXggXVxuXG4gIC8vU3RhcnQgd2Fsa2luZ1xub3V0ZXJMb29wOlxuICB3aGlsZSghY2VsbC5ib3VuZGFyeSkge1xuICAgIHZhciBjZWxsVmVydHMgPSBjZWxsLnZlcnRpY2VzXG4gICAgdmFyIGNlbGxBZGogPSBjZWxsLmFkamFjZW50XG5cbiAgICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgICB0dXBsZVtpXSA9IHZlcnRzW2NlbGxWZXJ0c1tpXV1cbiAgICB9XG4gICAgY2VsbC5sYXN0VmlzaXRlZCA9IG5cblxuICAgIC8vRmluZCBmYXJ0aGVzdCBhZGphY2VudCBjZWxsXG4gICAgZm9yKHZhciBpPTA7IGk8PWQ7ICsraSkge1xuICAgICAgdmFyIG5laWdoYm9yID0gY2VsbEFkaltpXVxuICAgICAgaWYobmVpZ2hib3IubGFzdFZpc2l0ZWQgPj0gbikge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgdmFyIHByZXYgPSB0dXBsZVtpXVxuICAgICAgdHVwbGVbaV0gPSBwb2ludFxuICAgICAgdmFyIG8gPSB0aGlzLm9yaWVudCgpXG4gICAgICB0dXBsZVtpXSA9IHByZXZcbiAgICAgIGlmKG8gPCAwKSB7XG4gICAgICAgIGNlbGwgPSBuZWlnaGJvclxuICAgICAgICBjb250aW51ZSBvdXRlckxvb3BcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKCFuZWlnaGJvci5ib3VuZGFyeSkge1xuICAgICAgICAgIG5laWdoYm9yLmxhc3RWaXNpdGVkID0gblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5laWdoYm9yLmxhc3RWaXNpdGVkID0gLW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHJldHVybiBjZWxsXG59XG5cbnByb3RvLmFkZFBlYWtzID0gZnVuY3Rpb24ocG9pbnQsIGNlbGwpIHtcbiAgdmFyIG4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCAtIDFcbiAgdmFyIGQgPSB0aGlzLmRpbWVuc2lvblxuICB2YXIgdmVydHMgPSB0aGlzLnZlcnRpY2VzXG4gIHZhciB0dXBsZSA9IHRoaXMudHVwbGVcbiAgdmFyIGludGVyaW9yID0gdGhpcy5pbnRlcmlvclxuICB2YXIgc2ltcGxpY2VzID0gdGhpcy5zaW1wbGljZXNcblxuICAvL1dhbGtpbmcgZmluaXNoZWQgYXQgYm91bmRhcnksIHRpbWUgdG8gYWRkIHBlYWtzXG4gIHZhciB0b3Zpc2l0ID0gWyBjZWxsIF1cblxuICAvL1N0cmV0Y2ggaW5pdGlhbCBib3VuZGFyeSBjZWxsIGludG8gYSBwZWFrXG4gIGNlbGwubGFzdFZpc2l0ZWQgPSBuXG4gIGNlbGwudmVydGljZXNbY2VsbC52ZXJ0aWNlcy5pbmRleE9mKC0xKV0gPSBuXG4gIGNlbGwuYm91bmRhcnkgPSBmYWxzZVxuICBpbnRlcmlvci5wdXNoKGNlbGwpXG5cbiAgLy9SZWNvcmQgYSBsaXN0IG9mIGFsbCBuZXcgYm91bmRhcmllcyBjcmVhdGVkIGJ5IGFkZGVkIHBlYWtzIHNvIHdlIGNhbiBnbHVlIHRoZW0gdG9nZXRoZXIgd2hlbiB3ZSBhcmUgYWxsIGRvbmVcbiAgdmFyIGdsdWVGYWNldHMgPSBbXVxuXG4gIC8vRG8gYSB0cmF2ZXJzYWwgb2YgdGhlIGJvdW5kYXJ5IHdhbGtpbmcgb3V0d2FyZCBmcm9tIHN0YXJ0aW5nIHBlYWtcbiAgd2hpbGUodG92aXNpdC5sZW5ndGggPiAwKSB7XG4gICAgLy9Qb3Agb2ZmIHBlYWsgYW5kIHdhbGsgb3ZlciBhZGphY2VudCBjZWxsc1xuICAgIHZhciBjZWxsID0gdG92aXNpdC5wb3AoKVxuICAgIHZhciBjZWxsVmVydHMgPSBjZWxsLnZlcnRpY2VzXG4gICAgdmFyIGNlbGxBZGogPSBjZWxsLmFkamFjZW50XG4gICAgdmFyIGluZGV4T2ZOID0gY2VsbFZlcnRzLmluZGV4T2YobilcbiAgICBpZihpbmRleE9mTiA8IDApIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgZm9yKHZhciBpPTA7IGk8PWQ7ICsraSkge1xuICAgICAgaWYoaSA9PT0gaW5kZXhPZk4pIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy9Gb3IgZWFjaCBib3VuZGFyeSBuZWlnaGJvciBvZiB0aGUgY2VsbFxuICAgICAgdmFyIG5laWdoYm9yID0gY2VsbEFkaltpXVxuICAgICAgaWYoIW5laWdoYm9yLmJvdW5kYXJ5IHx8IG5laWdoYm9yLmxhc3RWaXNpdGVkID49IG4pIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIG52ID0gbmVpZ2hib3IudmVydGljZXNcblxuICAgICAgLy9UZXN0IGlmIG5laWdoYm9yIGlzIGEgcGVha1xuICAgICAgaWYobmVpZ2hib3IubGFzdFZpc2l0ZWQgIT09IC1uKSB7ICAgICAgXG4gICAgICAgIC8vQ29tcHV0ZSBvcmllbnRhdGlvbiBvZiBwIHJlbGF0aXZlIHRvIGVhY2ggYm91bmRhcnkgcGVha1xuICAgICAgICB2YXIgaW5kZXhPZk5lZzEgPSAwXG4gICAgICAgIGZvcih2YXIgaj0wOyBqPD1kOyArK2opIHtcbiAgICAgICAgICBpZihudltqXSA8IDApIHtcbiAgICAgICAgICAgIGluZGV4T2ZOZWcxID0galxuICAgICAgICAgICAgdHVwbGVbal0gPSBwb2ludFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0dXBsZVtqXSA9IHZlcnRzW252W2pdXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbyA9IHRoaXMub3JpZW50KClcblxuICAgICAgICAvL1Rlc3QgaWYgbmVpZ2hib3IgY2VsbCBpcyBhbHNvIGEgcGVha1xuICAgICAgICBpZihvID4gMCkge1xuICAgICAgICAgIG52W2luZGV4T2ZOZWcxXSA9IG5cbiAgICAgICAgICBuZWlnaGJvci5ib3VuZGFyeSA9IGZhbHNlXG4gICAgICAgICAgaW50ZXJpb3IucHVzaChuZWlnaGJvcilcbiAgICAgICAgICB0b3Zpc2l0LnB1c2gobmVpZ2hib3IpXG4gICAgICAgICAgbmVpZ2hib3IubGFzdFZpc2l0ZWQgPSBuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZWlnaGJvci5sYXN0VmlzaXRlZCA9IC1uXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIG5hID0gbmVpZ2hib3IuYWRqYWNlbnRcblxuICAgICAgLy9PdGhlcndpc2UsIHJlcGxhY2UgbmVpZ2hib3Igd2l0aCBuZXcgZmFjZVxuICAgICAgdmFyIHZ2ZXJ0cyA9IGNlbGxWZXJ0cy5zbGljZSgpXG4gICAgICB2YXIgdmFkaiA9IGNlbGxBZGouc2xpY2UoKVxuICAgICAgdmFyIG5jZWxsID0gbmV3IFNpbXBsZXgodnZlcnRzLCB2YWRqLCB0cnVlKVxuICAgICAgc2ltcGxpY2VzLnB1c2gobmNlbGwpXG5cbiAgICAgIC8vQ29ubmVjdCB0byBuZWlnaGJvclxuICAgICAgdmFyIG9wcG9zaXRlID0gbmEuaW5kZXhPZihjZWxsKVxuICAgICAgaWYob3Bwb3NpdGUgPCAwKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBuYVtvcHBvc2l0ZV0gPSBuY2VsbFxuICAgICAgdmFkaltpbmRleE9mTl0gPSBuZWlnaGJvclxuXG4gICAgICAvL0Nvbm5lY3QgdG8gY2VsbFxuICAgICAgdnZlcnRzW2ldID0gLTFcbiAgICAgIHZhZGpbaV0gPSBjZWxsXG4gICAgICBjZWxsQWRqW2ldID0gbmNlbGxcblxuICAgICAgLy9GbGlwIGZhY2V0XG4gICAgICBuY2VsbC5mbGlwKClcblxuICAgICAgLy9BZGQgdG8gZ2x1ZSBsaXN0XG4gICAgICBmb3IodmFyIGo9MDsgajw9ZDsgKytqKSB7XG4gICAgICAgIHZhciB1dSA9IHZ2ZXJ0c1tqXVxuICAgICAgICBpZih1dSA8IDAgfHwgdXUgPT09IG4pIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIHZhciBuZmFjZSA9IG5ldyBBcnJheShkLTEpXG4gICAgICAgIHZhciBucHRyID0gMFxuICAgICAgICBmb3IodmFyIGs9MDsgazw9ZDsgKytrKSB7XG4gICAgICAgICAgdmFyIHZ2ID0gdnZlcnRzW2tdXG4gICAgICAgICAgaWYodnYgPCAwIHx8IGsgPT09IGopIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIG5mYWNlW25wdHIrK10gPSB2dlxuICAgICAgICB9XG4gICAgICAgIGdsdWVGYWNldHMucHVzaChuZXcgR2x1ZUZhY2V0KG5mYWNlLCBuY2VsbCwgaikpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy9HbHVlIGJvdW5kYXJ5IGZhY2V0cyB0b2dldGhlclxuICBnbHVlRmFjZXRzLnNvcnQoY29tcGFyZUdsdWUpXG5cbiAgZm9yKHZhciBpPTA7IGkrMTxnbHVlRmFjZXRzLmxlbmd0aDsgaSs9Mikge1xuICAgIHZhciBhID0gZ2x1ZUZhY2V0c1tpXVxuICAgIHZhciBiID0gZ2x1ZUZhY2V0c1tpKzFdXG4gICAgdmFyIGFpID0gYS5pbmRleFxuICAgIHZhciBiaSA9IGIuaW5kZXhcbiAgICBpZihhaSA8IDAgfHwgYmkgPCAwKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBhLmNlbGwuYWRqYWNlbnRbYS5pbmRleF0gPSBiLmNlbGxcbiAgICBiLmNlbGwuYWRqYWNlbnRbYi5pbmRleF0gPSBhLmNlbGxcbiAgfVxufVxuXG5wcm90by5pbnNlcnQgPSBmdW5jdGlvbihwb2ludCwgcmFuZG9tKSB7XG4gIC8vQWRkIHBvaW50XG4gIHZhciB2ZXJ0cyA9IHRoaXMudmVydGljZXNcbiAgdmVydHMucHVzaChwb2ludClcblxuICB2YXIgY2VsbCA9IHRoaXMud2Fsayhwb2ludCwgcmFuZG9tKVxuICBpZighY2VsbCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy9BbGlhcyBsb2NhbCBwcm9wZXJ0aWVzXG4gIHZhciBkID0gdGhpcy5kaW1lbnNpb25cbiAgdmFyIHR1cGxlID0gdGhpcy50dXBsZVxuXG4gIC8vRGVnZW5lcmF0ZSBjYXNlOiBJZiBwb2ludCBpcyBjb3BsYW5hciB0byBjZWxsLCB0aGVuIHdhbGsgdW50aWwgd2UgZmluZCBhIG5vbi1kZWdlbmVyYXRlIGJvdW5kYXJ5XG4gIGZvcih2YXIgaT0wOyBpPD1kOyArK2kpIHtcbiAgICB2YXIgdnYgPSBjZWxsLnZlcnRpY2VzW2ldXG4gICAgaWYodnYgPCAwKSB7XG4gICAgICB0dXBsZVtpXSA9IHBvaW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHR1cGxlW2ldID0gdmVydHNbdnZdXG4gICAgfVxuICB9XG4gIHZhciBvID0gdGhpcy5vcmllbnQodHVwbGUpXG4gIGlmKG8gPCAwKSB7XG4gICAgcmV0dXJuXG4gIH0gZWxzZSBpZihvID09PSAwKSB7XG4gICAgY2VsbCA9IHRoaXMuaGFuZGxlQm91bmRhcnlEZWdlbmVyYWN5KGNlbGwsIHBvaW50KVxuICAgIGlmKCFjZWxsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cblxuICAvL0FkZCBwZWFrc1xuICB0aGlzLmFkZFBlYWtzKHBvaW50LCBjZWxsKVxufVxuXG4vL0V4dHJhY3QgYWxsIGJvdW5kYXJ5IGNlbGxzXG5wcm90by5ib3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZCA9IHRoaXMuZGltZW5zaW9uXG4gIHZhciBib3VuZGFyeSA9IFtdXG4gIHZhciBjZWxscyA9IHRoaXMuc2ltcGxpY2VzXG4gIHZhciBuYyA9IGNlbGxzLmxlbmd0aFxuICBmb3IodmFyIGk9MDsgaTxuYzsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgIGlmKGMuYm91bmRhcnkpIHtcbiAgICAgIHZhciBiY2VsbCA9IG5ldyBBcnJheShkKVxuICAgICAgdmFyIGN2ID0gYy52ZXJ0aWNlc1xuICAgICAgdmFyIHB0ciA9IDBcbiAgICAgIHZhciBwYXJpdHkgPSAwXG4gICAgICBmb3IodmFyIGo9MDsgajw9ZDsgKytqKSB7XG4gICAgICAgIGlmKGN2W2pdID49IDApIHtcbiAgICAgICAgICBiY2VsbFtwdHIrK10gPSBjdltqXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcml0eSA9IGomMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZihwYXJpdHkgPT09IChkJjEpKSB7XG4gICAgICAgIHZhciB0ID0gYmNlbGxbMF1cbiAgICAgICAgYmNlbGxbMF0gPSBiY2VsbFsxXVxuICAgICAgICBiY2VsbFsxXSA9IHRcbiAgICAgIH1cbiAgICAgIGJvdW5kYXJ5LnB1c2goYmNlbGwpXG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZGFyeVxufVxuXG5mdW5jdGlvbiBpbmNyZW1lbnRhbENvbnZleEh1bGwocG9pbnRzLCByYW5kb21TZWFyY2gpIHtcbiAgdmFyIG4gPSBwb2ludHMubGVuZ3RoXG4gIGlmKG4gPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IGhhdmUgYXQgbGVhc3QgZCsxIHBvaW50c1wiKVxuICB9XG4gIHZhciBkID0gcG9pbnRzWzBdLmxlbmd0aFxuICBpZihuIDw9IGQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IGlucHV0IGF0IGxlYXN0IGQrMSBwb2ludHNcIilcbiAgfVxuXG4gIC8vRklYTUU6IFRoaXMgY291bGQgYmUgZGVnZW5lcmF0ZSwgYnV0IG5lZWQgdG8gc2VsZWN0IGQrMSBub24tY29wbGFuYXIgcG9pbnRzIHRvIGJvb3RzdHJhcCBwcm9jZXNzXG4gIHZhciBpbml0aWFsU2ltcGxleCA9IHBvaW50cy5zbGljZSgwLCBkKzEpXG5cbiAgLy9NYWtlIHN1cmUgaW5pdGlhbCBzaW1wbGV4IGlzIHBvc2l0aXZlbHkgb3JpZW50ZWRcbiAgdmFyIG8gPSBvcmllbnQuYXBwbHkodm9pZCAwLCBpbml0aWFsU2ltcGxleClcbiAgaWYobyA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIklucHV0IG5vdCBpbiBnZW5lcmFsIHBvc2l0aW9uXCIpXG4gIH1cbiAgdmFyIGluaXRpYWxDb29yZHMgPSBuZXcgQXJyYXkoZCsxKVxuICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgaW5pdGlhbENvb3Jkc1tpXSA9IGlcbiAgfVxuICBpZihvIDwgMCkge1xuICAgIGluaXRpYWxDb29yZHNbMF0gPSAxXG4gICAgaW5pdGlhbENvb3Jkc1sxXSA9IDBcbiAgfVxuXG4gIC8vQ3JlYXRlIGluaXRpYWwgdG9wb2xvZ2ljYWwgaW5kZXgsIGdsdWUgcG9pbnRlcnMgdG9nZXRoZXIgKGtpbmQgb2YgbWVzc3kpXG4gIHZhciBpbml0aWFsQ2VsbCA9IG5ldyBTaW1wbGV4KGluaXRpYWxDb29yZHMsIG5ldyBBcnJheShkKzEpLCBmYWxzZSlcbiAgdmFyIGJvdW5kYXJ5ID0gaW5pdGlhbENlbGwuYWRqYWNlbnRcbiAgdmFyIGxpc3QgPSBuZXcgQXJyYXkoZCsyKVxuICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgdmFyIHZlcnRzID0gaW5pdGlhbENvb3Jkcy5zbGljZSgpXG4gICAgZm9yKHZhciBqPTA7IGo8PWQ7ICsraikge1xuICAgICAgaWYoaiA9PT0gaSkge1xuICAgICAgICB2ZXJ0c1tqXSA9IC0xXG4gICAgICB9XG4gICAgfVxuICAgIHZhciB0ID0gdmVydHNbMF1cbiAgICB2ZXJ0c1swXSA9IHZlcnRzWzFdXG4gICAgdmVydHNbMV0gPSB0XG4gICAgdmFyIGNlbGwgPSBuZXcgU2ltcGxleCh2ZXJ0cywgbmV3IEFycmF5KGQrMSksIHRydWUpXG4gICAgYm91bmRhcnlbaV0gPSBjZWxsXG4gICAgbGlzdFtpXSA9IGNlbGxcbiAgfVxuICBsaXN0W2QrMV0gPSBpbml0aWFsQ2VsbFxuICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgdmFyIHZlcnRzID0gYm91bmRhcnlbaV0udmVydGljZXNcbiAgICB2YXIgYWRqID0gYm91bmRhcnlbaV0uYWRqYWNlbnRcbiAgICBmb3IodmFyIGo9MDsgajw9ZDsgKytqKSB7XG4gICAgICB2YXIgdiA9IHZlcnRzW2pdXG4gICAgICBpZih2IDwgMCkge1xuICAgICAgICBhZGpbal0gPSBpbml0aWFsQ2VsbFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgZm9yKHZhciBrPTA7IGs8PWQ7ICsraykge1xuICAgICAgICBpZihib3VuZGFyeVtrXS52ZXJ0aWNlcy5pbmRleE9mKHYpIDwgMCkge1xuICAgICAgICAgIGFkaltqXSA9IGJvdW5kYXJ5W2tdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL0luaXRpYWxpemUgdHJpYW5nbGVzXG4gIHZhciB0cmlhbmdsZXMgPSBuZXcgVHJpYW5ndWxhdGlvbihkLCBpbml0aWFsU2ltcGxleCwgbGlzdClcblxuICAvL0luc2VydCByZW1haW5pbmcgcG9pbnRzXG4gIHZhciB1c2VSYW5kb20gPSAhIXJhbmRvbVNlYXJjaFxuICBmb3IodmFyIGk9ZCsxOyBpPG47ICsraSkge1xuICAgIHRyaWFuZ2xlcy5pbnNlcnQocG9pbnRzW2ldLCB1c2VSYW5kb20pXG4gIH1cbiAgXG4gIC8vRXh0cmFjdCBib3VuZGFyeSBjZWxsc1xuICByZXR1cm4gdHJpYW5nbGVzLmJvdW5kYXJ5KClcbn0iLCJcInVzZSBzdHJpY3RcIlxuXG5mdW5jdGlvbiB1bmlxdWVfcHJlZChsaXN0LCBjb21wYXJlKSB7XG4gIHZhciBwdHIgPSAxXG4gICAgLCBsZW4gPSBsaXN0Lmxlbmd0aFxuICAgICwgYT1saXN0WzBdLCBiPWxpc3RbMF1cbiAgZm9yKHZhciBpPTE7IGk8bGVuOyArK2kpIHtcbiAgICBiID0gYVxuICAgIGEgPSBsaXN0W2ldXG4gICAgaWYoY29tcGFyZShhLCBiKSkge1xuICAgICAgaWYoaSA9PT0gcHRyKSB7XG4gICAgICAgIHB0cisrXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBsaXN0W3B0cisrXSA9IGFcbiAgICB9XG4gIH1cbiAgbGlzdC5sZW5ndGggPSBwdHJcbiAgcmV0dXJuIGxpc3Rcbn1cblxuZnVuY3Rpb24gdW5pcXVlX2VxKGxpc3QpIHtcbiAgdmFyIHB0ciA9IDFcbiAgICAsIGxlbiA9IGxpc3QubGVuZ3RoXG4gICAgLCBhPWxpc3RbMF0sIGIgPSBsaXN0WzBdXG4gIGZvcih2YXIgaT0xOyBpPGxlbjsgKytpLCBiPWEpIHtcbiAgICBiID0gYVxuICAgIGEgPSBsaXN0W2ldXG4gICAgaWYoYSAhPT0gYikge1xuICAgICAgaWYoaSA9PT0gcHRyKSB7XG4gICAgICAgIHB0cisrXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBsaXN0W3B0cisrXSA9IGFcbiAgICB9XG4gIH1cbiAgbGlzdC5sZW5ndGggPSBwdHJcbiAgcmV0dXJuIGxpc3Rcbn1cblxuZnVuY3Rpb24gdW5pcXVlKGxpc3QsIGNvbXBhcmUsIHNvcnRlZCkge1xuICBpZihsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBsaXN0XG4gIH1cbiAgaWYoY29tcGFyZSkge1xuICAgIGlmKCFzb3J0ZWQpIHtcbiAgICAgIGxpc3Quc29ydChjb21wYXJlKVxuICAgIH1cbiAgICByZXR1cm4gdW5pcXVlX3ByZWQobGlzdCwgY29tcGFyZSlcbiAgfVxuICBpZighc29ydGVkKSB7XG4gICAgbGlzdC5zb3J0KClcbiAgfVxuICByZXR1cm4gdW5pcXVlX2VxKGxpc3QpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pcXVlXG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgY2ggPSByZXF1aXJlKFwiaW5jcmVtZW50YWwtY29udmV4LWh1bGxcIilcbnZhciB1bmlxID0gcmVxdWlyZShcInVuaXFcIilcblxubW9kdWxlLmV4cG9ydHMgPSB0cmlhbmd1bGF0ZVxuXG5mdW5jdGlvbiBMaWZ0ZWRQb2ludChwLCBpKSB7XG4gIHRoaXMucG9pbnQgPSBwXG4gIHRoaXMuaW5kZXggPSBpXG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVMaWZ0ZWQoYSwgYikge1xuICB2YXIgYXAgPSBhLnBvaW50XG4gIHZhciBicCA9IGIucG9pbnRcbiAgdmFyIGQgPSBhcC5sZW5ndGhcbiAgZm9yKHZhciBpPTA7IGk8ZDsgKytpKSB7XG4gICAgdmFyIHMgPSBicFtpXSAtIGFwW2ldXG4gICAgaWYocykge1xuICAgICAgcmV0dXJuIHNcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDBcbn1cblxuZnVuY3Rpb24gdHJpYW5ndWxhdGUxRChuLCBwb2ludHMsIGluY2x1ZGVQb2ludEF0SW5maW5pdHkpIHtcbiAgaWYobiA9PT0gMSkge1xuICAgIGlmKGluY2x1ZGVQb2ludEF0SW5maW5pdHkpIHtcbiAgICAgIHJldHVybiBbIFstMSwgMF0gXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gIH1cbiAgdmFyIGxpZnRlZCA9IHBvaW50cy5tYXAoZnVuY3Rpb24ocCwgaSkge1xuICAgIHJldHVybiBbIHBbMF0sIGkgXVxuICB9KVxuICBsaWZ0ZWQuc29ydChmdW5jdGlvbihhLGIpIHtcbiAgICByZXR1cm4gYVswXSAtIGJbMF1cbiAgfSlcbiAgdmFyIGNlbGxzID0gbmV3IEFycmF5KG4gLSAxKVxuICBmb3IodmFyIGk9MTsgaTxuOyArK2kpIHtcbiAgICB2YXIgYSA9IGxpZnRlZFtpLTFdXG4gICAgdmFyIGIgPSBsaWZ0ZWRbaV1cbiAgICBjZWxsc1tpLTFdID0gWyBhWzFdLCBiWzFdIF1cbiAgfVxuICBpZihpbmNsdWRlUG9pbnRBdEluZmluaXR5KSB7XG4gICAgY2VsbHMucHVzaChcbiAgICAgIFsgLTEsIGNlbGxzWzBdWzFdLCBdLFxuICAgICAgWyBjZWxsc1tuLTFdWzFdLCAtMSBdKVxuICB9XG4gIHJldHVybiBjZWxsc1xufVxuXG5mdW5jdGlvbiB0cmlhbmd1bGF0ZShwb2ludHMsIGluY2x1ZGVQb2ludEF0SW5maW5pdHkpIHtcbiAgdmFyIG4gPSBwb2ludHMubGVuZ3RoXG4gIGlmKG4gPT09IDApIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICBcbiAgdmFyIGQgPSBwb2ludHNbMF0ubGVuZ3RoXG4gIGlmKGQgPCAxKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvL1NwZWNpYWwgY2FzZTogIEZvciAxRCB3ZSBjYW4ganVzdCBzb3J0IHRoZSBwb2ludHNcbiAgaWYoZCA9PT0gMSkge1xuICAgIHJldHVybiB0cmlhbmd1bGF0ZTFEKG4sIHBvaW50cywgaW5jbHVkZVBvaW50QXRJbmZpbml0eSlcbiAgfVxuICBcbiAgLy9MaWZ0IHBvaW50cywgc29ydFxuICB2YXIgbGlmdGVkID0gbmV3IEFycmF5KG4pXG4gIHZhciB1cHBlciA9IDEuMFxuICBmb3IodmFyIGk9MDsgaTxuOyArK2kpIHtcbiAgICB2YXIgcCA9IHBvaW50c1tpXVxuICAgIHZhciB4ID0gbmV3IEFycmF5KGQrMSlcbiAgICB2YXIgbCA9IDAuMFxuICAgIGZvcih2YXIgaj0wOyBqPGQ7ICsraikge1xuICAgICAgdmFyIHYgPSBwW2pdXG4gICAgICB4W2pdID0gdlxuICAgICAgbCArPSB2ICogdlxuICAgIH1cbiAgICB4W2RdID0gbFxuICAgIGxpZnRlZFtpXSA9IG5ldyBMaWZ0ZWRQb2ludCh4LCBpKVxuICAgIHVwcGVyID0gTWF0aC5tYXgobCwgdXBwZXIpXG4gIH1cbiAgdW5pcShsaWZ0ZWQsIGNvbXBhcmVMaWZ0ZWQpXG4gIFxuICAvL0RvdWJsZSBwb2ludHNcbiAgbiA9IGxpZnRlZC5sZW5ndGhcblxuICAvL0NyZWF0ZSBuZXcgbGlzdCBvZiBwb2ludHNcbiAgdmFyIGRwb2ludHMgPSBuZXcgQXJyYXkobiArIGQgKyAxKVxuICB2YXIgZGluZGV4ID0gbmV3IEFycmF5KG4gKyBkICsgMSlcblxuICAvL0FkZCBzdGVpbmVyIHBvaW50cyBhdCB0b3BcbiAgdmFyIHUgPSAoZCsxKSAqIChkKzEpICogdXBwZXJcbiAgdmFyIHkgPSBuZXcgQXJyYXkoZCsxKVxuICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgeVtpXSA9IDAuMFxuICB9XG4gIHlbZF0gPSB1XG5cbiAgZHBvaW50c1swXSA9IHkuc2xpY2UoKVxuICBkaW5kZXhbMF0gPSAtMVxuXG4gIGZvcih2YXIgaT0wOyBpPD1kOyArK2kpIHtcbiAgICB2YXIgeCA9IHkuc2xpY2UoKVxuICAgIHhbaV0gPSAxXG4gICAgZHBvaW50c1tpKzFdID0geFxuICAgIGRpbmRleFtpKzFdID0gLTFcbiAgfVxuXG4gIC8vQ29weSByZXN0IG9mIHRoZSBwb2ludHMgb3ZlclxuICBmb3IodmFyIGk9MDsgaTxuOyArK2kpIHtcbiAgICB2YXIgaCA9IGxpZnRlZFtpXVxuICAgIGRwb2ludHNbaSArIGQgKyAxXSA9IGgucG9pbnRcbiAgICBkaW5kZXhbaSArIGQgKyAxXSA9ICBoLmluZGV4XG4gIH1cblxuICAvL0NvbnN0cnVjdCBjb252ZXggaHVsbFxuICB2YXIgaHVsbCA9IGNoKGRwb2ludHMsIGZhbHNlKVxuICBpZihpbmNsdWRlUG9pbnRBdEluZmluaXR5KSB7XG4gICAgaHVsbCA9IGh1bGwuZmlsdGVyKGZ1bmN0aW9uKGNlbGwpIHtcbiAgICAgIHZhciBjb3VudCA9IDBcbiAgICAgIGZvcih2YXIgaj0wOyBqPD1kOyArK2opIHtcbiAgICAgICAgdmFyIHYgPSBkaW5kZXhbY2VsbFtqXV1cbiAgICAgICAgaWYodiA8IDApIHtcbiAgICAgICAgICBpZigrK2NvdW50ID49IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjZWxsW2pdID0gdlxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGh1bGwgPSBodWxsLmZpbHRlcihmdW5jdGlvbihjZWxsKSB7XG4gICAgICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgICAgIHZhciB2ID0gZGluZGV4W2NlbGxbaV1dXG4gICAgICAgIGlmKHYgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgY2VsbFtpXSA9IHZcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIGlmKGQgJiAxKSB7XG4gICAgZm9yKHZhciBpPTA7IGk8aHVsbC5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGggPSBodWxsW2ldXG4gICAgICB2YXIgeCA9IGhbMF1cbiAgICAgIGhbMF0gPSBoWzFdXG4gICAgICBoWzFdID0geFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBodWxsXG59IiwiXCJ1c2Ugc3RyaWN0XCJcblxuZnVuY3Rpb24gZHVwZV9hcnJheShjb3VudCwgdmFsdWUsIGkpIHtcbiAgdmFyIGMgPSBjb3VudFtpXXwwXG4gIGlmKGMgPD0gMCkge1xuICAgIHJldHVybiBbXVxuICB9XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoYyksIGpcbiAgaWYoaSA9PT0gY291bnQubGVuZ3RoLTEpIHtcbiAgICBmb3Ioaj0wOyBqPGM7ICsraikge1xuICAgICAgcmVzdWx0W2pdID0gdmFsdWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yKGo9MDsgajxjOyArK2opIHtcbiAgICAgIHJlc3VsdFtqXSA9IGR1cGVfYXJyYXkoY291bnQsIHZhbHVlLCBpKzEpXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gZHVwZV9udW1iZXIoY291bnQsIHZhbHVlKSB7XG4gIHZhciByZXN1bHQsIGlcbiAgcmVzdWx0ID0gbmV3IEFycmF5KGNvdW50KVxuICBmb3IoaT0wOyBpPGNvdW50OyArK2kpIHtcbiAgICByZXN1bHRbaV0gPSB2YWx1ZVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gZHVwZShjb3VudCwgdmFsdWUpIHtcbiAgaWYodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFsdWUgPSAwXG4gIH1cbiAgc3dpdGNoKHR5cGVvZiBjb3VudCkge1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIGlmKGNvdW50ID4gMCkge1xuICAgICAgICByZXR1cm4gZHVwZV9udW1iZXIoY291bnR8MCwgdmFsdWUpXG4gICAgICB9XG4gICAgYnJlYWtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBpZih0eXBlb2YgKGNvdW50Lmxlbmd0aCkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGR1cGVfYXJyYXkoY291bnQsIHZhbHVlLCAwKVxuICAgICAgfVxuICAgIGJyZWFrXG4gIH1cbiAgcmV0dXJuIFtdXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZHVwZSIsIlwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0gY29tcHJlc3NFeHBhbnNpb25cblxuZnVuY3Rpb24gY29tcHJlc3NFeHBhbnNpb24oZSkge1xuICB2YXIgbSA9IGUubGVuZ3RoXG4gIHZhciBRID0gZVtlLmxlbmd0aC0xXVxuICB2YXIgYm90dG9tID0gbVxuICBmb3IodmFyIGk9bS0yOyBpPj0wOyAtLWkpIHtcbiAgICB2YXIgYSA9IFFcbiAgICB2YXIgYiA9IGVbaV1cbiAgICBRID0gYSArIGJcbiAgICB2YXIgYnYgPSBRIC0gYVxuICAgIHZhciBxID0gYiAtIGJ2XG4gICAgaWYocSkge1xuICAgICAgZVstLWJvdHRvbV0gPSBRXG4gICAgICBRID0gcVxuICAgIH1cbiAgfVxuICB2YXIgdG9wID0gMFxuICBmb3IodmFyIGk9Ym90dG9tOyBpPG07ICsraSkge1xuICAgIHZhciBhID0gZVtpXVxuICAgIHZhciBiID0gUVxuICAgIFEgPSBhICsgYlxuICAgIHZhciBidiA9IFEgLSBhXG4gICAgdmFyIHEgPSBiIC0gYnZcbiAgICBpZihxKSB7XG4gICAgICBlW3RvcCsrXSA9IHFcbiAgICB9XG4gIH1cbiAgZVt0b3ArK10gPSBRXG4gIGUubGVuZ3RoID0gdG9wXG4gIHJldHVybiBlXG59IiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIHR3b1Byb2R1Y3QgPSByZXF1aXJlKFwidHdvLXByb2R1Y3RcIilcbnZhciByb2J1c3RTdW0gPSByZXF1aXJlKFwicm9idXN0LXN1bVwiKVxudmFyIHJvYnVzdFNjYWxlID0gcmVxdWlyZShcInJvYnVzdC1zY2FsZVwiKVxudmFyIGNvbXByZXNzID0gcmVxdWlyZShcInJvYnVzdC1jb21wcmVzc1wiKVxuXG52YXIgTlVNX0VYUEFOREVEID0gNlxuXG5mdW5jdGlvbiBjb2ZhY3RvcihtLCBjKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobS5sZW5ndGgtMSlcbiAgZm9yKHZhciBpPTE7IGk8bS5sZW5ndGg7ICsraSkge1xuICAgIHZhciByID0gcmVzdWx0W2ktMV0gPSBuZXcgQXJyYXkobS5sZW5ndGgtMSlcbiAgICBmb3IodmFyIGo9MCxrPTA7IGo8bS5sZW5ndGg7ICsraikge1xuICAgICAgaWYoaiA9PT0gYykge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgcltrKytdID0gbVtpXVtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIG1hdHJpeChuKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobilcbiAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgcmVzdWx0W2ldID0gbmV3IEFycmF5KG4pXG4gICAgZm9yKHZhciBqPTA7IGo8bjsgKytqKSB7XG4gICAgICByZXN1bHRbaV1bal0gPSBbXCJtW1wiLCBpLCBcIl1bXCIsIGosIFwiXVwiXS5qb2luKFwiXCIpXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gc2lnbihuKSB7XG4gIGlmKG4gJiAxKSB7XG4gICAgcmV0dXJuIFwiLVwiXG4gIH1cbiAgcmV0dXJuIFwiXCJcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTdW0oZXhwcikge1xuICBpZihleHByLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBleHByWzBdXG4gIH0gZWxzZSBpZihleHByLmxlbmd0aCA9PT0gMikge1xuICAgIHJldHVybiBbXCJzdW0oXCIsIGV4cHJbMF0sIFwiLFwiLCBleHByWzFdLCBcIilcIl0uam9pbihcIlwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBtID0gZXhwci5sZW5ndGg+PjFcbiAgICByZXR1cm4gW1wic3VtKFwiLCBnZW5lcmF0ZVN1bShleHByLnNsaWNlKDAsIG0pKSwgXCIsXCIsIGdlbmVyYXRlU3VtKGV4cHIuc2xpY2UobSkpLCBcIilcIl0uam9pbihcIlwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIGRldGVybWluYW50KG0pIHtcbiAgaWYobS5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gW1wic3VtKHByb2QoXCIsIG1bMF1bMF0sIFwiLFwiLCBtWzFdWzFdLCBcIikscHJvZCgtXCIsIG1bMF1bMV0sIFwiLFwiLCBtWzFdWzBdLCBcIikpXCJdLmpvaW4oXCJcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXhwciA9IFtdXG4gICAgZm9yKHZhciBpPTA7IGk8bS5sZW5ndGg7ICsraSkge1xuICAgICAgZXhwci5wdXNoKFtcInNjYWxlKFwiLCBkZXRlcm1pbmFudChjb2ZhY3RvcihtLCBpKSksIFwiLFwiLCBzaWduKGkpLCBtWzBdW2ldLCBcIilcIl0uam9pbihcIlwiKSlcbiAgICB9XG4gICAgcmV0dXJuIGdlbmVyYXRlU3VtKGV4cHIpXG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGlsZURldGVybWluYW50KG4pIHtcbiAgdmFyIHByb2MgPSBuZXcgRnVuY3Rpb24oXCJzdW1cIiwgXCJzY2FsZVwiLCBcInByb2RcIiwgXCJjb21wcmVzc1wiLCBbXG4gICAgXCJmdW5jdGlvbiByb2J1c3REZXRlcm1pbmFudFwiLG4sIFwiKG0pe3JldHVybiBjb21wcmVzcyhcIiwgXG4gICAgICBkZXRlcm1pbmFudChtYXRyaXgobikpLFxuICAgIFwiKX07cmV0dXJuIHJvYnVzdERldGVybWluYW50XCIsIG5dLmpvaW4oXCJcIikpXG4gIHJldHVybiBwcm9jKHJvYnVzdFN1bSwgcm9idXN0U2NhbGUsIHR3b1Byb2R1Y3QsIGNvbXByZXNzKVxufVxuXG52YXIgQ0FDSEUgPSBbXG4gIGZ1bmN0aW9uIHJvYnVzdERldGVybWluYW50MCgpIHsgcmV0dXJuIFswXSB9LFxuICBmdW5jdGlvbiByb2J1c3REZXRlcm1pbmFudDEobSkgeyByZXR1cm4gW21bMF1bMF1dIH1cbl1cblxuZnVuY3Rpb24gZ2VuZXJhdGVEaXNwYXRjaCgpIHtcbiAgd2hpbGUoQ0FDSEUubGVuZ3RoIDwgTlVNX0VYUEFOREVEKSB7XG4gICAgQ0FDSEUucHVzaChjb21waWxlRGV0ZXJtaW5hbnQoQ0FDSEUubGVuZ3RoKSlcbiAgfVxuICB2YXIgcHJvY0FyZ3MgPSBbXVxuICB2YXIgY29kZSA9IFtcImZ1bmN0aW9uIHJvYnVzdERldGVybWluYW50KG0pe3N3aXRjaChtLmxlbmd0aCl7XCJdXG4gIGZvcih2YXIgaT0wOyBpPE5VTV9FWFBBTkRFRDsgKytpKSB7XG4gICAgcHJvY0FyZ3MucHVzaChcImRldFwiICsgaSlcbiAgICBjb2RlLnB1c2goXCJjYXNlIFwiLCBpLCBcIjpyZXR1cm4gZGV0XCIsIGksIFwiKG0pO1wiKVxuICB9XG4gIGNvZGUucHVzaChcIn1cXFxudmFyIGRldD1DQUNIRVttLmxlbmd0aF07XFxcbmlmKCFkZXQpXFxcbmRldD1DQUNIRVttLmxlbmd0aF09Z2VuKG0ubGVuZ3RoKTtcXFxucmV0dXJuIGRldChtKTtcXFxufVxcXG5yZXR1cm4gcm9idXN0RGV0ZXJtaW5hbnRcIilcbiAgcHJvY0FyZ3MucHVzaChcIkNBQ0hFXCIsIFwiZ2VuXCIsIGNvZGUuam9pbihcIlwiKSlcbiAgdmFyIHByb2MgPSBGdW5jdGlvbi5hcHBseSh1bmRlZmluZWQsIHByb2NBcmdzKVxuICBtb2R1bGUuZXhwb3J0cyA9IHByb2MuYXBwbHkodW5kZWZpbmVkLCBDQUNIRS5jb25jYXQoW0NBQ0hFLCBjb21waWxlRGV0ZXJtaW5hbnRdKSlcbiAgZm9yKHZhciBpPTA7IGk8Q0FDSEUubGVuZ3RoOyArK2kpIHtcbiAgICBtb2R1bGUuZXhwb3J0c1tpXSA9IENBQ0hFW2ldXG4gIH1cbn1cblxuZ2VuZXJhdGVEaXNwYXRjaCgpIiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIGRldGVybWluYW50ID0gcmVxdWlyZShcInJvYnVzdC1kZXRlcm1pbmFudFwiKVxuXG52YXIgTlVNX0VYUEFORCA9IDZcblxuZnVuY3Rpb24gZ2VuZXJhdGVTb2x2ZXIobikge1xuICB2YXIgZnVuY05hbWUgPSBcInJvYnVzdExpbmVhclNvbHZlXCIgKyBuICsgXCJkXCJcbiAgdmFyIGNvZGUgPSBbXCJmdW5jdGlvbiBcIiwgZnVuY05hbWUsIFwiKEEsYil7cmV0dXJuIFtcIl1cbiAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgY29kZS5wdXNoKFwiZGV0KFtcIilcbiAgICBmb3IodmFyIGo9MDsgajxuOyArK2opIHtcbiAgICAgIGlmKGogPiAwKSB7XG4gICAgICAgIGNvZGUucHVzaChcIixcIilcbiAgICAgIH1cbiAgICAgIGNvZGUucHVzaChcIltcIilcbiAgICAgIGZvcih2YXIgaz0wOyBrPG47ICsraykge1xuICAgICAgICBpZihrID4gMCkge1xuICAgICAgICAgIGNvZGUucHVzaChcIixcIilcbiAgICAgICAgfVxuICAgICAgICBpZihrID09PSBpKSB7XG4gICAgICAgICAgY29kZS5wdXNoKFwiK2JbXCIsIGosIFwiXVwiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvZGUucHVzaChcIitBW1wiLCBqLCBcIl1bXCIsIGssIFwiXVwiKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb2RlLnB1c2goXCJdXCIpXG4gICAgfVxuICAgIGNvZGUucHVzaChcIl0pLFwiKVxuICB9XG4gIGNvZGUucHVzaChcImRldChBKV19cmV0dXJuIFwiLCBmdW5jTmFtZSlcbiAgdmFyIHByb2MgPSBuZXcgRnVuY3Rpb24oXCJkZXRcIiwgY29kZS5qb2luKFwiXCIpKVxuICBpZihuIDwgNikge1xuICAgIHJldHVybiBwcm9jKGRldGVybWluYW50W25dKVxuICB9XG4gIHJldHVybiBwcm9jKGRldGVybWluYW50KVxufVxuXG5mdW5jdGlvbiByb2J1c3RMaW5lYXJTb2x2ZTBkKCkge1xuICByZXR1cm4gWyAwIF1cbn1cblxuZnVuY3Rpb24gcm9idXN0TGluZWFyU29sdmUxZChBLCBiKSB7XG4gIHJldHVybiBbIFsgYlswXSBdLCBbIEFbMF1bMF0gXSBdXG59XG5cbnZhciBDQUNIRSA9IFtcbiAgcm9idXN0TGluZWFyU29sdmUwZCxcbiAgcm9idXN0TGluZWFyU29sdmUxZFxuXVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURpc3BhdGNoKCkge1xuICB3aGlsZShDQUNIRS5sZW5ndGggPCBOVU1fRVhQQU5EKSB7XG4gICAgQ0FDSEUucHVzaChnZW5lcmF0ZVNvbHZlcihDQUNIRS5sZW5ndGgpKVxuICB9XG4gIHZhciBwcm9jQXJncyA9IFtdXG4gIHZhciBjb2RlID0gW1wiZnVuY3Rpb24gZGlzcGF0Y2hMaW5lYXJTb2x2ZShBLGIpe3N3aXRjaChBLmxlbmd0aCl7XCJdXG4gIGZvcih2YXIgaT0wOyBpPE5VTV9FWFBBTkQ7ICsraSkge1xuICAgIHByb2NBcmdzLnB1c2goXCJzXCIgKyBpKVxuICAgIGNvZGUucHVzaChcImNhc2UgXCIsIGksIFwiOnJldHVybiBzXCIsIGksIFwiKEEsYik7XCIpXG4gIH1cbiAgY29kZS5wdXNoKFwifXZhciBzPUNBQ0hFW0EubGVuZ3RoXTtpZighcylzPUNBQ0hFW0EubGVuZ3RoXT1nKEEubGVuZ3RoKTtyZXR1cm4gcyhBLGIpfXJldHVybiBkaXNwYXRjaExpbmVhclNvbHZlXCIpXG4gIHByb2NBcmdzLnB1c2goXCJDQUNIRVwiLCBcImdcIiwgY29kZS5qb2luKFwiXCIpKVxuICB2YXIgcHJvYyA9IEZ1bmN0aW9uLmFwcGx5KHVuZGVmaW5lZCwgcHJvY0FyZ3MpXG4gIG1vZHVsZS5leHBvcnRzID0gcHJvYy5hcHBseSh1bmRlZmluZWQsIENBQ0hFLmNvbmNhdChbQ0FDSEUsIGdlbmVyYXRlU29sdmVyXSkpXG4gIGZvcih2YXIgaT0wOyBpPE5VTV9FWFBBTkQ7ICsraSkge1xuICAgIG1vZHVsZS5leHBvcnRzW2ldID0gQ0FDSEVbaV1cbiAgfVxufVxuXG5nZW5lcmF0ZURpc3BhdGNoKCkiLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgZHVwID0gcmVxdWlyZShcImR1cFwiKVxudmFyIHNvbHZlID0gcmVxdWlyZShcInJvYnVzdC1saW5lYXItc29sdmVcIilcblxuZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgdmFyIHMgPSAwLjBcbiAgdmFyIGQgPSBhLmxlbmd0aFxuICBmb3IodmFyIGk9MDsgaTxkOyArK2kpIHtcbiAgICBzICs9IGFbaV0gKiBiW2ldXG4gIH1cbiAgcmV0dXJuIHNcbn1cblxuZnVuY3Rpb24gYmFyeWNlbnRyaWNDaXJjdW1jZW50ZXIocG9pbnRzKSB7XG4gIHZhciBOID0gcG9pbnRzLmxlbmd0aFxuICBpZihOID09PSAwKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgXG4gIHZhciBEID0gcG9pbnRzWzBdLmxlbmd0aFxuICB2YXIgQSA9IGR1cChbcG9pbnRzLmxlbmd0aCsxLCBwb2ludHMubGVuZ3RoKzFdLCAxLjApXG4gIHZhciBiID0gZHVwKFtwb2ludHMubGVuZ3RoKzFdLCAxLjApXG4gIEFbTl1bTl0gPSAwLjBcbiAgZm9yKHZhciBpPTA7IGk8TjsgKytpKSB7XG4gICAgZm9yKHZhciBqPTA7IGo8PWk7ICsraikge1xuICAgICAgQVtqXVtpXSA9IEFbaV1bal0gPSAyLjAgKiBkb3QocG9pbnRzW2ldLCBwb2ludHNbal0pXG4gICAgfVxuICAgIGJbaV0gPSBkb3QocG9pbnRzW2ldLCBwb2ludHNbaV0pXG4gIH1cbiAgdmFyIHggPSBzb2x2ZShBLCBiKVxuXG4gIHZhciBkZW5vbSA9IDAuMFxuICB2YXIgaCA9IHhbTisxXVxuICBmb3IodmFyIGk9MDsgaTxoLmxlbmd0aDsgKytpKSB7XG4gICAgZGVub20gKz0gaFtpXVxuICB9XG5cbiAgdmFyIHkgPSBuZXcgQXJyYXkoTilcbiAgZm9yKHZhciBpPTA7IGk8TjsgKytpKSB7XG4gICAgdmFyIGggPSB4W2ldXG4gICAgdmFyIG51bWVyID0gMC4wXG4gICAgZm9yKHZhciBqPTA7IGo8aC5sZW5ndGg7ICsraikge1xuICAgICAgbnVtZXIgKz0gaFtqXVxuICAgIH1cbiAgICB5W2ldID0gIG51bWVyIC8gZGVub21cbiAgfVxuXG4gIHJldHVybiB5XG59XG5cbmZ1bmN0aW9uIGNpcmN1bWNlbnRlcihwb2ludHMpIHtcbiAgaWYocG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXVxuICB9XG4gIHZhciBEID0gcG9pbnRzWzBdLmxlbmd0aFxuICB2YXIgcmVzdWx0ID0gZHVwKFtEXSlcbiAgdmFyIHdlaWdodHMgPSBiYXJ5Y2VudHJpY0NpcmN1bWNlbnRlcihwb2ludHMpXG4gIGZvcih2YXIgaT0wOyBpPHBvaW50cy5sZW5ndGg7ICsraSkge1xuICAgIGZvcih2YXIgaj0wOyBqPEQ7ICsraikge1xuICAgICAgcmVzdWx0W2pdICs9IHBvaW50c1tpXVtqXSAqIHdlaWdodHNbaV1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jaXJjdW1jZW50ZXIuYmFyeWNlbmV0cmljID0gYmFyeWNlbnRyaWNDaXJjdW1jZW50ZXJcbm1vZHVsZS5leHBvcnRzID0gY2lyY3VtY2VudGVyIiwibW9kdWxlLmV4cG9ydHMgPSBjaXJjdW1yYWRpdXNcblxudmFyIGNpcmN1bWNlbnRlciA9IHJlcXVpcmUoJ2NpcmN1bWNlbnRlcicpXG5cbmZ1bmN0aW9uIGNpcmN1bXJhZGl1cyhwb2ludHMpIHtcbiAgdmFyIGNlbnRlciA9IGNpcmN1bWNlbnRlcihwb2ludHMpXG4gIHZhciBhdmdEaXN0ID0gMC4wXG4gIGZvcih2YXIgaT0wOyBpPHBvaW50cy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBwID0gcG9pbnRzW2ldXG4gICAgZm9yKHZhciBqPTA7IGo8Y2VudGVyLmxlbmd0aDsgKytqKSB7XG4gICAgICBhdmdEaXN0ICs9IE1hdGgucG93KHBbal0gLSBjZW50ZXJbal0sIDIpXG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLnNxcnQoYXZnRGlzdCAvIHBvaW50cy5sZW5ndGgpXG59IiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYWxwaGFDb21wbGV4XG5cbnZhciBkZWxhdW5heSA9IHJlcXVpcmUoJ2RlbGF1bmF5LXRyaWFuZ3VsYXRlJylcbnZhciBjaXJjdW1yYWRpdXMgPSByZXF1aXJlKCdjaXJjdW1yYWRpdXMnKVxuXG5mdW5jdGlvbiBhbHBoYUNvbXBsZXgoYWxwaGEsIHBvaW50cykge1xuICByZXR1cm4gZGVsYXVuYXkocG9pbnRzKS5maWx0ZXIoZnVuY3Rpb24oY2VsbCkge1xuICAgIHZhciBzaW1wbGV4ID0gbmV3IEFycmF5KGNlbGwubGVuZ3RoKVxuICAgIGZvcih2YXIgaT0wOyBpPGNlbGwubGVuZ3RoOyArK2kpIHtcbiAgICAgIHNpbXBsZXhbaV0gPSBwb2ludHNbY2VsbFtpXV1cbiAgICB9XG4gICAgcmV0dXJuIGNpcmN1bXJhZGl1cyhzaW1wbGV4KSAqIGFscGhhIDwgMVxuICB9KVxufSIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJvdW5kYXJ5XG5cbmZ1bmN0aW9uIGJvdW5kYXJ5IChjZWxscykge1xuICB2YXIgaSwgaiwga1xuICB2YXIgbiA9IGNlbGxzLmxlbmd0aFxuICB2YXIgc3ogPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBzeiArPSBjZWxsc1tpXS5sZW5ndGhcbiAgfVxuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHN6KVxuICB2YXIgcHRyID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgIHZhciBkID0gYy5sZW5ndGhcbiAgICBmb3IgKGogPSAwOyBqIDwgZDsgKytqKSB7XG4gICAgICB2YXIgYiA9IHJlc3VsdFtwdHIrK10gPSBuZXcgQXJyYXkoZCAtIDEpXG4gICAgICB2YXIgcCA9IDBcbiAgICAgIGZvciAoayA9IDA7IGsgPCBkOyArK2spIHtcbiAgICAgICAgaWYgKGsgPT09IGopIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGJbcCsrXSA9IGNba11cbiAgICAgIH1cbiAgICAgIGlmIChqICYgMSkge1xuICAgICAgICB2YXIgdG1wID0gYlsxXVxuICAgICAgICBiWzFdID0gYlswXVxuICAgICAgICBiWzBdID0gdG1wXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gY29tcGFyZUNlbGxzXG5cbnZhciBtaW4gPSBNYXRoLm1pblxuXG5mdW5jdGlvbiBjb21wYXJlSW50KGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiXG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVDZWxscyhhLCBiKSB7XG4gIHZhciBuID0gYS5sZW5ndGhcbiAgICAsIHQgPSBhLmxlbmd0aCAtIGIubGVuZ3RoXG4gIGlmKHQpIHtcbiAgICByZXR1cm4gdFxuICB9XG4gIHN3aXRjaChuKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIDBcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gYVswXSAtIGJbMF1cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gKGFbMF0rYVsxXS1iWzBdLWJbMV0pIHx8XG4gICAgICAgICAgICAgbWluKGFbMF0sYVsxXSkgLSBtaW4oYlswXSxiWzFdKVxuICAgIGNhc2UgMzpcbiAgICAgIHZhciBsMSA9IGFbMF0rYVsxXVxuICAgICAgICAsIG0xID0gYlswXStiWzFdXG4gICAgICB0ID0gbDErYVsyXSAtIChtMStiWzJdKVxuICAgICAgaWYodCkge1xuICAgICAgICByZXR1cm4gdFxuICAgICAgfVxuICAgICAgdmFyIGwwID0gbWluKGFbMF0sIGFbMV0pXG4gICAgICAgICwgbTAgPSBtaW4oYlswXSwgYlsxXSlcbiAgICAgIHJldHVybiBtaW4obDAsIGFbMl0pIC0gbWluKG0wLCBiWzJdKSB8fFxuICAgICAgICAgICAgIG1pbihsMCthWzJdLCBsMSkgLSBtaW4obTArYlsyXSwgbTEpXG4gICAgY2FzZSA0OlxuICAgICAgdmFyIGF3PWFbMF0sIGF4PWFbMV0sIGF5PWFbMl0sIGF6PWFbM11cbiAgICAgICAgLCBidz1iWzBdLCBieD1iWzFdLCBieT1iWzJdLCBiej1iWzNdXG4gICAgICByZXR1cm4gKGF3K2F4K2F5K2F6KS0oYncrYngrYnkrYnopIHx8XG4gICAgICAgICAgICAgbWluKGF3LGF4LGF5LGF6KS1taW4oYncsYngsYnksYnosYncpIHx8XG4gICAgICAgICAgICAgbWluKGF3K2F4LGF3K2F5LGF3K2F6LGF4K2F5LGF4K2F6LGF5K2F6KSAtXG4gICAgICAgICAgICAgICBtaW4oYncrYngsYncrYnksYncrYnosYngrYnksYngrYnosYnkrYnopIHx8XG4gICAgICAgICAgICAgbWluKGF3K2F4K2F5LGF3K2F4K2F6LGF3K2F5K2F6LGF4K2F5K2F6KSAtXG4gICAgICAgICAgICAgICBtaW4oYncrYngrYnksYncrYngrYnosYncrYnkrYnosYngrYnkrYnopXG4gICAgZGVmYXVsdDpcbiAgICAgIHZhciBhcyA9IGEuc2xpY2UoKS5zb3J0KGNvbXBhcmVJbnQpXG4gICAgICB2YXIgYnMgPSBiLnNsaWNlKCkuc29ydChjb21wYXJlSW50KVxuICAgICAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgICAgIHQgPSBhc1tpXSAtIGJzW2ldXG4gICAgICAgIGlmKHQpIHtcbiAgICAgICAgICByZXR1cm4gdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMFxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBvcmllbnRhdGlvblxuXG5mdW5jdGlvbiBvcmllbnRhdGlvbihzKSB7XG4gIHZhciBwID0gMVxuICBmb3IodmFyIGk9MTsgaTxzLmxlbmd0aDsgKytpKSB7XG4gICAgZm9yKHZhciBqPTA7IGo8aTsgKytqKSB7XG4gICAgICBpZihzW2ldIDwgc1tqXSkge1xuICAgICAgICBwID0gLXBcbiAgICAgIH0gZWxzZSBpZihzW2pdID09PSBzW2ldKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIGNvbXBhcmVDZWxscyA9IHJlcXVpcmUoJ2NvbXBhcmUtY2VsbCcpXG52YXIgcGFyaXR5ID0gcmVxdWlyZSgnY2VsbC1vcmllbnRhdGlvbicpXG5cbm1vZHVsZS5leHBvcnRzID0gY29tcGFyZU9yaWVudGVkQ2VsbHNcblxuZnVuY3Rpb24gY29tcGFyZU9yaWVudGVkQ2VsbHMoYSwgYikge1xuICByZXR1cm4gY29tcGFyZUNlbGxzKGEsIGIpIHx8IHBhcml0eShhKSAtIHBhcml0eShiKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBjb21wYXJlQ2VsbCA9IHJlcXVpcmUoJ2NvbXBhcmUtY2VsbCcpXG52YXIgY29tcGFyZU9yaWVudGVkQ2VsbCA9IHJlcXVpcmUoJ2NvbXBhcmUtb3JpZW50ZWQtY2VsbCcpXG52YXIgb3JpZW50YXRpb24gPSByZXF1aXJlKCdjZWxsLW9yaWVudGF0aW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSByZWR1Y2VDZWxsQ29tcGxleFxuXG5mdW5jdGlvbiByZWR1Y2VDZWxsQ29tcGxleChjZWxscykge1xuICBjZWxscy5zb3J0KGNvbXBhcmVPcmllbnRlZENlbGwpXG4gIHZhciBuID0gY2VsbHMubGVuZ3RoXG4gIHZhciBwdHIgPSAwXG4gIGZvcih2YXIgaT0wOyBpPG47ICsraSkge1xuICAgIHZhciBjID0gY2VsbHNbaV1cbiAgICB2YXIgbyA9IG9yaWVudGF0aW9uKGMpXG4gICAgaWYobyA9PT0gMCkge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYocHRyID4gMCkge1xuICAgICAgdmFyIGYgPSBjZWxsc1twdHItMV1cbiAgICAgIGlmKGNvbXBhcmVDZWxsKGMsIGYpID09PSAwICYmXG4gICAgICAgICBvcmllbnRhdGlvbihmKSAgICAhPT0gbykge1xuICAgICAgICBwdHIgLT0gMVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgIH1cbiAgICBjZWxsc1twdHIrK10gPSBjXG4gIH1cbiAgY2VsbHMubGVuZ3RoID0gcHRyXG4gIHJldHVybiBjZWxsc1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYm91bmRhcnlcblxudmFyIGJuZCA9IHJlcXVpcmUoJ2JvdW5kYXJ5LWNlbGxzJylcbnZhciByZWR1Y2UgPSByZXF1aXJlKCdyZWR1Y2Utc2ltcGxpY2lhbC1jb21wbGV4JylcblxuZnVuY3Rpb24gYm91bmRhcnkoY2VsbHMpIHtcbiAgcmV0dXJuIHJlZHVjZShibmQoY2VsbHMpKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBhbHBoYVNoYXBlXG5cbnZhciBhYyA9IHJlcXVpcmUoJ2FscGhhLWNvbXBsZXgnKVxudmFyIGJuZCA9IHJlcXVpcmUoJ3NpbXBsaWNpYWwtY29tcGxleC1ib3VuZGFyeScpXG5cbmZ1bmN0aW9uIGFscGhhU2hhcGUoYWxwaGEsIHBvaW50cykge1xuICByZXR1cm4gYm5kKGFjKGFscGhhLCBwb2ludHMpKVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvbHlnb24pIHtcbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgIGEsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICBhcmVhID0gMDtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEgPSBiO1xuICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgIGFyZWEgKz0gYVsxXSAqIGJbMF0gLSBhWzBdICogYlsxXTtcbiAgfVxuXG4gIHJldHVybiBhcmVhIC8gMjtcbn1cbiIsIi8vIFJldHVybnMgdGhlIDJEIGNyb3NzIHByb2R1Y3Qgb2YgQUIgYW5kIEFDIHZlY3RvcnMsIGkuZS4sIHRoZSB6LWNvbXBvbmVudCBvZlxuLy8gdGhlIDNEIGNyb3NzIHByb2R1Y3QgaW4gYSBxdWFkcmFudCBJIENhcnRlc2lhbiBjb29yZGluYXRlIHN5c3RlbSAoK3ggaXNcbi8vIHJpZ2h0LCAreSBpcyB1cCkuIFJldHVybnMgYSBwb3NpdGl2ZSB2YWx1ZSBpZiBBQkMgaXMgY291bnRlci1jbG9ja3dpc2UsXG4vLyBuZWdhdGl2ZSBpZiBjbG9ja3dpc2UsIGFuZCB6ZXJvIGlmIHRoZSBwb2ludHMgYXJlIGNvbGxpbmVhci5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChiWzBdIC0gYVswXSkgKiAoY1sxXSAtIGFbMV0pIC0gKGJbMV0gLSBhWzFdKSAqIChjWzBdIC0gYVswXSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICB4YSxcbiAgICAgIHlhLFxuICAgICAgeGIgPSBiWzBdLFxuICAgICAgeWIgPSBiWzFdLFxuICAgICAgcGVyaW1ldGVyID0gMDtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHhhID0geGI7XG4gICAgeWEgPSB5YjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICB4YiA9IGJbMF07XG4gICAgeWIgPSBiWzFdO1xuICAgIHhhIC09IHhiO1xuICAgIHlhIC09IHliO1xuICAgIHBlcmltZXRlciArPSBNYXRoLnNxcnQoeGEgKiB4YSArIHlhICogeWEpO1xuICB9XG5cbiAgcmV0dXJuIHBlcmltZXRlcjtcbn1cbiIsImltcG9ydCBhbHBoYVNoYXBlIGZyb20gJ2FscGhhLXNoYXBlJztcbmltcG9ydCAqIGFzIHBvbHlnb24gZnJvbSAnZDMtcG9seWdvbic7XG5pbXBvcnQge2Rpc3RhbmNlfSBmcm9tICcuL2tydXNrYWwtbXN0JztcbmltcG9ydCBfIGZyb20gXCJ1bmRlcnNjb3JlXCI7XG5pbXBvcnQge0RlbGF1bmF5fSBmcm9tIFwiZDMtZGVsYXVuYXlcIjtcbmltcG9ydCB7aXNBMkRMaW5lfSBmcm9tIFwiLi9saW5lXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXZlSHVsbChhbHBoYSwgc2l0ZXMpIHtcbiAgICAvL2NoZWNrIGlmIHRoZSBzaXRlcyBhcmUgb24gdGhlIHNhbWUgbGluZVxuICAgIGlmIChpc0EyRExpbmUoc2l0ZXMpKSB7XG4gICAgICAgIC8vSnVzdCBzaW1wbHkgcmV0dXJucyB0aGF0IHNpdGVzIGFzIGNvbmNhdmUgaHVsbFxuICAgICAgICByZXR1cm4gW3NpdGVzXTtcbiAgICB9XG4gICAgbGV0IGNlbGxzID0gYWxwaGFTaGFwZShhbHBoYSwgc2l0ZXMpO1xuICAgIC8vU3dpdGNoIHRvIGFub3RoZXIgZGVsYXVuYXkgKyBjdXQgbG9uZyBlZGdlIGFsZ29yaXRobXNcbiAgICBpZiAoY2VsbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNlbGxzID0gY29uY2F2ZUh1bGwxKHNpdGVzLCAxIC8gYWxwaGEpO1xuICAgIH1cbiAgICBsZXQgaHVsbHMgPSBbXTtcbiAgICBwcm9jZXNzQ2VsbHMoY2VsbHMsIGh1bGxzKTtcbiAgICBodWxscyA9IGh1bGxzLm1hcChoID0+IHtcbiAgICAgICAgLy9HZXQgdmVydGljZXNcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gQXJyYXkuZnJvbShoKS5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2l0ZXNbaXRlbV07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc29ydFZlcnRpY2llcyh2ZXJ0aWNlcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGh1bGxzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uY2F2ZUh1bGxBcmVhKGh1bGxzKSB7XG4gICAgbGV0IHRvdGFsID0gMDtcbiAgICBodWxscy5mb3JFYWNoKGggPT4ge1xuICAgICAgICB0b3RhbCArPSBNYXRoLmFicyhwb2x5Z29uLnBvbHlnb25BcmVhKGgpKTsvL1N0aWxsIG5lZWQgdG8gdXNlIE1hdGguYWJzIGhlcmUgc2luY2UgZm9yIHRoZSBjYXNlIG9mIGxpbmUgPT4gdGhlIHNvcnQgdmVydGljZXMgbWF5IHJldHVybiB2ZXJ5IHNtYWxsIG5lZ2F0aXZlIHZhbHVlc1xuICAgIH0pO1xuICAgIHJldHVybiB0b3RhbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdmVIdWxsTGVuZ3RoKGh1bGxzKSB7XG4gICAgbGV0IHRvdGFsID0gMDtcbiAgICBodWxscy5mb3JFYWNoKGggPT4ge1xuICAgICAgICB0b3RhbCArPSBwb2x5Z29uLnBvbHlnb25MZW5ndGgoaCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvdGFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmV4SHVsbChzaXRlcykge1xuICAgIC8vY2hlY2sgaWYgdGhlIHNpdGVzIGFyZSBvbiB0aGUgc2FtZSBsaW5lXG4gICAgaWYgKGlzQTJETGluZShzaXRlcykpIHtcbiAgICAgICAgLy9KdXN0IHNpbXBseSByZXR1cm5zIHRoYXQgc2l0ZXMgYXMgY29uY2F2ZSBodWxsXG4gICAgICAgIHJldHVybiBzaXRlcztcbiAgICB9XG4gICAgY29uc3QgY2VsbHMgPSBhbHBoYVNoYXBlKDAsIHNpdGVzKTtcbiAgICBsZXQgaCA9IEFycmF5LmZyb20obmV3IFNldChjZWxscy5mbGF0KCkpKTtcbiAgICAvL0dldCB2ZXJ0aWNlc1xuICAgIGxldCB2ZXJ0aWNlcyA9IEFycmF5LmZyb20oaCkubWFwKGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gc2l0ZXNbaXRlbV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvcnRWZXJ0aWNpZXModmVydGljZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmV4SHVsbEFyZWEoaHVsbCkge1xuICAgIHJldHVybiBNYXRoLmFicyhwb2x5Z29uLnBvbHlnb25BcmVhKGh1bGwpKTsvL1N0aWxsIG5lZWQgdG8gdXNlIE1hdGguYWJzIGhlcmUgc2luY2UgZm9yIHRoZSBjYXNlIG9mIGxpbmUgPT4gdGhlIHNvcnQgdmVydGljZXMgbWF5IHJldHVybiB2ZXJ5IHNtYWxsIG5lZ2F0aXZlIHZhbHVlc1xufVxuXG4vLzxlZGl0b3ItZm9sZCBkZXNjPVwiVXRpbCB0byBjb252ZXJ0IGNlbGxzIHRvIGh1bGxzXCI+XG5mdW5jdGlvbiBwdXRDZWxsVG9IdWxscyhjZWxsLCBodWxscykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaHVsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGh1bGwgPSBodWxsc1tpXTtcbiAgICAgICAgaWYgKGh1bGwuaGFzKGNlbGxbMF0pKSB7XG4gICAgICAgICAgICBodWxsLmFkZChjZWxsWzFdKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGh1bGwuaGFzKGNlbGxbMV0pKSB7XG4gICAgICAgICAgICBodWxsLmFkZChjZWxsWzBdKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NlbGxzKGNlbGxzLCBodWxscykge1xuICAgIGlmIChjZWxscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL0lmIGxvb3AgdGhyb3VnaCBhbGwgY2VsbHMgYnV0IGNhbid0IHB1dCBpbnRvIGFueSBodWxsIHRoZW4gbmVlZCB0byBjcmVhdGUgbmV3IGh1bGxcbiAgICBsZXQgcHJvY2Vzc2VkSW5kaWNlID0gW107XG4gICAgY2VsbHMuZm9yRWFjaCgoY2VsbCwgaSkgPT4ge1xuICAgICAgICBpZiAocHV0Q2VsbFRvSHVsbHMoY2VsbCwgaHVsbHMpKSB7XG4gICAgICAgICAgICBwcm9jZXNzZWRJbmRpY2UucHVzaChpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vSWYgbG9vcCB0aHJvdWdoIGFsbCBvZiB0aGVtIGJ1dCBub25lIGdvdCBwdXQgaW50byB0aGUgY2VsbHMgPT4gd2UgbmVlZCB0byB0YWtlIGZpcnN0IG9uZSBmcm9tIGNlbGxzIHRvIGNyZWF0ZSBhIG5ldyBodWxsLlxuICAgIGlmIChwcm9jZXNzZWRJbmRpY2UubGVuZ3RoID09IDApIHtcbiAgICAgICAgLy9QdXQgZmlyc3Qgb25lIGluIHRoZSBodWxsXG4gICAgICAgIGxldCBjZWxsID0gY2VsbHMuc2hpZnQoKTtcbiAgICAgICAgY29uc3QgaHVsbCA9IG5ldyBTZXQoY2VsbCk7XG4gICAgICAgIGh1bGxzLnB1c2goaHVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy9SZW1vdmUgdGhlIHByb2Nlc3NlZCBpdGVtcyBhbmQgY29udGludWUuXG4gICAgICAgIGNlbGxzID0gY2VsbHMuZmlsdGVyKCh2LCBpKSA9PiBwcm9jZXNzZWRJbmRpY2UuaW5kZXhPZihpKSA8IDApO1xuICAgIH1cbiAgICAvL0RvIHRoaXMgcmVjdXJzaXZlbHlcbiAgICBwcm9jZXNzQ2VsbHMoY2VsbHMsIGh1bGxzKTtcbn1cblxuZnVuY3Rpb24gc29ydFZlcnRpY2llcyhwb2ludHMpIHtcbiAgICBsZXQgY2VudGVyID0gZmluZENlbnRyb2lkKHBvaW50cyk7XG4gICAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgbGV0IGExID0gKHRvRGVncmVlcyhNYXRoLmF0YW4yKGFbMF0gLSBjZW50ZXJbMF0sIGFbMV0gLSBjZW50ZXJbMV0pKSArIDM2MCkgJSAzNjA7XG4gICAgICAgIGxldCBhMiA9ICh0b0RlZ3JlZXMoTWF0aC5hdGFuMihiWzBdIC0gY2VudGVyWzBdLCBiWzFdIC0gY2VudGVyWzFdKSkgKyAzNjApICUgMzYwO1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChhMSAtIGEyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcG9pbnRzO1xuXG4gICAgZnVuY3Rpb24gdG9EZWdyZWVzKGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiBhbmdsZSAqICgxODAgLyBNYXRoLlBJKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kQ2VudHJvaWQocG9pbnRzKSB7XG4gICAgICAgIGxldCB4ID0gMDtcbiAgICAgICAgbGV0IHkgPSAwO1xuICAgICAgICBwb2ludHMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgIHggKz0gcFswXTtcbiAgICAgICAgICAgIHkgKz0gcFsxXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBjZW50ZXIgPSBbXTtcbiAgICAgICAgY2VudGVyLnB1c2goeCAvIHBvaW50cy5sZW5ndGgpO1xuICAgICAgICBjZW50ZXIucHVzaCh5IC8gcG9pbnRzLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBjZW50ZXI7XG4gICAgfVxufVxuXG4vLzwvZWRpdG9yLWZvbGQ+XG5cbi8vPGVkaXRvci1mb2xkIGRlc2M9XCJBbm90aGVyIHdheSBvZiBjYWxjdWxhdGluZyBjb25jYXZlIGh1bGwsIGJhc2luZyBvbiBkZWxhdW5heSBhbmQgcmVtb3ZpbmcgbG9uZyBsZW5ndGhcIj5cbi8vQWRhcHRlZCBmcm9tOiBodHRwczovL2JsLm9ja3Mub3JnL2VtZWVrcy85YWEwNDc4Y2Y3MzkxNjRjOTAwNVxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdmVIdWxsMShzaXRlcywgbG9uZ0VkZ2UpIHtcbiAgICAvL1RPRE86IENvbnNpZGVyIHRvIHJldXNlIHRoZSBwcmV2aW91cyBkZWxhdW5heSByZXN1bHQgKGJ1dCBob3cgdG8gcGFzcyB0byB0aGlzIGluIGEgcHJvcGVyIHdheSlcbiAgICBsZXQgZGVsYXVuYXkgPSBEZWxhdW5heS5mcm9tKHNpdGVzKTtcbiAgICAvL1JlbW92ZSB0aGUgbG9uZyBkaXN0YW5jZSBlZGdlc1xuICAgIGxldCBjZWxscyA9IFtdO1xuICAgIGxvbmdFZGdlID0gbG9uZ0VkZ2UgLSAxMGUtMzsvL1N1YnN0cmFjdCBpdCBoZXJlIHNpbmNlIGl0IHdpbGwgYmUgYWRkZWQgbGF0ZXJcbiAgICBsZXQgdHJpYW5nbGVzID0gZGVsYXVuYXkudHJpYW5nbGVzO1xuICAgIC8vVE9ETzogTWF5IG5lZWQgdG8gY2hlY2sgdG8gY29udmVydCBmcm9tIGRlbGF1bmF5LnBvaW50cyAoeDAsIHkwLCB4MSwgeTEsIC4uLikgb3IgdGFrZSBkaXJlY3RseSBmcm9tIHNpdGVzIGxpa2UgdGhpcy5cbiAgICBsZXQgcG9pbnRzID0gc2l0ZXM7XG4gICAgd2hpbGUgKGNlbGxzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIGxvbmdFZGdlID0gbG9uZ0VkZ2UgKyAxMGUtMztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGQgPSBkaXN0YW5jZShwb2ludHNbdHJpYW5nbGVzW2kgKyBqXV0sIHBvaW50c1t0cmlhbmdsZXNbaSArIChqICsgMSkgJSAzXV0pO1xuICAgICAgICAgICAgICAgIGlmIChkIDwgbG9uZ0VkZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbHMucHVzaChbdHJpYW5nbGVzW2kgKyBqXSwgdHJpYW5nbGVzW2kgKyAoaiArIDEpICUgM11dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9kbyB0aGUgZWRnZSBjb3VudFxuICAgIGxldCBlZGdlQ291bnQgPSB7fTtcbiAgICBjZWxscy5mb3JFYWNoKGVkZ2UgPT4ge1xuICAgICAgICBsZXQgdGhlS2V5ID0gZWRnZS5zb3J0KCkuam9pbignLCcpO1xuICAgICAgICBlZGdlQ291bnRbdGhlS2V5XSA9IGVkZ2VDb3VudFt0aGVLZXldID8gZWRnZUNvdW50W3RoZUtleV0gOiAwICsgMTtcbiAgICB9KTtcbiAgICAvL0ZpbHRlciB0aGUgaW5uZXIgZWRnZXMgKGR1cGxpY2F0ZWQpLlxuICAgIGNlbGxzID0gY2VsbHMuZmlsdGVyKGVkZ2UgPT4ge1xuICAgICAgICBsZXQgdGhlS2V5ID0gZWRnZS5zb3J0KCkuam9pbignLCcpO1xuICAgICAgICByZXR1cm4gZWRnZUNvdW50W3RoZUtleV0gPT09IDE7XG4gICAgfSlcbiAgICAvL05leHQgd2UgcmVtb3ZlIHRoZSBkdXBsaWNhdGVkIGVkZ2VzID0+IG9ubHkgdGFrZSB0aGUgdW5pcXVlIHBvaW50cy5cbiAgICAvLyBjZWxscyA9IF8udW5pcShjZWxscywgZmFsc2UsIGQgPT4gZC5zb3J0KCkuam9pbignLCcpKTtcbiAgICByZXR1cm4gY2VsbHM7XG59XG5cbi8vPC9lZGl0b3ItZm9sZD5cblxuLy8iLCJpbXBvcnQge2NvbmNhdmVIdWxsLCBjb252ZXhIdWxsLCBjb25jYXZlSHVsbEFyZWEsIGNvbnZleEh1bGxBcmVhLCBjb25jYXZlSHVsbDF9IGZyb20gXCIuL2h1bGxzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb252ZXgge1xuICAgIGNvbnN0cnVjdG9yKHRyZWUsIGFscGhhKSB7XG4gICAgICAgIHRoaXMudHJlZSA9IHRyZWU7XG4gICAgICAgIHRoaXMuYWxwaGEgPSAxL2FscGhhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29udmV4IHNjb3JlXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBzY29yZSgpIHtcbiAgICAgICAgbGV0IGNvbmNhdmVBcmVhID0gY29uY2F2ZUh1bGxBcmVhKHRoaXMuY29uY2F2ZUh1bGwoKSk7XG4gICAgICAgIGxldCBjb252ZXhBcmVhID0gY29udmV4SHVsbEFyZWEodGhpcy5jb252ZXhIdWxsKCkpO1xuICAgICAgICBpZihjb252ZXhBcmVhPT09MCl7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F2ZUFyZWEgLyBjb252ZXhBcmVhO1xuICAgIH1cblxuICAgIGNvbmNhdmVIdWxsKCkge1xuICAgICAgICBpZighdGhpcy5jY2gpe1xuICAgICAgICAgICAgLy9DbG9uZSB0aGUgdHJlZSB0byBhdm9pZCBtb2RpZnlpbmcgaXRcbiAgICAgICAgICAgIGxldCB0cmVlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnRyZWUpKTtcbiAgICAgICAgICAgIGxldCBzaXRlcyA9IHRyZWUubm9kZXMubWFwKGQgPT4gZC5pZCk7XG4gICAgICAgICAgICBsZXQgY2NoID0gY29uY2F2ZUh1bGwodGhpcy5hbHBoYSwgc2l0ZXMpO1xuICAgICAgICAgICAgLy8gd2hpbGUoY2NoLmxlbmd0aCA9PSAwICAgKXtcbiAgICAgICAgICAgIC8vICAgICAvLyAvL0FkZCBhIHJhbmRvbSBmYWN0b3IgdG8gYXZvaWQgcmVtb3ZpbmcgYWxsIHBvaW50c1xuICAgICAgICAgICAgLy8gICAgIC8vIGNvbnN0IG5ld1NpdGVzID0gc2l0ZXMubWFwKHA9PntcbiAgICAgICAgICAgIC8vICAgICAvLyAgICAgbGV0IG5ld1AgPSBbXTtcbiAgICAgICAgICAgIC8vICAgICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyAgICAgLy8gICAgICAgICBuZXdQW2ldID0gcFtpXSArIChNYXRoLnJhbmRvbSgpIC0gMC41KSoxMGUtNTtcbiAgICAgICAgICAgIC8vICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gICAgIC8vICAgICByZXR1cm4gbmV3UDtcbiAgICAgICAgICAgIC8vICAgICAvLyB9KTtcbiAgICAgICAgICAgIC8vICAgICAvLyBjY2ggPSBjb25jYXZlSHVsbCh0aGlzLmFscGhhLCBuZXdTaXRlcyk7XG4gICAgICAgICAgICAvLyAgICAgLy9DaGFuZ2UgYWxwaGEgYSBsaXR0bGUgYml0XG4gICAgICAgICAgICAvLyAgICAgLy8gdGhpcy5hbHBoYSA9IHRoaXMuYWxwaGEgLSAxMGUtMztcbiAgICAgICAgICAgIC8vICAgICAvLyBjY2ggPSBjb25jYXZlSHVsbCh0aGlzLmFscGhhLCBzaXRlcyk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgIC8vc3dpdGNoIHRvIGRlbGF1bmF5IHdheSBvZiBjYWxjdWxhdGluZyBhbHBoYSBzaGFwZS5cbiAgICAgICAgICAgIC8vICAgICBjY2ggPSBjb25jYXZlSHVsbDEoc2NhZ25vc3RpY3MuZGVsYXVuYXksIDEvdGhpcy5hbHBoYSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB0aGlzLmNjaCA9IGNjaDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jY2g7XG4gICAgfVxuXG4gICAgY29udmV4SHVsbCgpIHtcbiAgICAgICAgaWYoIXRoaXMuY3ZoKXtcbiAgICAgICAgICAgIC8vQ2xvbmUgdGhlIHRyZWUgdG8gYXZvaWQgbW9kaWZ5aW5nIGl0XG4gICAgICAgICAgICBsZXQgdHJlZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy50cmVlKSk7XG4gICAgICAgICAgICBsZXQgc2l0ZXMgPSB0cmVlLm5vZGVzLm1hcChkID0+IGQuaWQpO1xuICAgICAgICAgICAgdGhpcy5jdmggPSBjb252ZXhIdWxsKHNpdGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jdmg7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtjb25jYXZlSHVsbExlbmd0aCwgY29uY2F2ZUh1bGxBcmVhfSBmcm9tIFwiLi9odWxsc1wiO1xuXG5leHBvcnQgY2xhc3MgU2tpbm55IHtcbiAgICBjb25zdHJ1Y3RvcihhbHBoYUh1bGwpIHtcbiAgICAgICAgLy9DbG9uZSBpdCBpbiBvcmRlciB0byBhdm9pZCBtb2RpZnlpbmcgaXQuXG4gICAgICAgIHRoaXMuYWxwaGFIdWxsID0gYWxwaGFIdWxsLnNsaWNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc2tpbm55IHNjb3JlXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBzY29yZSgpIHtcbiAgICAgICAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoNCpNYXRoLlBJKmNvbmNhdmVIdWxsQXJlYSh0aGlzLmFscGhhSHVsbCkpL2NvbmNhdmVIdWxsTGVuZ3RoKHRoaXMuYWxwaGFIdWxsKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2dldEFsbFYyQ29ybmVyc0Zyb21UcmVlLCBnZXRBbGxWMXNGcm9tVHJlZX0gZnJvbSBcIi4va3J1c2thbC1tc3RcIjtcblxuZXhwb3J0IGNsYXNzIFN0cmluZ3kge1xuICAgIGNvbnN0cnVjdG9yKHRyZWUpIHtcbiAgICAgICAgLy9DbG9uZSB0aGUgdHJlZSB0byBhdm9pZCBtb2RpZnlpbmcgaXRcbiAgICAgICAgdGhpcy50cmVlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdHJpYXRlZCBzY29yZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2NvcmUoKSB7XG4gICAgICAgIC8vTG9vcCB0aHJvdWdoIHRoZSBub2Rlcy5cbiAgICAgICAgbGV0IHZlcnRpY2VzQ291bnQgPSB0aGlzLnRyZWUubm9kZXMubGVuZ3RoO1xuICAgICAgICBsZXQgdjJDb3VudCA9IHRoaXMuZ2V0QWxsVjJDb3JuZXJzKCkubGVuZ3RoO1xuICAgICAgICBsZXQgdjFDb3VudCA9IHRoaXMuZ2V0QWxsVjFzKCkubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdjJDb3VudC8odmVydGljZXNDb3VudC12MUNvdW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgY29ybmVycyAodGhyZWUgdmVydGljZXMpIG9mIHZlcnRpY2VzIG9mIGRlZ3JlZSB0d28gaW4gdGhlIGZvciBtYXQgb2ZcbiAgICAgKiBwb2ludDEsIHBvaW50MiwgcG9pbnQzID0+IHBvaW50MSBpcyB0aGUgdGhlIHZlcnRleCB3aXRoIGRlZ3JlZSB0d28gKHR3byBlZGdlcyBjb25uZWN0ZWQgdG8gaXQgYXJlIFtwb2ludDEsIHBvaW50Ml0gYW5kIFtwb2ludDEsIHBvaW50M10gKG9yZGVyIG9mIHRoZSBwb2ludHMgaW4gZWFjaCBlZGdlIGlzIG5vdCBpbXBvcnRhbnQpKS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0QWxsVjJDb3JuZXJzKCl7XG4gICAgICAgIHJldHVybiBnZXRBbGxWMkNvcm5lcnNGcm9tVHJlZSh0aGlzLnRyZWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJuc1xuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRBbGxWMXMoKXtcbiAgICAgICAgcmV0dXJuIGdldEFsbFYxc0Zyb21UcmVlKHRoaXMudHJlZSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIE1vbm90b25pYyB7XG4gICAgY29uc3RydWN0b3IocG9pbnRzKSB7XG4gICAgICAgIC8vQ2xvbmUgaXQgaW4gb3JkZXIgdG8gYXZvaWQgbW9kaWZ5aW5nIGl0LlxuICAgICAgICB0aGlzLnBvaW50cyA9IHBvaW50cy5zbGljZSgwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBtb25vdG9uaWMgc2NvcmVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIHNjb3JlKCkge1xuICAgICAgICBsZXQgeEFyciA9IFtdO1xuICAgICAgICBsZXQgeUFyciA9IFtdO1xuICAgICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKHA9PntcbiAgICAgICAgICAgIHhBcnIucHVzaChwWzBdKTtcbiAgICAgICAgICAgIHlBcnIucHVzaChwWzFdKVxuICAgICAgICB9KVxuICAgICAgICBsZXQgciA9IGNvbXB1dGVTcGVhcm1hbnMoeEFyciwgeUFycik7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhyLCAyKTtcblxuICAgICAgICAvKipBZG9wdGVkIGZyb206IGh0dHBzOi8vYmwub2Nrcy5vcmcvbmt1bGxtYW4vZjY1ZDU2MTk4NDNkYzIyZTA2MWQ5NTcyNDkxMjE0MDgqKi9cbiAgICAgICAgZnVuY3Rpb24gY29tcHV0ZVNwZWFybWFucyhhcnJYLCBhcnJZKSB7XG4gICAgICAgICAgICAvLyBzaW1wbGUgZXJyb3IgaGFuZGxpbmcgZm9yIGlucHV0IGFycmF5cyBvZiBub25lcXVhbCBsZW5ndGhzXG4gICAgICAgICAgICBpZiAoYXJyWC5sZW5ndGggIT09IGFyclkubGVuZ3RoKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgICAgIC8vIG51bWJlciBvZiBvYnNlcnZhdGlvbnNcbiAgICAgICAgICAgIGxldCBuID0gYXJyWC5sZW5ndGg7XG5cbiAgICAgICAgICAgIC8vIHJhbmsgZGF0YXNldHNcbiAgICAgICAgICAgIGxldCB4UmFua2VkID0gcmFua0FycmF5KGFyclgpLFxuICAgICAgICAgICAgICAgIHlSYW5rZWQgPSByYW5rQXJyYXkoYXJyWSk7XG5cbiAgICAgICAgICAgIC8vIHN1bSBvZiBkaXN0YW5jZXMgYmV0d2VlbiByYW5rc1xuICAgICAgICAgICAgbGV0IGRzcSA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIGRzcSArPSBNYXRoLnBvdyh4UmFua2VkW2ldIC0geVJhbmtlZFtpXSwgMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvbXB1dGUgY29ycmVjdGlvbiBmb3IgdGllc1xuICAgICAgICAgICAgbGV0IHhUaWVzID0gY291bnRUaWVzKGFyclgpLFxuICAgICAgICAgICAgICAgIHlUaWVzID0gY291bnRUaWVzKGFyclkpO1xuICAgICAgICAgICAgbGV0IHhDb3JyZWN0aW9uID0gMCxcbiAgICAgICAgICAgICAgICB5Q29ycmVjdGlvbiA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCB0aWVMZW5ndGggaW4geFRpZXMpIHtcbiAgICAgICAgICAgICAgICB4Q29ycmVjdGlvbiArPSB4VGllc1t0aWVMZW5ndGhdICogdGllTGVuZ3RoICogKE1hdGgucG93KHRpZUxlbmd0aCwgMikgLSAxKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeENvcnJlY3Rpb24gLz0gMTIuMDtcbiAgICAgICAgICAgIGZvciAobGV0IHRpZUxlbmd0aCBpbiB5VGllcykge1xuICAgICAgICAgICAgICAgIHlDb3JyZWN0aW9uICs9IHlUaWVzW3RpZUxlbmd0aF0gKiB0aWVMZW5ndGggKiAoTWF0aC5wb3codGllTGVuZ3RoLCAyKSAtIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5Q29ycmVjdGlvbiAvPSAxMi4wO1xuXG4gICAgICAgICAgICAvLyBkZW5vbWluYXRvclxuICAgICAgICAgICAgbGV0IGRlbm9taW5hdG9yID0gbiAqIChNYXRoLnBvdyhuLCAyKSAtIDEpIC8gNi4wO1xuXG4gICAgICAgICAgICAvLyBjb21wdXRlIHJob1xuICAgICAgICAgICAgbGV0IHJobyA9IGRlbm9taW5hdG9yIC0gZHNxIC0geENvcnJlY3Rpb24gLSB5Q29ycmVjdGlvbjtcblxuICAgICAgICAgICAgbGV0IHggPSAoZGVub21pbmF0b3IgLSAyICogeENvcnJlY3Rpb24pICogKGRlbm9taW5hdG9yIC0gMiAqIHlDb3JyZWN0aW9uKTtcblxuICAgICAgICAgICAgaWYoeDw9MCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICByaG8gLz0gTWF0aC5zcXJ0KHgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmhvO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBDb21wdXRlcyB0aGUgcmFuayBhcnJheSBmb3IgYXJyLCB3aGVyZSBlYWNoIGVudHJ5IGluIGFyciBpc1xuICAgICAgICAgKiBhc3NpZ25lZCBhIHZhbHVlIDEgdGhydSBuLCB3aGVyZSBuIGlzIGFyci5sZW5ndGguXG4gICAgICAgICAqXG4gICAgICAgICAqIFRpZWQgZW50cmllcyBpbiBhcnIgYXJlIGVhY2ggZ2l2ZW4gdGhlIGF2ZXJhZ2UgcmFuayBvZiB0aGUgdGllcy5cbiAgICAgICAgICogTG93ZXIgcmFua3MgYXJlIG5vdCBpbmNyZWFzZWRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHJhbmtBcnJheShhcnIpIHtcblxuICAgICAgICAgICAgLy8gcmFua2luZyB3aXRob3V0IGF2ZXJhZ2luZ1xuICAgICAgICAgICAgbGV0IHNvcnRlZCA9IGFyci5zbGljZSgpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIgLSBhIH0pO1xuICAgICAgICAgICAgbGV0IHJhbmtzID0gYXJyLnNsaWNlKCkubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBzb3J0ZWQuaW5kZXhPZih2KSArIDEgfSk7XG5cbiAgICAgICAgICAgIC8vIGNvdW50cyBvZiBlYWNoIHJhbmtcbiAgICAgICAgICAgIGxldCBjb3VudHMgPSB7fTtcbiAgICAgICAgICAgIHJhbmtzLmZvckVhY2goZnVuY3Rpb24gKHgpIHsgY291bnRzW3hdID0gKGNvdW50c1t4XSB8fCAwKSArIDE7IH0pO1xuXG4gICAgICAgICAgICAvLyBhdmVyYWdlIGR1cGxpY2F0ZXNcbiAgICAgICAgICAgIHJhbmtzID0gcmFua3MubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICsgMC41ICogKChjb3VudHNbeF0gfHwgMCkgLSAxKTsgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByYW5rcztcbiAgICAgICAgfVxuICAgICAgICAvKiogQ291bnRzIHRoZSBudW1iZXIgb2YgdGllcyBpbiBhcnIsIGFuZCByZXR1cm5zXG4gICAgICAgICAqIGFuIG9iamVjdCB3aXRoXG4gICAgICAgICAqIGEga2V5IGZvciBlYWNoIHRpZSBsZW5ndGggKGFuIGVudHJ5IG4gZm9yIGVhY2ggbi13YXkgdGllKSBhbmRcbiAgICAgICAgICogYSB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBudW1iZXIgb2Yga2V5LXdheSAobi13YXkpIHRpZXNcbiAgICAgICAgICovXG4gICAgICAgICBmdW5jdGlvbiBjb3VudFRpZXMoYXJyKSB7XG4gICAgICAgICAgICBsZXQgdGllcyA9IHt9LFxuICAgICAgICAgICAgICAgIGFyclNvcnRlZCA9IGFyci5zbGljZSgpLnNvcnQoKSxcbiAgICAgICAgICAgICAgICBjdXJyVmFsdWUgPSBhcnJTb3J0ZWRbMF0sXG4gICAgICAgICAgICAgICAgdGllTGVuZ3RoID0gMTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnJTb3J0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJyU29ydGVkW2ldID09PSBjdXJyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGllTGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpZUxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aWVzW3RpZUxlbmd0aF0gPT09IHVuZGVmaW5lZCkgdGllc1t0aWVMZW5ndGhdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpZXNbdGllTGVuZ3RoXSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1cnJWYWx1ZSA9IGFyclNvcnRlZFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdGllTGVuZ3RoID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGllTGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmICh0aWVzW3RpZUxlbmd0aF0gPT09IHVuZGVmaW5lZCkgdGllc1t0aWVMZW5ndGhdID0gMDtcbiAgICAgICAgICAgICAgICB0aWVzW3RpZUxlbmd0aF0rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aWVzO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBOb3JtYWxpemVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwb2ludHMpIHtcbiAgICAgICAgdGhpcy5wb2ludHMgPSBwb2ludHMuc2xpY2UoMCk7XG4gICAgICAgIGxldCBbeEFyciwgeUFycl0gPSBbdGhpcy54QXJyLCB0aGlzLnlBcnJdID0gXy51bnppcCh0aGlzLnBvaW50cyksXG4gICAgICAgICAgICBtYXhYID0gdGhpcy5tYXhYID0gXy5tYXgoeEFyciksXG4gICAgICAgICAgICBtaW5YID0gdGhpcy5taW5YID0gXy5taW4oeEFyciksXG4gICAgICAgICAgICBtYXhZID0gdGhpcy5tYXhZID0gXy5tYXgoeUFyciksXG4gICAgICAgICAgICBtaW5ZID0gdGhpcy5taW5ZID0gXy5taW4oeUFyciksXG4gICAgICAgICAgICByYW5nZVggPSB0aGlzLnJhbmdlWCA9IChtYXhYIT1taW5YKSA/IG1heFggLSBtaW5YOiAxLFxuICAgICAgICAgICAgcmFuZ2VZID0gdGhpcy5yYW5nZVkgPSAobWF4WSE9bWluWSkgPyBtYXhZIC0gbWluWTogMSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYQXJyID0gdGhpcy5ub3JtYWxpemVkWEFyciA9IHhBcnIubWFwKHggPT4gKHggLSBtaW5YKSAvIHJhbmdlWCksXG4gICAgICAgICAgICBub3JtYWxpemVkWUFyciA9IHRoaXMubm9ybWFsaXplZFlBcnIgPSB5QXJyLm1hcCh5ID0+ICh5IC0gbWluWSkgLyByYW5nZVkpO1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZWRQb2ludHMgPSBfLnppcChub3JtYWxpemVkWEFyciwgbm9ybWFsaXplZFlBcnIpO1xuICAgICAgICAvL0FkZCBvbmUgc3RlcCB0byBwYXNzIHRoZSBkYXRhIG92ZXIgaWYgdGhlcmUgaXMuXG4gICAgICAgIGxldCBsZW5ndGggPSB0aGlzLnBvaW50cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsaXplZFBvaW50c1tpXS5kYXRhID0gdGhpcy5wb2ludHNbaV0uZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElucHV0IGEgc2V0IG9mIHBvaW50cyBpbiB0aGlzIHNjYWxlIHJhbmdlIFswLCAxXSBhbmQgd2lsbCBiZSBzY2FsZWQgYmFjayB0b1xuICAgICAqIC0gT3JpZ2luYWwgc2NhbGUgKFttaW5YLCBtYXhYXSwgW21pblksIG1heFldKVxuICAgICAqIEBwYXJhbSBwb2ludHNcbiAgICAgKi9cbiAgICBzY2FsZUJhY2tQb2ludHMocG9pbnRzKSB7XG4gICAgICAgIHJldHVybiBwb2ludHMubWFwKHBvaW50PT57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FsZUJhY2tQb2ludChwb2ludCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnB1dCBhIHNpbmdsZSBwb2ludCBpbiB0aGlzIHNjYWxlIHJhbmdlIFswLCAxXSBhbmQgd2lsbCBiZSBzY2FsZWQgYmFjayB0b1xuICAgICAqIC0gT3JpZ2luYWwgc2NhbGUgKFttaW5YLCBtYXhYXSwgW21pblksIG1heFldKVxuICAgICAqIEBwYXJhbSBwb2ludHNcbiAgICAgKi9cbiAgICBzY2FsZUJhY2tQb2ludChwb2ludCkge1xuICAgICAgICBsZXQgeHMgPSBwb2ludFswXSxcbiAgICAgICAgICAgIHggPSB0aGlzLnJhbmdlWCAqIHhzICsgdGhpcy5taW5YLFxuICAgICAgICAgICAgeXMgPSBwb2ludFsxXSxcbiAgICAgICAgICAgIHkgPSB0aGlzLnJhbmdlWSAqIHlzICsgdGhpcy5taW5ZO1xuICAgICAgICByZXR1cm4gW3gsIHldO1xuICAgIH1cbn1cbiIsImltcG9ydCB7ZGlzdGFuY2V9IGZyb20gXCIuL2tydXNrYWwtbXN0XCI7XG5pbXBvcnQgXyBmcm9tIFwidW5kZXJzY29yZVwiO1xuXG5leHBvcnQgY2xhc3MgTGVhZGVyQmlubmVye1xuICAgIGNvbnN0cnVjdG9yKHBvaW50cywgcmFkaXVzKXtcbiAgICAgICAgLy9UT0RPOiBTaG91bGQgY2hlY2sgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiAzIHVuaXF1ZSB2YWx1ZXMgaGVyZSBvciBldmVuIGFmdGVyIHRoZSBiaW5uaW5nLlxuICAgICAgICAvL1RPRE86IE1heSBuZWVkIHRvIGNsb25lIHRoZSBwb2ludHMgdG8gYXZvaWQgbW9kaWZ5aW5nIGl0LCBidXQgd2UgZG9uJ3QgZG8gdG8gcmVzZXJ2ZSBvdGhlciBkYXRhIG9yIHRvIG1ha2UgdGhlIHByb2Nlc3MgZmFzdGVyXG4gICAgICAgIC8vIC8vQ2xvbmUgdGhlc2UgdG8gYXZvaWQgbW9kaWZ5aW5nIHRoZW1cbiAgICAgICAgLy8gdGhpcy5wb2ludHMgPSBwb2ludHMubWFwKHA9PnAuc2xpY2UoMCkpO1xuICAgICAgICB0aGlzLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gICAgfVxuICAgIGdldCBsZWFkZXJzKCl7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IHRoZUxlYWRlcnMgPSBbXTtcbiAgICAgICAgLy9maW5kIGFsbCB0aGUgbGVhZGVyc1xuICAgICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKHBvaW50PT57XG4gICAgICAgICAgICBsZXQgbGVhZGVyID0gY2xvc2VzdExlYWRlcih0aGVMZWFkZXJzLCBwb2ludCk7XG4gICAgICAgICAgICBpZighbGVhZGVyKXtcbiAgICAgICAgICAgICAgICBsZXQgbmV3TGVhZGVyID0gW107XG4gICAgICAgICAgICAgICAgbmV3TGVhZGVyLnggPSBwb2ludFswXTtcbiAgICAgICAgICAgICAgICBuZXdMZWFkZXIueSA9IHBvaW50WzFdO1xuICAgICAgICAgICAgICAgIHRoZUxlYWRlcnMucHVzaChuZXdMZWFkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy9ub3cgZG8gdGhpcyBhZ2FpbiB0byBzZXQgdGhlIGNsb3Nlc3QgbGVhZGVyLlxuICAgICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKHBvaW50PT57XG4gICAgICAgICAgIGxldCBsZWFkZXIgPSBjbG9zZXN0TGVhZGVyKHRoZUxlYWRlcnMsIHBvaW50KTtcbiAgICAgICAgICAgbGVhZGVyLnB1c2gocG9pbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoZUxlYWRlcnM7XG4gICAgICAgIGZ1bmN0aW9uIGNsb3Nlc3RMZWFkZXIobGVhZGVycywgcG9pbnQpe1xuICAgICAgICAgICAgbGV0IGxlbmd0aCA9IGxlYWRlcnMubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IG1pbkRpc3RhbmNlID0gMjsvL3NlbGVjdCAyIHNpbmNlIG5vcm1hbGl6ZWQgZGlzdGFuY2UgY2FuJ3QgIGJlIGdyZWF0ZXIgdGhhbiAyLlxuICAgICAgICAgICAgbGV0IHRoZUxlYWRlciA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGwgPSBsZWFkZXJzW2ldO1xuICAgICAgICAgICAgICAgIGxldCBkID0gZGlzdGFuY2UoW2wueCwgbC55XSwgcG9pbnQpO1xuICAgICAgICAgICAgICAgIGlmKGQ8IHNlbGYucmFkaXVzKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoZDxtaW5EaXN0YW5jZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVMZWFkZXIgPSBsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoZUxlYWRlcjtcblxuICAgICAgICAgICAgLy8gbGV0IGRpc3RhbmNlcyA9IGxlYWRlcnMubWFwKGw9PmRpc3RhbmNlKFtsLngsIGwueV0sIHBvaW50KSk7XG4gICAgICAgICAgICAvLyAvL0ZpbHRlciB0aGUgZGlzdGFuY2UgdG8gYmUgPD0gdGhlIHJhZGl1c1xuICAgICAgICAgICAgLy8gbGV0IGNvcGllZERpc3RhbmNlcyA9IGRpc3RhbmNlcy5maWx0ZXIoZD0+ZDxzZWxmLnJhZGl1cyk7XG4gICAgICAgICAgICAvLyBpZihjb3BpZWREaXN0YW5jZXMubGVuZ3RoPT09MCl7XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvLyBsZXQgdGhlRGlzdGFuY2UgPSBfLm1pbihkaXN0YW5jZXMpO1xuICAgICAgICAgICAgLy8gbGV0IHRoZUxlYWRlciA9IGxlYWRlcnNbZGlzdGFuY2VzLmluZGV4T2YodGhlRGlzdGFuY2UpXTtcbiAgICAgICAgICAgIC8vIHJldHVybiB0aGVMZWFkZXI7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy9JbnNwaXJlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1oZXhiaW4vYmxvYi9tYXN0ZXIvc3JjL2hleGJpbi5qc1xuZXhwb3J0IGZ1bmN0aW9uIEJpbm5lcigpe1xuICAgIGxldCB0aGlyZFBpID0gTWF0aC5QSS8zLFxuICAgIGFuZ2xlcyA9IFswLCB0aGlyZFBpLCAyKnRoaXJkUGksIDMqdGhpcmRQaSwgNCp0aGlyZFBpLCA1KnRoaXJkUGldO1xuXG4gICAgZnVuY3Rpb24gcG9pbnRYKGQpe1xuICAgICAgICByZXR1cm4gZFswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG9pbnRZKGQpe1xuICAgICAgICByZXR1cm4gZFsxXTtcbiAgICB9XG5cbiAgICB2YXIgeDAgPSAwLFxuICAgICAgICB5MCA9IDAsXG4gICAgICAgIHgxID0gMSxcbiAgICAgICAgeTEgPSAxLFxuICAgICAgICB4ID0gcG9pbnRYLFxuICAgICAgICB5ID0gcG9pbnRZLFxuICAgICAgICByLFxuICAgICAgICBkeCxcbiAgICAgICAgZHk7XG5cbiAgICBmdW5jdGlvbiBoZXhiaW4ocG9pbnRzKXtcbiAgICAgICAgdmFyIGJpbnNCeUlkID0ge30sIGJpbnMgPSBbXSwgaSwgbiA9IHBvaW50cy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgaWYgKGlzTmFOKHB4ID0gK3guY2FsbChudWxsLCBwb2ludCA9IHBvaW50c1tpXSwgaSwgcG9pbnRzKSlcbiAgICAgICAgICAgICAgICB8fCBpc05hTihweSA9ICt5LmNhbGwobnVsbCwgcG9pbnQsIGksIHBvaW50cykpKSBjb250aW51ZTtcblxuICAgICAgICAgICAgdmFyIHBvaW50LFxuICAgICAgICAgICAgICAgIHB4LFxuICAgICAgICAgICAgICAgIHB5LFxuICAgICAgICAgICAgICAgIHBqID0gTWF0aC5yb3VuZChweSA9IHB5IC8gZHkpLFxuICAgICAgICAgICAgICAgIHBpID0gTWF0aC5yb3VuZChweCA9IHB4IC8gZHggLSAocGogJiAxKSAvIDIpLFxuICAgICAgICAgICAgICAgIHB5MSA9IHB5IC0gcGo7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhweTEpICogMyA+IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHgxID0gcHggLSBwaSxcbiAgICAgICAgICAgICAgICAgICAgcGkyID0gcGkgKyAocHggPCBwaSA/IC0xIDogMSkgLyAyLFxuICAgICAgICAgICAgICAgICAgICBwajIgPSBwaiArIChweSA8IHBqID8gLTEgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgcHgyID0gcHggLSBwaTIsXG4gICAgICAgICAgICAgICAgICAgIHB5MiA9IHB5IC0gcGoyO1xuICAgICAgICAgICAgICAgIGlmIChweDEgKiBweDEgKyBweTEgKiBweTEgPiBweDIgKiBweDIgKyBweTIgKiBweTIpIHBpID0gcGkyICsgKHBqICYgMSA/IDEgOiAtMSkgLyAyLCBwaiA9IHBqMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGlkID0gcGkgKyBcIi1cIiArIHBqLCBiaW4gPSBiaW5zQnlJZFtpZF07XG4gICAgICAgICAgICBpZiAoYmluKSBiaW4ucHVzaChwb2ludCk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBiaW5zLnB1c2goYmluID0gYmluc0J5SWRbaWRdID0gW3BvaW50XSk7XG4gICAgICAgICAgICAgICAgYmluLnggPSAocGkgKyAocGogJiAxKSAvIDIpICogZHg7XG4gICAgICAgICAgICAgICAgYmluLnkgPSBwaiAqIGR5O1xuICAgICAgICAgICAgICAgIC8vVE9ETzogZml4IHRoaXMgc2luY2UgdGhlcmUgYXJlIHJlc3VsdHMgd2l0aCBiaW4ueCwgYmluLnkgPiAxID0+IHdlIG1heSBuZWVkIHRvIGRvIHRoZSByb3VuZGluZy5cbiAgICAgICAgICAgICAgICAvLyBpZihiaW4ueD4xKXtiaW4ueCA9IDE7fVxuICAgICAgICAgICAgICAgIC8vIGlmKGJpbi55PjEpe2Jpbi55ID0xO31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBiaW5zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoZXhhZ29uKHJhZGl1cyl7XG4gICAgICAgIHZhciB4MCA9IDAsIHkwID0gMDtcbiAgICAgICAgcmV0dXJuIGFuZ2xlcy5tYXAoZnVuY3Rpb24oYW5nbGUpIHtcbiAgICAgICAgICAgIHZhciB4MSA9IE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgICAgICAgICAgICB5MSA9IC1NYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICAgICAgZHggPSB4MSAtIHgwLFxuICAgICAgICAgICAgICAgIGR5ID0geTEgLSB5MDtcbiAgICAgICAgICAgIHgwID0geDEsIHkwID0geTE7XG5cbiAgICAgICAgICAgIHJldHVybiBbZHgsIGR5XTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy9FeHBvcnQgaXRcbiAgICB0aGlzLmhleGJpbiA9IGhleGJpbjtcbiAgICB0aGlzLmhleGFnb24gPSBmdW5jdGlvbihyYWRpdXMpe1xuICAgICAgICByZXR1cm4gXCJtXCIgKyBoZXhhZ29uKHJhZGl1cyA9PSBudWxsID8gciA6ICtyYWRpdXMpLmpvaW4oXCJsXCIpICsgXCJ6XCI7XG4gICAgfTtcbiAgICB0aGlzLmNlbnRlcnMgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgY2VudGVycyA9IFtdLFxuICAgICAgICAgICAgaiA9IE1hdGgucm91bmQoeTAgLyBkeSksXG4gICAgICAgICAgICBpID0gTWF0aC5yb3VuZCh4MCAvIGR4KTtcbiAgICAgICAgZm9yICh2YXIgeSA9IGogKiBkeTsgeSA8IHkxICsgcjsgeSArPSBkeSwgKytqKSB7XG4gICAgICAgICAgICBmb3IgKHZhciB4ID0gaSAqIGR4ICsgKGogJiAxKSAqIGR4IC8gMjsgeCA8IHgxICsgZHggLyAyOyB4ICs9IGR4KSB7XG4gICAgICAgICAgICAgICAgY2VudGVycy5wdXNoKFt4LCB5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlbnRlcnM7XG4gICAgfTtcbiAgICB0aGlzLm1lc2ggPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSBoZXhhZ29uKHIpLnNsaWNlKDAsIDQpLmpvaW4oXCJsXCIpO1xuICAgICAgICByZXR1cm4gaGV4YmluLmNlbnRlcnMoKS5tYXAoZnVuY3Rpb24ocCkgeyByZXR1cm4gXCJNXCIgKyBwICsgXCJtXCIgKyBmcmFnbWVudDsgfSkuam9pbihcIlwiKTtcbiAgICB9O1xuICAgIC8vU2V0dGVycy9nZXR0ZXJzXG4gICAgdGhpcy54ID0gZnVuY3Rpb24oXyl7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSBfLCB0aGlzKSA6IHg7XG4gICAgfVxuICAgIHRoaXMueSA9IGZ1bmN0aW9uKF8pe1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gXywgdGhpcykgOiB5O1xuICAgIH1cbiAgICB0aGlzLnJhZGl1cyA9IGZ1bmN0aW9uKF8pe1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyPSArXywgZHggPSByICogMiAqIE1hdGguc2luKHRoaXJkUGkpLCBkeSA9IHIqMS41LCB0aGlzKTogcjtcbiAgICB9XG4gICAgdGhpcy5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHkwID0gMCwgeDEgPSArX1swXSwgeTEgPSArX1sxXSwgdGhpcykgOiBbeDEgLSB4MCwgeTEgLSB5MF07XG4gICAgfTtcbiAgICB0aGlzLmV4dGVudCA9IGZ1bmN0aW9uKF8pe1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdLCB0aGlzKTogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmFkaXVzKDEpO1xufSIsImltcG9ydCB7ZGlzdGFuY2V9IGZyb20gXCIuL2tydXNrYWwtbXN0XCI7XG5cbmV4cG9ydCBjbGFzcyBSZWN0YW5ndWxhckJpbm5lciB7XG4gICAgY29uc3RydWN0b3IocG9pbnRzLCBncmlkTnVtYmVyKSB7XG4gICAgICAgIC8vVE9ETzogU2hvdWxkIGNoZWNrIGlmIHRoZXJlIGFyZSBtb3JlIHRoYW4gMyB1bmlxdWUgdmFsdWVzIGhlcmUgb3IgZXZlbiBhZnRlciB0aGUgYmlubmluZy5cbiAgICAgICAgLy9UT0RPOiBNYXkgbmVlZCB0byBjbG9uZSB0aGUgcG9pbnRzIHRvIGF2b2lkIG1vZGlmeWluZyBpdCwgYnV0IHdlIGRvbid0IGRvIHRvIHJlc2VydmUgb3RoZXIgZGF0YSBvciB0byBtYWtlIHRoZSBwcm9jZXNzIGZhc3RlclxuICAgICAgICAvLyAvL0Nsb25lIHRoZXNlIHRvIGF2b2lkIG1vZGlmeWluZyB0aGVtXG4gICAgICAgIC8vIHRoaXMucG9pbnRzID0gcG9pbnRzLm1hcChwPT5wLnNsaWNlKDApKTtcbiAgICAgICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIHRoaXMuZ3JpZE51bWJlciA9IGdyaWROdW1iZXI7XG4gICAgICAgIHRoaXMuZ3JpZFNpemUgPSAxLjAgLyBncmlkTnVtYmVyO1xuICAgIH1cblxuICAgIGdldCByZWN0YW5nbGVzKCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgbGV0IGdyaWROdW1iZXIgPSB0aGlzLmdyaWROdW1iZXI7XG4gICAgICAgIGxldCBncmlkU2l6ZSA9IDEuMCAvIGdyaWROdW1iZXI7XG4gICAgICAgIGxldCBiaW5zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JpZE51bWJlcjsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncmlkTnVtYmVyOyBqKyspIHtcbiAgICAgICAgICAgICAgICBiID0gW107Ly9iaW4gYXMgYW4gZW1wdHkgYXJyYXkuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiaW5zLnB1c2goYik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBpID0gMDsgcGkgPCBuOyBwaSsrKSB7XG4gICAgICAgICAgICBsZXQgcG9pbnQgPSBwb2ludHNbcGldO1xuICAgICAgICAgICAgbGV0IHggPSBwb2ludFswXTtcbiAgICAgICAgICAgIGxldCB5ID0gcG9pbnRbMV07XG4gICAgICAgICAgICBsZXQgaiA9IHggPT0gMSA/IGdyaWROdW1iZXIgLSAxIDogTWF0aC5mbG9vcih4IC8gZ3JpZFNpemUpO1xuICAgICAgICAgICAgbGV0IGkgPSB5ID09IDAgPyBncmlkTnVtYmVyIC0gMSA6IE1hdGguZmxvb3IoKDEgLSB5KSAvIGdyaWRTaXplKTtcbiAgICAgICAgICAgIGJpbnNbaV1bal0ucHVzaChwb2ludCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJpbnM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtjcmVhdGVHcmFwaH0gZnJvbSBcIi4vbW9kdWxlcy9rcnVza2FsLW1zdFwiO1xuaW1wb3J0IHttc3R9IGZyb20gXCIuL21vZHVsZXMva3J1c2thbC1tc3RcIjtcbmltcG9ydCB7T3V0bHlpbmd9IGZyb20gXCIuL21vZHVsZXMvb3V0bHlpbmdcIjtcbmltcG9ydCB7U2tld2VkfSBmcm9tIFwiLi9tb2R1bGVzL3NrZXdlZFwiO1xuaW1wb3J0IHtTcGFyc2V9IGZyb20gXCIuL21vZHVsZXMvc3BhcnNlXCI7XG5pbXBvcnQge0NsdW1weX0gZnJvbSBcIi4vbW9kdWxlcy9jbHVtcHlcIjtcbmltcG9ydCB7U3RyaWF0ZWR9IGZyb20gXCIuL21vZHVsZXMvc3RyaWF0ZWRcIjtcbmltcG9ydCB7Q29udmV4fSBmcm9tIFwiLi9tb2R1bGVzL2NvbnZleFwiO1xuaW1wb3J0IHtTa2lubnl9IGZyb20gXCIuL21vZHVsZXMvc2tpbm55XCI7XG5pbXBvcnQge1N0cmluZ3l9IGZyb20gXCIuL21vZHVsZXMvc3RyaW5neVwiO1xuaW1wb3J0IHtNb25vdG9uaWN9IGZyb20gXCIuL21vZHVsZXMvbW9ub3RvbmljXCI7XG5pbXBvcnQge05vcm1hbGl6ZXJ9IGZyb20gXCIuL21vZHVsZXMvbm9ybWFsaXplclwiO1xuaW1wb3J0IHtMZWFkZXJCaW5uZXJ9IGZyb20gXCIuL21vZHVsZXMvbGVhZGVyYmlubmVyXCI7XG5pbXBvcnQge0Jpbm5lcn0gZnJvbSBcIi4vbW9kdWxlcy9iaW5uZXJcIjtcbmltcG9ydCBfIGZyb20gXCJ1bmRlcnNjb3JlXCI7XG5pbXBvcnQge2RlbGF1bmF5RnJvbVBvaW50c30gZnJvbSBcIi4vbW9kdWxlcy9kZWxhdW5heVwiO1xuaW1wb3J0IHtSZWN0YW5ndWxhckJpbm5lcn0gZnJvbSBcIi4vbW9kdWxlcy9yZWN0YW5ndWxhcmJpbm5lclwiO1xuXG5pZiAoIXdpbmRvdykge1xuICAgIHdpbmRvdyA9IHNlbGY7XG59XG4oZnVuY3Rpb24gKHdpbmRvdykge1xuICAgIC8qKlxuICAgICAqIGluaXRpYWxpemUgYSBzY2Fnbm9zdGljIG9iamVjdFxuICAgICAqIEBwYXJhbSBpbnB1dFBvaW50cyAgIHsqW11bXX0gc2V0IG9mIHBvaW50cyBmcm9tIHRoZSBzY2F0dGVyIHBsb3RcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAgIFNjYWdub3N0aWNzIG9wdGlvbnMge2JpblR5cGUsc3RhcnRCaW5HcmlkU2l6ZSwgaXNOb3JtYWxpemVkLCBpc0Jpbm5lZCwgb3V0bHlpbmdVcHBlckJvdW5kLCBtaW5CaW5zLCBtYXhCaW5zfVxuICAgICAqIEByZXR1cm4gc2NhZyBTY2Fnbm9zdGljcyBvYmplY3Qgd2l0aCBzY29yZXMgYW5kIGludGVybWVkaWF0ZSBjb21wdXRhdGlvbiByZXN1bHRzLlxuICAgICAqL1xuICAgIHdpbmRvdy5zY2Fnbm9zdGljcyA9IGZ1bmN0aW9uIChpbnB1dFBvaW50cywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGxldCB0aGlzSW5zdGFuY2UgPSB0aGlzO1xuICAgICAgICBsZXQgYmluVHlwZSA9IG9wdGlvbnMuYmluVHlwZSxcbiAgICAgICAgICAgIHN0YXJ0QmluR3JpZFNpemUgPSBvcHRpb25zLnN0YXJ0QmluR3JpZFNpemUsXG4gICAgICAgICAgICBpc05vcm1hbGl6ZWQgPSBvcHRpb25zLmlzTm9ybWFsaXplZCxcbiAgICAgICAgICAgIGlzQmlubmVkID0gb3B0aW9ucy5pc0Jpbm5lZCxcbiAgICAgICAgICAgIG91dGx5aW5nVXBwZXJCb3VuZCA9IG9wdGlvbnMub3V0bHlpbmdVcHBlckJvdW5kLFxuICAgICAgICAgICAgbWluQmlucyA9IG9wdGlvbnMubWluQmlucyxcbiAgICAgICAgICAgIG1heEJpbnMgPSBvcHRpb25zLm1heEJpbnM7XG4gICAgICAgIC8vQ2xvbmUgaXQgdG8gYXZvaWQgbW9kaWZ5aW5nIGl0LlxuICAgICAgICBsZXQgcG9pbnRzID0gaW5wdXRQb2ludHMuc2xpY2UoMCk7XG4gICAgICAgIGxldCBub3JtYWxpemVkUG9pbnRzID0gcG9pbnRzO1xuICAgICAgICAvKioqKioqVGhpcyBzZWN0aW9uIGlzIGFib3V0IG5vcm1hbGl6aW5nIHRoZSBkYXRhKioqKioqL1xuICAgICAgICBpZiAoIWlzTm9ybWFsaXplZCkge1xuICAgICAgICAgICAgbGV0IG5vcm1hbGl6ZXIgPSBuZXcgTm9ybWFsaXplcihwb2ludHMpO1xuICAgICAgICAgICAgbm9ybWFsaXplZFBvaW50cyA9IG5vcm1hbGl6ZXIubm9ybWFsaXplZFBvaW50cztcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXRWYWx1ZShcIm5vcm1hbGl6ZWRQb2ludHNcIiwgbm9ybWFsaXplZFBvaW50cyk7XG4gICAgICAgIC8qKioqKipUaGlzIHNlY3Rpb24gaXMgYWJvdXQgZmluZGluZyBudW1iZXIgb2YgYmlucyBhbmQgYmlubmVycyoqKioqKi9cbiAgICAgICAgbGV0IHNpdGVzID0gbnVsbDtcbiAgICAgICAgbGV0IGJpbnMgPSBudWxsO1xuICAgICAgICBsZXQgYmlubmVyID0gbnVsbDtcbiAgICAgICAgbGV0IGJpblNpemUgPSBudWxsO1xuICAgICAgICBsZXQgYmluUmFkaXVzID0gMDtcblxuICAgICAgICBpZiAoIWlzQmlubmVkKSB7Ly9Pbmx5IGRvIHRoZSBiaW5uaW5nIGlmIG5lZWRlZC5cbiAgICAgICAgICAgIGlmICghc3RhcnRCaW5HcmlkU2l6ZSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0QmluR3JpZFNpemUgPSA0MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJpbnMgPSBbXTtcbiAgICAgICAgICAgIC8vRGVmYXVsdCBudW1iZXIgb2YgYmluc1xuICAgICAgICAgICAgbGV0IG1pbk51bU9mQmlucyA9IDUwO1xuICAgICAgICAgICAgbGV0IG1heE51bU9mQmlucyA9IDUwMDtcbiAgICAgICAgICAgIGlmIChtaW5CaW5zKSB7XG4gICAgICAgICAgICAgICAgbWluTnVtT2ZCaW5zID0gbWluQmlucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXhCaW5zKSB7XG4gICAgICAgICAgICAgICAgbWF4TnVtT2ZCaW5zID0gbWF4QmlucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vRG9uJ3QgZG8gdGhlIGJpbm5pbmcgaWYgdGhlIHVuaXF1ZSBzZXQgb2YgdmFsdWVzIGFyZSBsZXNzIHRoYW4gNTAuIEp1c3QgcmV0dXJuIHRoZSB1bmlxdWUgc2V0LlxuICAgICAgICAgICAgbGV0IHVuaXF1ZUtleXMgPSBfLnVuaXEobm9ybWFsaXplZFBvaW50cy5tYXAocCA9PiBwLmpvaW4oJywnKSkpO1xuICAgICAgICAgICAgbGV0IGdyb3VwcyA9IF8uZ3JvdXBCeShub3JtYWxpemVkUG9pbnRzLCBwID0+IHAuam9pbignLCcpKTtcbiAgICAgICAgICAgIGlmICh1bmlxdWVLZXlzLmxlbmd0aCA8IG1pbk51bU9mQmlucykge1xuICAgICAgICAgICAgICAgIHVuaXF1ZUtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmluID0gZ3JvdXBzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIC8vVGFrZSB0aGUgY29vcmRpbmF0ZSBvZiB0aGUgZmlyc3QgcG9pbnQgaW4gdGhlIGdyb3VwIHRvIGJlIHRoZSBiaW4gbGVhZGVyICh0aGV5IHNob3VsZCBoYXZlIHRoZSBzYW1lIHBvaW50cyBhY3R1YWxseT0+IHNvIGp1c3QgdGFrZSB0aGUgZmlyc3Qgb25lLlxuICAgICAgICAgICAgICAgICAgICBiaW4ueCA9IGJpblswXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYmluLnkgPSBiaW5bMF1bMV07XG4gICAgICAgICAgICAgICAgICAgIGJpbi5iaW5SYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICBiaW5zLnB1c2goYmluKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAvL1N0YXJ0IHdpdGggNDB4NDAgYmlucywgYW5kIGRpdmlkZWQgYnkgMiBldmVyeSB0aW1lIHRoZXJlIGFyZSBtb3JlIHRoYW4gbWF4TnVtYmVyb2ZCaW5zIG5vbmUgZW1wdHkgY2VsbHMsIGluY3JlYXNlIDUgKCs1KSBpZiBsZXNzIHRoYW4gbWluTnVtYmVyT2ZCaW5zXG4gICAgICAgICAgICAgICAgICAgIGlmIChiaW5TaXplID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5TaXplID0gc3RhcnRCaW5HcmlkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChiaW5zLmxlbmd0aCA+IG1heE51bU9mQmlucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmluU2l6ZSA9IGJpblNpemUgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJpbnMubGVuZ3RoIDwgbWluTnVtT2ZCaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5TaXplID0gYmluU2l6ZSArIDU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpblR5cGUgPT09IFwiaGV4YWdvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNlY3Rpb24gdXNlcyBoZXhhZ29uIGJpbm5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaG9ydERpYWdvbmFsID0gMSAvIGJpblNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5SYWRpdXMgPSBzaG9ydERpYWdvbmFsIC8gTWF0aC5zcXJ0KDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmluUmFkaXVzID0gc2hvcnREaWFnb25hbCAvICgyICogTWF0aC5zaW4oTWF0aC5QSSAvIDMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbm5lciA9IG5ldyBCaW5uZXIoKS5yYWRpdXMoYmluUmFkaXVzKS5leHRlbnQoW1swLCAwXSwgWzEsIDFdXSk7Ly9leHRlbnQgZnJvbSBbMCwgMF0gdG8gWzEsIDFdIHNpbmNlIHdlIGFscmVhZHkgbm9ybWFsaXplZCBkYXRhLlxuICAgICAgICAgICAgICAgICAgICAgICAgYmlucyA9IGJpbm5lci5oZXhiaW4obm9ybWFsaXplZFBvaW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmluVHlwZSA9PT0gXCJyZWN0YW5ndWxhclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNlY3Rpb24gdXNlcyBoZXhhZ29uIGJpbm5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiaW5XaWR0aCA9IDEgLyBiaW5TaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmluUmFkaXVzID0gYmluV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5uZXIgPSBuZXcgUmVjdGFuZ3VsYXJCaW5uZXIobm9ybWFsaXplZFBvaW50cywgYmluU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5zID0gYmlubmVyLnJlY3RhbmdsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghYmluVHlwZSB8fCBiaW5UeXBlID09PSBcImxlYWRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNlY3Rpb24gdXNlcyBsZWFkZXIgYmlubmVyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5SYWRpdXMgPSAxIC8gKGJpblNpemUgKiAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbm5lciA9IG5ldyBMZWFkZXJCaW5uZXIobm9ybWFsaXplZFBvaW50cywgYmluUmFkaXVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbnMgPSBiaW5uZXIubGVhZGVycztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKGJpbnMubGVuZ3RoID4gbWF4TnVtT2ZCaW5zIHx8IGJpbnMubGVuZ3RoIDwgbWluTnVtT2ZCaW5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpdGVzID0gYmlucy5tYXAoZCA9PiBbZC54LCBkLnldKTsgLy89PnNpdGVzIGFyZSB0aGUgc2V0IG9mIGNlbnRlcnMgb2YgYWxsIGJpbnNcbiAgICAgICAgICAgIC8qKioqKipUaGlzIHNlY3Rpb24gaXMgYWJvdXQgdGhlIGJpbm5pbmcgYW5kIGJpbm5pbmcgcmVzdWx0cyoqKioqKi9cbiAgICAgICAgICAgIG91dHB1dFZhbHVlKFwiYmlubmVyXCIsIGJpbm5lcik7XG4gICAgICAgICAgICBvdXRwdXRWYWx1ZShcImJpbnNcIiwgYmlucyk7XG4gICAgICAgICAgICBvdXRwdXRWYWx1ZShcImJpblNpemVcIiwgYmluU2l6ZSk7XG4gICAgICAgICAgICBvdXRwdXRWYWx1ZShcImJpblJhZGl1c1wiLCBiaW5SYWRpdXMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaXRlcyA9IG5vcm1hbGl6ZWRQb2ludHM7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXRWYWx1ZShcImJpbm5lZFNpdGVzXCIsIHNpdGVzKTtcblxuICAgICAgICAvKioqKioqVGhpcyBzZWN0aW9uIGlzIGFib3V0IHRoZSB0cmlhbmd1bGF0aW5nIGFuZCB0cmlhbmd1bGF0aW5nIHJlc3VsdHMqKioqKiovXG5cbiAgICAgICAgICAgIC8vIFRyaWFuZ3VsYXRpb24gY2FsY3VsYXRpb25cbiAgICAgICAgICAgIC8vIElmIGl0IGlzIGEgbGluZSB0aGVuIHdlIGRvbid0IGRvIHRoZSB0cmlhbmd1bGF0aW9uXG4gICAgICAgIGxldCBkZWxhdW5heSA9IGRlbGF1bmF5RnJvbVBvaW50cyhzaXRlcyk7XG4gICAgICAgIGxldCB0cmlhbmdsZXMgPSBkZWxhdW5heS50cmlhbmdsZXM7XG4gICAgICAgIGxldCB0cmlhbmdsZUNvb3JkaW5hdGVzID0gZGVsYXVuYXkudHJpYW5nbGVDb29yZGluYXRlcygpO1xuICAgICAgICAvL0Fzc2lnbmluZyBvdXRwdXQgdmFsdWVzXG4gICAgICAgIG91dHB1dFZhbHVlKFwiZGVsYXVuYXlcIiwgZGVsYXVuYXkpO1xuICAgICAgICBvdXRwdXRWYWx1ZShcInRyaWFuZ2xlc1wiLCB0cmlhbmdsZXMpO1xuICAgICAgICBvdXRwdXRWYWx1ZShcInRyaWFuZ2xlQ29vcmRpbmF0ZXNcIiwgdHJpYW5nbGVDb29yZGluYXRlcyk7XG5cbiAgICAgICAgLyoqKioqKlRoaXMgc2VjdGlvbiBpcyBhYm91dCB0aGUgc3Bhbm5pbmcgdHJlZSBhbmQgc3Bhbm5pbmcgdHJlZSByZXN1bHRzKioqKioqL1xuICAgICAgICAgICAgLy9TcGFubmluZyB0cmVlIGNhbGN1bGF0aW9uXG4gICAgICAgIGxldCBncmFwaCA9IGNyZWF0ZUdyYXBoKHRyaWFuZ2xlQ29vcmRpbmF0ZXMpO1xuICAgICAgICBsZXQgbXN0cmVlID0gbXN0KGdyYXBoKTtcbiAgICAgICAgLy9Bc3NpZ25pbmcgdGhlIG91dHB1dCB2YWx1ZXNcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJncmFwaFwiLCBncmFwaCk7XG4gICAgICAgIG91dHB1dFZhbHVlKFwibXN0XCIsIG1zdHJlZSk7XG5cbiAgICAgICAgLyoqKioqKlRoaXMgc2VjdGlvbiBpcyBhYm91dCB0aGUgb3V0bHlpbmcgc2NvcmUgYW5kIG91dGx5aW5nIHNjb3JlIHJlc3VsdHMqKioqKiovXG4gICAgICAgIGxldCBvdXRseWluZyA9IG5ldyBPdXRseWluZyhtc3RyZWUpO1xuICAgICAgICBsZXQgb3V0bHlpbmdTY29yZSA9IG91dGx5aW5nLnNjb3JlKCk7XG4gICAgICAgIG91dGx5aW5nVXBwZXJCb3VuZCA9IG91dGx5aW5nLnVwcGVyQm91bmQ7XG4gICAgICAgIGxldCBvdXRseWluZ0xpbmtzID0gb3V0bHlpbmcubGlua3MoKTtcbiAgICAgICAgbGV0IG91dGx5aW5nUG9pbnRzID0gb3V0bHlpbmcucG9pbnRzKCk7XG4gICAgICAgIGxldCBub091dGx5aW5nVHJlZSA9IG91dGx5aW5nLnJlbW92ZU91dGx5aW5nKCk7XG4gICAgICAgIG91dHB1dFZhbHVlKFwib3V0bHlpbmdTY29yZVwiLCBvdXRseWluZ1Njb3JlKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJvdXRseWluZ1VwcGVyQm91bmRcIiwgb3V0bHlpbmdVcHBlckJvdW5kKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJvdXRseWluZ0xpbmtzXCIsIG91dGx5aW5nTGlua3MpO1xuICAgICAgICBvdXRwdXRWYWx1ZShcIm91dGx5aW5nUG9pbnRzXCIsIG91dGx5aW5nUG9pbnRzKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJub091dGx5aW5nVHJlZVwiLCBub091dGx5aW5nVHJlZSk7XG5cbiAgICAgICAgLyoqKioqKlRoaXMgc2VjdGlvbiBpcyBhYm91dCB0aGUgc2tld2VkIHNjb3JlIGFuZCBza2V3ZWQgc2NvcmUgcmVzdWx0cyoqKioqKi9cbiAgICAgICAgbGV0IHNrZXdlZCA9IG5ldyBTa2V3ZWQobm9PdXRseWluZ1RyZWUpO1xuICAgICAgICBvdXRwdXRWYWx1ZShcInNrZXdlZFNjb3JlXCIsIHNrZXdlZC5zY29yZSgpKTtcblxuICAgICAgICAvKioqKioqVGhpcyBzZWN0aW9uIGlzIGFib3V0IHRoZSBzcGFyc2Ugc2NvcmUgYW5kIHNwYXJzZSBzY29yZSByZXN1bHRzKioqKioqL1xuICAgICAgICBsZXQgc3BhcnNlID0gbmV3IFNwYXJzZShub091dGx5aW5nVHJlZSk7XG4gICAgICAgIG91dHB1dFZhbHVlKFwic3BhcnNlU2NvcmVcIiwgc3BhcnNlLnNjb3JlKCkpO1xuXG4gICAgICAgIC8qKioqKipUaGlzIHNlY3Rpb24gaXMgYWJvdXQgdGhlIGNsdW1weSBzY29yZSBhbmQgY2x1bXB5IHNjb3JlIHJlc3VsdHMqKioqKiovXG4gICAgICAgICAgICAvL1RPRE86IENoZWNrIHRoaXMgYWdhaW4sIHdlIG1heSBwdXQgaW4gZWl0aGVyIG9yaWdpbmFsIG9yIG5vIG91dGx5aW5nIHRyZWUgPT4gY3VycmVudGx5IHVzaW5nIG9yaWdpbmFsIHNpbmNlIG5lZWQgdG8ga2VlcCB0aGUgbG9uZyBlZGdlcyB3aGljaCBjb25uZWN0IHRoZSBjbHVzdGVyc1xuICAgICAgICAgICAgLy8gbGV0IGNsdW1weSA9IG5ldyBDbHVtcHkobXN0cmVlKTtcbiAgICAgICAgbGV0IGNsdW1weSA9IG5ldyBDbHVtcHkobm9PdXRseWluZ1RyZWUpO1xuICAgICAgICBvdXRwdXRWYWx1ZShcImNsdW1weVwiLCBjbHVtcHkpO1xuICAgICAgICBvdXRwdXRWYWx1ZShcImNsdW1weVNjb3JlXCIsIGNsdW1weS5zY29yZSgpKTtcblxuICAgICAgICAvKioqKioqVGhpcyBzZWN0aW9uIGlzIGFib3V0IHRoZSBzdHJpYXRlZCBzY29yZSBhbmQgc3RyaWF0ZWQgc2NvcmUgcmVzdWx0cyoqKioqKi9cbiAgICAgICAgbGV0IHN0cmlhdGVkID0gbmV3IFN0cmlhdGVkKG5vT3V0bHlpbmdUcmVlKTtcbiAgICAgICAgbGV0IHYyQ29ybmVycyA9IHN0cmlhdGVkLmdldEFsbFYyQ29ybmVycygpO1xuICAgICAgICBsZXQgb2J0dXNlVjJDb3JuZXJzID0gc3RyaWF0ZWQuZ2V0QWxsT2J0dXNlVjJDb3JuZXJzKCk7XG4gICAgICAgIG91dHB1dFZhbHVlKFwic3RyaWF0ZWRTY29yZVwiLCBzdHJpYXRlZC5zY29yZSgpKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJ2MkNvcm5lcnNcIiwgdjJDb3JuZXJzKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJvYnR1c2VWMkNvcm5lcnNcIiwgb2J0dXNlVjJDb3JuZXJzKTtcblxuICAgICAgICAvKioqKioqVGhpcyBzZWN0aW9uIGlzIGFib3V0IHRoZSBjb252ZXggaHVsbCBhbmQgY29udmV4IGh1bGwgcmVzdWx0cyoqKioqKi9cbiAgICAgICAgbGV0IGNvbnZleCA9IG5ldyBDb252ZXgobm9PdXRseWluZ1RyZWUsIG91dGx5aW5nVXBwZXJCb3VuZCk7XG4gICAgICAgIGxldCBjb252ZXhIdWxsID0gY29udmV4LmNvbnZleEh1bGwoKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJjb252ZXhIdWxsXCIsIGNvbnZleEh1bGwpO1xuXG4gICAgICAgIC8qKioqKipUaGlzIHNlY3Rpb24gaXMgYWJvdXQgdGhlIGNvbmNhdmUgaHVsbCBhbmQgY29uY2F2ZSBodWxsIHJlc3VsdHMqKioqKiovXG4gICAgICAgIGxldCBjb25jYXZlSHVsbCA9IGNvbnZleC5jb25jYXZlSHVsbCgpO1xuICAgICAgICBvdXRwdXRWYWx1ZShcImNvbmNhdmVIdWxsXCIsIGNvbmNhdmVIdWxsKTtcblxuICAgICAgICAvKioqKioqVGhpcyBzZWN0aW9uIGlzIGFib3V0IHRoZSBjb252ZXggc2NvcmUgYW5kIGNvbnZleCBzY29yZSByZXN1bHRzKioqKioqL1xuICAgICAgICBsZXQgY29udmV4U2NvcmUgPSBjb252ZXguc2NvcmUoKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJjb252ZXhTY29yZVwiLCBjb252ZXhTY29yZSk7XG5cbiAgICAgICAgLyoqKioqKlRoaXMgc2VjdGlvbiBpcyBhYm91dCB0aGUgc2tpbm55IHNjb3JlIGFuZCBza2lubnkgc2NvcmUgcmVzdWx0cyoqKioqKi9cbiAgICAgICAgbGV0IHNraW5ueSA9IG5ldyBTa2lubnkoY29uY2F2ZUh1bGwpO1xuICAgICAgICBsZXQgc2tpbm55U2NvcmUgPSBza2lubnkuc2NvcmUoKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJza2lubnlTY29yZVwiLCBza2lubnlTY29yZSk7XG5cbiAgICAgICAgLyoqKioqKlRoaXMgc2VjdGlvbiBpcyBhYm91dCB0aGUgc3RyaW5neSBzY29yZSBhbmQgc3RyaW5neSBzY29yZSByZXN1bHRzKioqKioqL1xuICAgICAgICBsZXQgc3RyaW5neSA9IG5ldyBTdHJpbmd5KG5vT3V0bHlpbmdUcmVlKTtcbiAgICAgICAgbGV0IHYxcyA9IHN0cmluZ3kuZ2V0QWxsVjFzKCk7XG4gICAgICAgIGxldCBzdHJpbmd5U2NvcmUgPSBzdHJpbmd5LnNjb3JlKCk7XG4gICAgICAgIG91dHB1dFZhbHVlKFwidjFzXCIsIHYxcyk7XG4gICAgICAgIG91dHB1dFZhbHVlKFwic3RyaW5neVNjb3JlXCIsIHN0cmluZ3lTY29yZSk7XG5cbiAgICAgICAgLyoqKioqKlRoaXMgc2VjdGlvbiBpcyBhYm91dCB0aGUgbW9ub3RvbmljIHNjb3JlIGFuZCBtb25vdG9uaWMgc2NvcmUgcmVzdWx0cyoqKioqKi9cbiAgICAgICAgbGV0IG1vbm90b25pYyA9IG5ldyBNb25vdG9uaWMobm9PdXRseWluZ1RyZWUubm9kZXMubWFwKG4gPT4gbi5pZCkpO1xuICAgICAgICBsZXQgbW9ub3RvbmljU2NvcmUgPSBtb25vdG9uaWMuc2NvcmUoKTtcbiAgICAgICAgb3V0cHV0VmFsdWUoXCJtb25vdG9uaWNTY29yZVwiLCBtb25vdG9uaWNTY29yZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gb3V0cHV0VmFsdWUobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNJbnN0YW5jZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcblxufSkod2luZG93KTsiXSwibmFtZXMiOlsiZ2xvYmFsIiwiXyIsImNvbXBhcmUiLCJzd2FwIiwiZXBzaWxvbiIsInR3b1Byb2R1Y3QiLCJzY2FsYXJTY2FsYXIiLCJyb2J1c3RTdWJ0cmFjdCIsImJpdHMiLCJVbmlvbkZpbmQiLCJyZXF1aXJlJCQwIiwib3JpZW50IiwicHJvdG8iLCJ1bmlxdWUiLCJjaCIsImRldGVybWluYW50Iiwic29sdmUiLCJjaXJjdW1jZW50ZXIiLCJjaXJjdW1yYWRpdXMiLCJkZWxhdW5heSIsImJvdW5kYXJ5IiwiY29tcGFyZUNlbGxzIiwibWluIiwiY29tcGFyZUludCIsInBhcml0eSIsImNvbXBhcmVPcmllbnRlZENlbGwiLCJvcmllbnRhdGlvbiIsImNvbXBhcmVDZWxsIiwiYm5kIiwiYWxwaGEiLCJhYyIsImFscGhhU2hhcGUiLCJwb2x5Z29uLnBvbHlnb25BcmVhIiwicG9seWdvbi5wb2x5Z29uTGVuZ3RoIiwiaHVsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0NBQUE7Ozs7O0NBS0EsQ0FBQyxXQUFXOzs7Ozs7OztHQVFWLElBQUksSUFBSSxHQUFHLE9BQU8sSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJO2FBQ3RELE9BQU9BLGNBQU0sSUFBSSxRQUFRLElBQUlBLGNBQU0sQ0FBQyxNQUFNLEtBQUtBLGNBQU0sSUFBSUEsY0FBTTthQUMvRCxJQUFJO2FBQ0osRUFBRSxDQUFDOzs7R0FHYixJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7OztHQUdoQyxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0dBQzlELElBQUksV0FBVyxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQzs7O0dBRzFFLElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJO09BQ3RCLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSztPQUN4QixRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVE7T0FDNUIsY0FBYyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUM7Ozs7R0FJN0MsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU87T0FDN0IsVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJO09BQ3hCLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDOzs7R0FHakMsSUFBSSxJQUFJLEdBQUcsVUFBVSxFQUFFLENBQUM7OztHQUd4QixJQUFJLENBQUMsR0FBRyxTQUFTLEdBQUcsRUFBRTtLQUNwQixJQUFJLEdBQUcsWUFBWSxDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUM7S0FDakMsSUFBSSxFQUFFLElBQUksWUFBWSxDQUFDLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzVDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBQ3JCLENBQUM7Ozs7Ozs7R0FPRixJQUFJLEFBQWlDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtLQUN0RCxJQUFJLEFBQWdDLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO09BQ3RFLE9BQU8sR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO01BQzlCO0tBQ0QsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNmLE1BQU07S0FDTCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNaOzs7R0FHRCxDQUFDLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQzs7Ozs7R0FLcEIsSUFBSSxVQUFVLEdBQUcsU0FBUyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtLQUNqRCxJQUFJLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQztLQUNwQyxRQUFRLFFBQVEsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLFFBQVE7T0FDckMsS0FBSyxDQUFDLEVBQUUsT0FBTyxTQUFTLEtBQUssRUFBRTtTQUM3QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUM7O09BRUYsS0FBSyxDQUFDLEVBQUUsT0FBTyxTQUFTLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO1NBQ2hELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNyRCxDQUFDO09BQ0YsS0FBSyxDQUFDLEVBQUUsT0FBTyxTQUFTLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRTtTQUM3RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2xFLENBQUM7TUFDSDtLQUNELE9BQU8sV0FBVztPQUNoQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO01BQ3ZDLENBQUM7SUFDSCxDQUFDOztHQUVGLElBQUksZUFBZSxDQUFDOzs7OztHQUtwQixJQUFJLEVBQUUsR0FBRyxTQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0tBQzFDLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0RSxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDO0tBQ3JDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3JFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7OztHQUtGLENBQUMsQ0FBQyxRQUFRLEdBQUcsZUFBZSxHQUFHLFNBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRTtLQUN0RCxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7Ozs7R0FPRixJQUFJLGFBQWEsR0FBRyxTQUFTLElBQUksRUFBRSxVQUFVLEVBQUU7S0FDN0MsVUFBVSxHQUFHLFVBQVUsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7S0FDaEUsT0FBTyxXQUFXO09BQ2hCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1dBQ25ELElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1dBQ3BCLEtBQUssR0FBRyxDQUFDLENBQUM7T0FDZCxPQUFPLEtBQUssR0FBRyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7U0FDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDN0M7T0FDRCxRQUFRLFVBQVU7U0FDaEIsS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNyQyxLQUFLLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNuRCxLQUFLLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEU7T0FDRCxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO09BQ2pDLEtBQUssS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsVUFBVSxFQUFFLEtBQUssRUFBRSxFQUFFO1NBQzNDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEM7T0FDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO09BQ3hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7TUFDL0IsQ0FBQztJQUNILENBQUM7OztHQUdGLElBQUksVUFBVSxHQUFHLFNBQVMsU0FBUyxFQUFFO0tBQ25DLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDO0tBQ3RDLElBQUksWUFBWSxFQUFFLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2pELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0tBQzNCLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDO0tBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0tBQ3RCLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQzs7R0FFRixJQUFJLGVBQWUsR0FBRyxTQUFTLEdBQUcsRUFBRTtLQUNsQyxPQUFPLFNBQVMsR0FBRyxFQUFFO09BQ25CLE9BQU8sR0FBRyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDeEMsQ0FBQztJQUNILENBQUM7O0dBRUYsSUFBSSxHQUFHLEdBQUcsU0FBUyxHQUFHLEVBQUUsSUFBSSxFQUFFO0tBQzVCLE9BQU8sR0FBRyxJQUFJLElBQUksSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUN0RDs7R0FFRCxJQUFJLE9BQU8sR0FBRyxTQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUU7S0FDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO09BQy9CLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxPQUFPLEtBQUssQ0FBQyxDQUFDO09BQy9CLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDcEI7S0FDRCxPQUFPLE1BQU0sR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Ozs7O0dBTUYsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQzFDLElBQUksU0FBUyxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUMxQyxJQUFJLFdBQVcsR0FBRyxTQUFTLFVBQVUsRUFBRTtLQUNyQyxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDbkMsT0FBTyxPQUFPLE1BQU0sSUFBSSxRQUFRLElBQUksTUFBTSxJQUFJLENBQUMsSUFBSSxNQUFNLElBQUksZUFBZSxDQUFDO0lBQzlFLENBQUM7Ozs7Ozs7O0dBUUYsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLFNBQVMsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7S0FDcEQsUUFBUSxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDekMsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDO0tBQ2QsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7T0FDcEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7U0FDaEQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDMUI7TUFDRixNQUFNO09BQ0wsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUN2QixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtTQUNqRCxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0QztNQUNGO0tBQ0QsT0FBTyxHQUFHLENBQUM7SUFDWixDQUFDOzs7R0FHRixDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtLQUNuRCxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNqQyxJQUFJLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUN2QyxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLE1BQU07U0FDN0IsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM1QixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO09BQzNDLElBQUksVUFBVSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO09BQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztNQUM3RDtLQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2hCLENBQUM7OztHQUdGLElBQUksWUFBWSxHQUFHLFNBQVMsR0FBRyxFQUFFOzs7S0FHL0IsSUFBSSxPQUFPLEdBQUcsU0FBUyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7T0FDbkQsSUFBSSxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7V0FDdkMsTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxNQUFNO1dBQzdCLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO09BQ3JDLElBQUksQ0FBQyxPQUFPLEVBQUU7U0FDWixJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7U0FDdkMsS0FBSyxJQUFJLEdBQUcsQ0FBQztRQUNkO09BQ0QsT0FBTyxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxNQUFNLEVBQUUsS0FBSyxJQUFJLEdBQUcsRUFBRTtTQUNqRCxJQUFJLFVBQVUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUM1QyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pEO09BQ0QsT0FBTyxJQUFJLENBQUM7TUFDYixDQUFDOztLQUVGLE9BQU8sU0FBUyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7T0FDNUMsSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7T0FDcEMsT0FBTyxPQUFPLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztNQUN0RSxDQUFDO0lBQ0gsQ0FBQzs7OztHQUlGLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0dBR2hELENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0dBRzNDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxTQUFTLEdBQUcsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0tBQ3BELElBQUksU0FBUyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7S0FDM0QsSUFBSSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0MsSUFBSSxHQUFHLEtBQUssS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7R0FJRixDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRTtLQUN0RCxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7S0FDakIsU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtPQUN2QyxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7TUFDeEQsQ0FBQyxDQUFDO0tBQ0gsT0FBTyxPQUFPLENBQUM7SUFDaEIsQ0FBQzs7O0dBR0YsQ0FBQyxDQUFDLE1BQU0sR0FBRyxTQUFTLEdBQUcsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0tBQzNDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RCxDQUFDOzs7O0dBSUYsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUU7S0FDbEQsU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbkMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDdkMsTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEMsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtPQUMzQyxJQUFJLFVBQVUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztPQUM1QyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQUUsT0FBTyxLQUFLLENBQUM7TUFDaEU7S0FDRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Ozs7R0FJRixDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRTtLQUNqRCxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNuQyxJQUFJLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUN2QyxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLE1BQU0sQ0FBQztLQUNsQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO09BQzNDLElBQUksVUFBVSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO09BQzVDLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUM7TUFDOUQ7S0FDRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7Ozs7R0FJRixDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxTQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTtLQUMxRSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzNDLElBQUksT0FBTyxTQUFTLElBQUksUUFBUSxJQUFJLEtBQUssRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0tBQ3pELE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7R0FHRixDQUFDLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0tBQ2pELElBQUksV0FBVyxFQUFFLElBQUksQ0FBQztLQUN0QixJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7T0FDdEIsSUFBSSxHQUFHLElBQUksQ0FBQztNQUNiLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO09BQzFCLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ2hDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztNQUM5QjtLQUNELE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxPQUFPLEVBQUU7T0FDbEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO09BQ2xCLElBQUksQ0FBQyxNQUFNLEVBQUU7U0FDWCxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO1dBQ3JDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1VBQ3pDO1NBQ0QsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFLE9BQU8sS0FBSyxDQUFDLENBQUM7U0FDbkMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QjtPQUNELE9BQU8sTUFBTSxJQUFJLElBQUksR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7TUFDOUQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDOzs7R0FHSCxDQUFDLENBQUMsS0FBSyxHQUFHLFNBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRTtLQUMzQixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7O0dBSUYsQ0FBQyxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsRUFBRSxLQUFLLEVBQUU7S0FDN0IsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7OztHQUlGLENBQUMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxHQUFHLEVBQUUsS0FBSyxFQUFFO0tBQ2pDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7OztHQUdGLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtLQUN2QyxJQUFJLE1BQU0sR0FBRyxDQUFDLFFBQVEsRUFBRSxZQUFZLEdBQUcsQ0FBQyxRQUFRO1NBQzVDLEtBQUssRUFBRSxRQUFRLENBQUM7S0FDcEIsSUFBSSxRQUFRLElBQUksSUFBSSxJQUFJLE9BQU8sUUFBUSxJQUFJLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtPQUMvRixHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7U0FDcEQsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNmLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxFQUFFO1dBQ25DLE1BQU0sR0FBRyxLQUFLLENBQUM7VUFDaEI7UUFDRjtNQUNGLE1BQU07T0FDTCxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztPQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1NBQ25DLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwQyxJQUFJLFFBQVEsR0FBRyxZQUFZLElBQUksUUFBUSxLQUFLLENBQUMsUUFBUSxJQUFJLE1BQU0sS0FBSyxDQUFDLFFBQVEsRUFBRTtXQUM3RSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1dBQ1gsWUFBWSxHQUFHLFFBQVEsQ0FBQztVQUN6QjtRQUNGLENBQUMsQ0FBQztNQUNKO0tBQ0QsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDOzs7R0FHRixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7S0FDdkMsSUFBSSxNQUFNLEdBQUcsUUFBUSxFQUFFLFlBQVksR0FBRyxRQUFRO1NBQzFDLEtBQUssRUFBRSxRQUFRLENBQUM7S0FDcEIsSUFBSSxRQUFRLElBQUksSUFBSSxJQUFJLE9BQU8sUUFBUSxJQUFJLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtPQUMvRixHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7U0FDcEQsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNmLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxFQUFFO1dBQ25DLE1BQU0sR0FBRyxLQUFLLENBQUM7VUFDaEI7UUFDRjtNQUNGLE1BQU07T0FDTCxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztPQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1NBQ25DLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwQyxJQUFJLFFBQVEsR0FBRyxZQUFZLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxNQUFNLEtBQUssUUFBUSxFQUFFO1dBQzNFLE1BQU0sR0FBRyxDQUFDLENBQUM7V0FDWCxZQUFZLEdBQUcsUUFBUSxDQUFDO1VBQ3pCO1FBQ0YsQ0FBQyxDQUFDO01BQ0o7S0FDRCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7OztHQUdGLENBQUMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxHQUFHLEVBQUU7S0FDeEIsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7R0FNRixDQUFDLENBQUMsTUFBTSxHQUFHLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUU7S0FDakMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRTtPQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQzNDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3RDO0tBQ0QsSUFBSSxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUM3RCxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckMsSUFBSSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQztLQUN0QixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO09BQ3RDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO09BQ2pDLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUN6QixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO09BQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7TUFDckI7S0FDRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7OztHQUdGLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtLQUMxQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7S0FDZCxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNqQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtPQUNuRCxPQUFPO1NBQ0wsS0FBSyxFQUFFLEtBQUs7U0FDWixLQUFLLEVBQUUsS0FBSyxFQUFFO1NBQ2QsUUFBUSxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQztRQUNyQyxDQUFDO01BQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxLQUFLLEVBQUU7T0FDNUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztPQUN0QixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO09BQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtTQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RDO09BQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7TUFDakMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2QsQ0FBQzs7O0dBR0YsSUFBSSxLQUFLLEdBQUcsU0FBUyxRQUFRLEVBQUUsU0FBUyxFQUFFO0tBQ3hDLE9BQU8sU0FBUyxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtPQUN0QyxJQUFJLE1BQU0sR0FBRyxTQUFTLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO09BQ3ZDLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2pDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsS0FBSyxFQUFFLEtBQUssRUFBRTtTQUNqQyxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN0QyxRQUFRLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUM7T0FDSCxPQUFPLE1BQU0sQ0FBQztNQUNmLENBQUM7SUFDSCxDQUFDOzs7O0dBSUYsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtLQUM3QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNFLENBQUMsQ0FBQzs7OztHQUlILENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7S0FDN0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDLENBQUM7Ozs7O0dBS0gsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtLQUM3QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQzs7R0FFSCxJQUFJLFdBQVcsR0FBRyxrRUFBa0UsQ0FBQzs7R0FFckYsQ0FBQyxDQUFDLE9BQU8sR0FBRyxTQUFTLEdBQUcsRUFBRTtLQUN4QixJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDO0tBQ3BCLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDM0MsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFOztPQUVuQixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7TUFDL0I7S0FDRCxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNwRCxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQzs7O0dBR0YsQ0FBQyxDQUFDLElBQUksR0FBRyxTQUFTLEdBQUcsRUFBRTtLQUNyQixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDMUIsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMzRCxDQUFDOzs7O0dBSUYsQ0FBQyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtLQUNoRCxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsRUFBRSxJQUFJLENBQUMsQ0FBQzs7Ozs7Ozs7R0FRVCxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxTQUFTLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFO0tBQ3BELElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3RFLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDeEMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7O0dBS0YsQ0FBQyxDQUFDLE9BQU8sR0FBRyxTQUFTLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFO0tBQ3BDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDOzs7O0dBSUYsQ0FBQyxDQUFDLElBQUksR0FBRyxTQUFTLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFO0tBQ2pDLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3RFLElBQUksQ0FBQyxJQUFJ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R0FBRyxJQUFJLEVBQUU7Q0FDekI7Q0FDQSxRQUFRLElBQUksS0FBSyxHQUFHLElBQUksR0FBRyxHQUFHLEVBQUU7Q0FDaEMsWUFBWSxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztDQUNyQyxZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0NBQ2pDLFlBQVksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNoQyxZQUFZLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDOUMsWUFBWSxJQUFJLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUMxRCxZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUN4QyxZQUFZLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDekUsWUFBWSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ2pGLFlBQVksV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ25ELFNBQVM7O0NBRVQsUUFB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LENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0NBQzVDLFFBQVEsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQy9CLFFBQVEsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFO0NBQ3hDLFlBQVksT0FBTyxJQUFJLENBQUM7Q0FDeEIsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE9BQU8sS0FBSyxDQUFDO0NBQ2pCOztDQy9HQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0FBQ0EsQ0FBTyxTQUFTLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Q0FDbEMsSUFBSSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUIsSUFBSSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUIsSUFBSSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUIsSUFBSSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O0NBRTFCLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Q0FDNUMsUUFBUSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUIsUUFBUSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFB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SyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0NBQ3JHLEtBQUs7O0NBRUwsSUFBSSxTQUFTLENBQUMsQ0FBQyxFQUFFO0NBQ2pCLFFBQVEsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDOztDQUVwRCxRQUFRLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Q0FFL0I7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsUUFBUSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM3QixRQUFRLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztDQUU3QixRQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDcEMsUUFBUSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Q0FFcEMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQzs7Q0FFaEMsUUFBUSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDakMsUUFBUSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDaEMsUUFBUSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7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LFlBQVksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMxQixZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RCLFlBQVksT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJQyxTQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ2pHLFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7Q0FDOUIsU0FBUztDQUNULEtBQUssTUFBTTtDQUNYLFFBQVEsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztDQUMzQyxRQUFRLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0NBQ3JCLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztDQUNsQixRQUFRQyxNQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztDQUM3QixRQUFRLElBQUlELFNBQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxNQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztDQUN2RixRQUFRLElBQUlELFNBQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxNQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNqRixRQUFRLElBQUlELFNBQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxNQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQzs7Q0FFL0UsUUFBUSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RCLFFBQVEsT0FBTyxJQUFJLEVBQUU7Q0FDckIsWUFBWSxHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVFELFNBQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0NBQ3RFLFlBQVksR0FBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRQSxTQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtDQUN0RSxZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNO0NBQzdCLFlBQVlDLE1BQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzVCLFNBQVM7Q0FDVCxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQy9CLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7Q0FFdEIsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUU7Q0FDdkMsWUFBWSxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztDQUNyRCxZQUFZLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUks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QUFPLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDM0IsR0FBRztDQUNILEVBQUUsY0FBYyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUU7Q0FDMUMsSUFBSSxJQUFJLENBQUMsQ0FBQztDQUNWLElBQUksTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDeEMsSUFBSSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztDQUN4QyxJQUFJLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFO0NBQzlCLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDN0IsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztDQUM3QixLQUFLLE1BQU0sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQzlELE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDakMsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqQyxLQUFLO0NBQ0wsR0FBRztDQUNILEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0NBQ3BCLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUss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Q0FDbkMsU0FBUyxNQUFNO0NBQ2YsVUFBVSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsU0FBUztDQUNqRixVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ25DLFVBQVUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDakQsVUFBVSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQzNELFVBQVUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDbEMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDOUIsU0FBUztDQUNULFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDL0MsUUFBUSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3pELFFBQVEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDaEMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDNUIsT0FBTztDQUNQLEtBQUs7Q0FDTCxJQUFJLElBQUksQ0FBQyxFQUFFO0NBQ1gsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMvQyxNQUFNLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDdkQsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFO0NBQzNGLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3RHLEtBQUs7Q0FDTCxJQUFJLE9BQU8sQ0FBQyxDQUFDO0NBQ2IsR0FBRztDQUNILEVBQUUsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0NBQ3ZDLElBQUksT0FBTyxJQUFJLEVBQUU7Q0FDakIsTUFBTSxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDeEQsTUFBTSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUM7Q0FDL0IsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7Q0FDN0IsTUFBTSxJQUFJLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7Q0FDdkYsV0FBVyxJQUFJLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7Q0FDNUYsV0FBVyxJQUFJLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7Q0FDNUYsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztDQUM1RSxNQUFNLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDNUQsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ3pELEtBQUs7Q0FDTCxHQUFHO0NBQ0gsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7Q0FDL0MsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNsQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDdkUsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMxRixJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0NBQ3BDLE1BQU0sS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtDQUNoRyxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNyRCxRQUFRLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7Q0FDcEUsT0FBTztDQUNQLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRTtDQUMzRixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ25HLEtBQUs7Q0FDTCxJQUFJLE9BQU8sQ0FBQyxDQUFDO0NBQ2IsR0FBRztDQUNILEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7Q0FDekIsSUFBSSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUU7Q0FDdEIsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDZixNQUFNLFFBQVEsRUFBRTtDQUNoQixRQUFRLEtBQUssTUFBTSxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxTQUFTO0NBQzNDLFFBQVEsS0FBSyxNQUFNLEVBQUUsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU07Q0FDdEUsUUFBUSxLQUFLLE1BQU0sRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsU0FBUztDQUMzQyxRQUFRLEtBQUssTUFBTSxFQUFFLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNO0NBQ3RFLFFBQVEsS0FBSyxNQUFNLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLFNBQVM7Q0FDM0MsUUFBUSxLQUFLLE1BQU0sRUFBRSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTTtDQUN0RSxRQUFRLEtBQUssTUFBTSxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxTQUFTO0NBQzNDLFFBQVEsS0FBSyxNQUFNLEVBQUUsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU07Q0FDdEUsT0FBTztDQUNQLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0NBQ3BFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3JDLE9BQU87Q0FDUCxLQUFLO0NBQ0wsSUFBSSxPQUFPLENBQUMsQ0FBQztDQUNiLEdBQUc7Q0FDSCxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7Q0FDM0IsSUFBSSxJQUFJLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDOUIsSUFBSSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7Q0FDaEIsTUFBTSxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sSUFBSSxDQUFDO0NBQ3ZDLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0NBQ2hGLEtBQUssTUFBTSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7Q0FDdkIsTUFBTSxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sSUFBSSxDQUFDO0NBQ3ZDLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0NBQ2hGLEtBQUs7Q0FDTCxJQUFJLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtDQUNoQixNQUFNLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxJQUFJLENBQUM7Q0FDdkMsTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDaEYsS0FBSyxNQUFNLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtDQUN2QixNQUFNLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxJQUFJLENBQUM7Q0FDdkMsTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDaEYsS0FBSztDQUNMLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUNsQixHQUFHO0NBQ0gsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtDQUNsQixJQUFJLE9BQU8sQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNO0NBQ3BDLFVBQVUsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU07Q0FDM0MsV0FBVyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNO0NBQ25DLFVBQVUsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0NBQzdDLEdBQUc7Q0FDSCxFQUFFLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0NBQ3BCLElBQUksT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU07Q0FDbEMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLEdBQUcsTUFBTTtDQUN6QyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU07Q0FDakMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUM7Q0FDM0MsR0FBRztDQUNILENBQUM7O0NDM1BELE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDOztDQUV4QixTQUFTLE1BQU0sQ0FBQyxDQUFDLEVBQUU7Q0FDbkIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNkLENBQUM7O0NBRUQsU0FBUyxNQUFNLENBQUMsQ0FBQyxFQUFFO0NBQ25CLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDZCxDQUFDOztBQUVELENBQWUsTUFBTSxRQUFRLENBQUM7Q0FDOUIsRUFBRSxXQUFXLENBQUMsTUFBTSxFQUFFO0NBQ3RCLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDaEUsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztDQUN6QixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0NBQy9CLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Q0FDckIsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztDQUMvQixJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM5RSxJQUFJLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Q0FFaEY7Q0FDQSxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Q0FDdEQsTUFBTSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzFELEtBQUs7O0NBRUw7Q0FDQSxJQUFJLElBQUksS0FBSyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUM7Q0FDNUIsSUFBSSxHQUFHO0NBQ1AsTUFBTSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0NBQ3hDLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQ2pDLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQ2xDLEtBQUssUUFBUSxLQUFLLEtBQUssSUFBSSxFQUFFO0NBQzdCLEdBQUc7Q0FDSCxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUU7Q0FDbEIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNyQyxHQUFHO0NBQ0gsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7Q0FDaEIsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO0NBQzNELElBQUksTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzFCLElBQUksSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTztDQUMxQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNmLElBQUksR0FBRztDQUNQLE1BQU0sTUFBTSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDekIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU87Q0FDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZCLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxNQUFNLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN4RCxLQUFLLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtDQUN2QixHQUFHO0NBQ0gsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0NBQ3BCLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztDQUMxRCxJQUFJLElBQUksQ0FBQyxDQUFDO0NBQ1YsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzVELElBQUksT0FBTyxDQUFDLENBQUM7Q0FDYixHQUFHO0NBQ0gsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7Q0FDakIsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQztDQUNuQyxJQUFJLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7Q0FDckMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDZCxJQUFJLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNyRSxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtDQUN2QyxNQUFNLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN6RSxNQUFNLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbEMsS0FBSztDQUNMLElBQUksT0FBTyxDQUFDLENBQUM7Q0FDYixHQUFHO0NBQ0gsRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFO0NBQ2xCLElBQUksTUFBTSxNQUFNLEdBQUcsT0FBTyxJQUFJLElBQUksR0FBRyxPQUFPLEdBQUcsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO0NBQ3BFLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO0NBQ2hELElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtDQUN0RCxNQUFNLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM3QixNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTO0NBQzFCLE1BQU0sTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNsQyxNQUFNLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbEMsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDakQsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDakQsS0FBSztDQUNMLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUM3QixJQUFJLE9BQU8sTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNwQyxHQUFHO0NBQ0gsRUFBRSxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7Q0FDL0IsSUFBSSxNQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksSUFBSSxHQUFHLE9BQU8sR0FBRyxJQUFJLElBQUksR0FBRyxTQUFTLENBQUM7Q0FDcEUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO0NBQzFCLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0NBQ3RELE1BQU0sTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQzdDLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQy9CLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDbkMsS0FBSztDQUNMLElBQUksT0FBTyxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ3BDLEdBQUc7Q0FDSCxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUU7Q0FDdEIsSUFBSSxNQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksSUFBSSxHQUFHLE9BQU8sR0FBRyxJQUFJLElBQUksR0FBRyxTQUFTLENBQUM7Q0FDcEUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0NBQ3hCLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0NBQ3BCLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNuQyxJQUFJLE9BQU8sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxLQUFLLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzNFLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO0NBQ3hCLElBQUksT0FBTyxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ3BDLEdBQUc7Q0FDSCxFQUFFLFdBQVcsR0FBRztDQUNoQixJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDO0NBQ2hDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUM3QixJQUFJLE9BQU8sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQzNCLEdBQUc7Q0FDSCxFQUFFLGNBQWMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFO0NBQzdCLElBQUksTUFBTSxNQUFNLEdBQUcsT0FBTyxJQUFJLElBQUksR0FBRyxPQUFPLEdBQUcsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO0NBQ3BFLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7Q0FDckMsSUFBSSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNyQyxJQUFJLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3BDLElBQUksTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDcEMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDL0MsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDL0MsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDL0MsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7Q0FDeEIsSUFBSSxPQUFPLE1BQU0sSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDcEMsR0FBRztDQUNILEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRztDQUN0QixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7Q0FDN0IsSUFBSSxLQUFLLElBQUksQ0FBQyxH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RCxRQUFRLEdBQUcsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztDQUN0QyxRQUFRLEdBQUcsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztDQUN0QyxRQUFRLEdBQUcsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ3ZDLFFBQVEsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDO0NBQ3BCLFlBQVksT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3ZDLFNBQVMsSUFBSTtDQUNiLFlBQVksT0FBTyxDQUFDLENBQUM7Q0FDckIsU0FBUzs7Q0FFVCxLQUFLO0NBQ0wsQ0FBQzs7Q0N0Qk0sTUFBTSxNQUFNLENBQUM7Q0FDcEIsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFO0NBQ3RCO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQ3JELEtBQUs7O0NBRUw7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLEtBQUssR0FBRztDQUNaLFFBQVEsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO0NBQ3pELFlBQVksR0FBRyxHQUFHLFFBQVEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDM0MsUUFBUSxPQUFPLEdBQUcsQ0FBQztDQUNuQixLQUFLO0NBQ0wsQ0FBQzs7Q0NmTSxNQUFNLFFBQVEsQ0FBQztDQUN0QixJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUU7Q0FDdEI7Q0FDQSxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDckQsS0FBSzs7Q0FFTDtDQUNBO0NB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QUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDckQsTUFBTTtLQUNMLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQztLQUN0QixPQUFPLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDOUY7RUFDRjs7Q0FFRCxTQUFTLFdBQVcsQ0FBQyxDQUFDLEVBQUU7R0FDdEIsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtLQUNqQixPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoRyxNQUFNO0tBQ0wsSUFBSSxJQUFJLEdBQUcsR0FBRTtLQUNiLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO09BQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFB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QyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUM7S0FDckIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUM7S0FDckIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUM7S0FDckIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUc7S0FDdEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUc7S0FDdEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUc7S0FDdEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUc7S0FDdEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUc7S0FDdEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUc7S0FDdEIsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUM7ZUFDdkIsR0FBRyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUM7ZUFDdkIsR0FBRyxJQUFJLE1BQU0sR0FBRyxNQUFNLEVBQUM7S0FDakMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7cUJBQ3JELENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO3FCQUNyRCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBQztLQUNyRSxJQUFJLEdBQUcsR0FBRyxTQUFTLEdBQUcsVUFBUztL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QUMsSUFBSSxNQUFNLENBQUM7R0FDWixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQztHQUNoQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQztHQUNoQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQztHQUNoQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQzs7R0FFaEMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztHQUNaLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDO0dBQ2hDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDO0dBQ2hDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDO0dBQ2hDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDOztHQUVoQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7R0FDckI7OztDQUdELGlCQUFxQixHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUNyQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQztHQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQztHQUNsQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQztHQUNsQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FB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LElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7S0FDckIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtPQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQztNQUNwRDtLQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQztJQUNqQztHQUNELElBQUksQ0FBQyxHQUFHQyxRQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQzs7R0FFbkIsSUFBSSxLQUFLLEdBQUcsSUFBRztHQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO0dBQ2QsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7S0FDNUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFDZDs7R0FFRCxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUM7R0FDcEIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtLQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDO0tBQ1osSUFBSSxLQUFLLEdBQUcsSUFBRztLQUNmLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FB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QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztXQUNwQixFQUFFLEdBQUdBLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO09BQ3hCLE9BQU9BLEtBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdBLEtBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2NBQzdCQSxLQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBR0EsS0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0tBQzVDLEtBQUssQ0FBQztPQUNKLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7V0FDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7T0FDdEMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Y0FDM0JBLEtBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQ0EsS0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Y0FDcENBLEtBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVB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O0NBQ3ZCLEtBQUssQ0FBQztDQUNOLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVO0NBQzFCLFFBQVEsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hELFFBQVEsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQy9GLEtBQUssQ0FBQztDQUNOO0NBQ0EsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0NBQ3hCLFFBQVEsT0FBTyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQztDQUNwRCxNQUFLO0NBQ0wsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0NBQ3hCLFFBQVEsT0FBTyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQztDQUNwRCxNQUFLO0NBQ0wsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0NBQzdCLFFBQVEsT0FBTyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUM7Q0FDL0YsTUFBSztDQUNMLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsRUFBRTtDQUM1QixRQUFRLE9BQU8sU0FB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
