{"version":3,"file":"static/js/496.a4a49fd4.chunk.js","mappings":"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","sources":["views/data-input/FileTable.js","components/DragDropFile/index.js","views/data-input/index.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState, useCallback } from 'react';\r\nimport MaterialReactTable, {\r\n    MRT_ToggleGlobalFilterButton,\r\n    MRT_ToggleFiltersButton,\r\n    MRT_ShowHideColumnsButton,\r\n    MRT_FullScreenToggleButton,\r\n} from 'material-react-table';\r\nimport {Box} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Upload as UploadIcon} from \"@mui/icons-material\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport PropTypes from \"prop-types\";\r\nimport Breadcrumbs from \"../../components/extended/Breadcrumbs\";\r\nconst FileTable = ({data,onSelectRow,onUpload,omit=[]}) => {\r\n    const columns = useMemo(\r\n        ()=> {\r\n            if (data[0]) {\r\n                const head = [];\r\n                Object.keys(data[0]).filter(k=>!omit.find(o=>o===k)).forEach(key => {\r\n                    head.push({\r\n                        // numeric: false,\r\n                        // disablePadding: true,\r\n                        accessorKey: key,\r\n                        header: key,\r\n                    })\r\n                })\r\n                return head;\r\n            }else\r\n                return [];\r\n        },[data,omit]\r\n    );\r\n\r\n    //optionally access the underlying virtualizer instance\r\n    const rowVirtualizerInstanceRef = useRef(null);\r\n\r\n    // const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sorting, setSorting] = useState([]);\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        //scroll to the top of the table when the sorting changes\r\n        rowVirtualizerInstanceRef.current?.scrollToIndex(0);\r\n    }, [sorting]);\r\n    const getSelectedRaw = useCallback(() => {\r\n        return data.filter((d,i)=>rowSelection[i]);\r\n    },[rowSelection]);\r\n    return (\r\n        <MaterialReactTable\r\n            columns={columns}\r\n            data={data} //10,000 rows\r\n            // enableBottomToolbar={false}\r\n            enableGlobalFilterModes\r\n            selectAllMode={'all'}\r\n            // enableDensityToggle={false}\r\n            // enablePagination={false}\r\n            // enableRowNumbers\r\n            // enableRowVirtualization\r\n            muiTableContainerProps={{ sx: { maxHeight: '100%' } }}\r\n            initialState={{ density: 'compact' }}\r\n            onSortingChange={setSorting}\r\n            state={{ isLoading, sorting, rowSelection  }}\r\n            enableRowSelection\r\n            onRowSelectionChange={setRowSelection}\r\n\r\n            muiTableBodyRowProps={({ row }) => ({\r\n                onClick: ()=>{onSelectRow(row.original)},\r\n                sx: { cursor: 'pointer' },\r\n            })}\r\n            enableColumnResizing\r\n            defaultColumn={{\r\n                minSize: 50, //allow columns to get smaller than default\r\n                maxSize: 9001, //allow columns to get larger than default\r\n                size: 220, //make columns wider by default\r\n            }}\r\n            renderTopToolbarCustomActions={({ table }) => (\r\n                <Box sx={{ display: 'flex', gap: '1rem' }}>{(onUpload &&Object.keys(rowSelection).length)?\r\n                    <IconButton onClick={()=>onUpload(getSelectedRaw())} size={\"small\"}> Use selected data\r\n                        <UploadIcon />\r\n                    </IconButton>:''}</Box>\r\n            )}\r\n            renderToolbarInternalActions={({ table }) => (\r\n                <Box>\r\n                    <MRT_ToggleGlobalFilterButton table={table} />\r\n                    <MRT_ToggleFiltersButton table={table} />\r\n                    <MRT_ShowHideColumnsButton table={table} />\r\n                    <MRT_FullScreenToggleButton table={table} />\r\n                </Box>\r\n            )}\r\n            positionToolbarAlertBanner=\"bottom\"\r\n        />\r\n    );\r\n};\r\n\r\n//virtualizerInstanceRef was renamed to rowVirtualizerInstanceRef in v1.5.0\r\n//virtualizerProps was renamed to rowVirtualizerProps in v1.5.0\r\n\r\nFileTable.propTypes = {\r\n    data: PropTypes.array,\r\n    onSelectRow: PropTypes.func,\r\n    onUpload: PropTypes.func\r\n};\r\n\r\nexport default FileTable;","import React, {useEffect} from 'react'\r\nimport './index.scss';\r\n\r\n// adapt from https://codepen.io/codemzy/pen/YzELgbb\r\nfunction DragDropFile({multiple,children, buttonRef,handleFile=()=>{}}) {\r\n\r\n    // drag state\r\n    const [dragActive, setDragActive] = React.useState(false);\r\n    // ref\r\n    const inputRef = React.useRef(null);\r\n\r\n    // handle drag events\r\n    const handleDrag = function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (e.type === \"dragenter\" || e.type === \"dragover\") {\r\n            setDragActive(true);\r\n        } else if (e.type === \"dragleave\") {\r\n            setDragActive(false);\r\n        }\r\n    };\r\n\r\n    // triggers when file is dropped\r\n    const handleDrop = function(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setDragActive(false);\r\n        if (e.dataTransfer.files && e.dataTransfer.files[0]) {\r\n            handleFile(e.dataTransfer.files);\r\n        }\r\n    };\r\n\r\n    // triggers when file is selected with click\r\n    const handleChange = function(e) {\r\n        e.preventDefault();\r\n        if (e.target.files && e.target.files[0]) {\r\n            handleFile(e.target.files);\r\n        }\r\n    };\r\n\r\n// triggers the input when the button is clicked\r\n\r\n    useEffect(()=>{\r\n        if (buttonRef.current) {\r\n            buttonRef.current.onclick=() => {\r\n                inputRef.current.click();\r\n            }\r\n        }\r\n    },[buttonRef.current])\r\n    return (\r\n        <form className=\"form-file-upload\" onDragEnter={handleDrag} onSubmit={(e) => e.preventDefault()} style={{margin:'auto'}}>\r\n            <input ref={inputRef} type=\"file\" className=\"input-file-upload\" multiple={multiple} onChange={handleChange} />\r\n            <label htmlFor=\"input-file-upload\" className={`label-file-upload ${dragActive ? \"drag-active\" : \"\"}` }>\r\n                <div>\r\n                    {children}\r\n                </div>\r\n            </label>\r\n            { dragActive && <div className=\"drag-file-element\" onDragEnter={handleDrag} onDragLeave={handleDrag} onDragOver={handleDrag} onDrop={handleDrop}></div> }\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default DragDropFile","import PropTypes from 'prop-types';\r\nimport {useEffect, useRef, useState, useTransition} from 'react';\r\nimport {csvParse} from 'd3'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {Box, Button, Card, Divider, Grid, TextField, Typography} from '@mui/material';\r\nimport { gridSpacing } from '../../store/constant';\r\nimport FileTable from \"./FileTable\";\r\nimport DragDropFile from \"../../components/DragDropFile\";\r\nimport {setFilesLists} from \"../../store/actions/dataProcess\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst DataInput = ()=>{\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const buttonRef = useRef(null);\r\n    const [fileList,setFileList] = useState([]);\r\n    const [appprofileRegex,setAppProfileRegex] = useState('MI100-profile-<AppName>-<Profile>-\\\\S+');\r\n    const [isPending, startTransition] = useTransition();\r\n\r\n    // function\r\n    const triggergetproperty = (newregextext)=>{\r\n        try {\r\n            const newregexP = new RegExp(newregextext.replace(/<Profile>|<AppName>/g,'<(.*?)>'))\r\n            const newregex = new RegExp(newregextext.replace(/<Profile>|<AppName>/g,'(.*?)'))\r\n            const ProfileAppHolder = [newregextext.replace(newregexP,'$1'),newregextext.replace(newregexP,'$2')];\r\n            if (ProfileAppHolder[0]&&ProfileAppHolder[1]) {\r\n                fileList.forEach(f => {\r\n                    const s = f['File name'];\r\n                    f[ProfileAppHolder[0]] = s.replace(newregex,'$1');\r\n                    f[ProfileAppHolder[1]] = s.replace(newregex,'$2');\r\n                })\r\n                setFileList([...fileList]);\r\n            }else{\r\n                // new match\r\n            }\r\n        }catch(e){\r\n\r\n        }\r\n    }\r\n    const onProfileRegexChange = (event) =>{\r\n        const newregextext = event.target.value;\r\n        setAppProfileRegex(newregextext);\r\n        triggergetproperty(newregextext)\r\n    }\r\n    const handleFile = (files)=>{\r\n        startTransition(async () => {\r\n            let q = [];\r\n            for (let i=0; i<files.length;i++)\r\n            {\r\n                let selected = files[i];\r\n                fileList[i] = {\r\n                    'File name':selected.name,\r\n                    '# rows':0,\r\n                    'Profile':null,\r\n                    'AppName':null,\r\n                    isLoading:true,\r\n                    data:[]\r\n                }\r\n                setFileList([...fileList])\r\n                q.push(new Promise((resolve,reject) => {\r\n                    try {\r\n                        let reader = new FileReader();\r\n                        reader.readAsText(new Blob([selected], {type: selected.type}));\r\n                        reader.onloadend = (event) => {\r\n                            fileList[i].isLoading = false;\r\n                            fileList[i].data = csvParse(event.target.result);\r\n                            fileList[i]['# rows'] = fileList[i].data.length;\r\n                            setFileList([...fileList])\r\n                            resolve(true);\r\n                        };\r\n                    }catch(e){\r\n                        fileList[i].isLoading = false;\r\n                        fileList[i].data = [];\r\n                        setFileList([...fileList])\r\n                        resolve(false);\r\n                    }\r\n                }));\r\n            }\r\n            console.log(fileList.map(f=>f['File name']).join('\", \"'))\r\n            try{\r\n                await Promise.all(q);\r\n                triggergetproperty(appprofileRegex)\r\n            }catch(e){\r\n                console.log(e)\r\n            }\r\n        });\r\n    }\r\n    const onStoreFile = (selected)=>{\r\n        dispatch(setFilesLists({files: selected}));\r\n        navigate('/viz')\r\n    }\r\n    return( <DragDropFile buttonRef={buttonRef} multiple={true} handleFile={handleFile}>\r\n            <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n                <Card>\r\n                    <Box sx={{ p: 2, pl: 2 }}>\r\n                        <Grid\r\n                            container\r\n                            direction={'row'}\r\n                            justifyContent={'space-between'}\r\n                            alignItems={'center'}\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item >\r\n                                <Typography variant={'h2'}>{fileList.length} files</Typography>\r\n                            </Grid>\r\n                            <Grid item >\r\n                                <TextField size={\"small\"} label={'App-Profile-pattern'} value={appprofileRegex} onChange={onProfileRegexChange}></TextField>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button ref={buttonRef} variant={'contained'} >\r\n                                    Upload files\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {/*<Card>*/}\r\n                {/*    <Box sx={{ p: 2, pl: 2 }}>*/}\r\n                        <FileTable data={fileList} omit={['data','isLoading']} onUpload={onStoreFile}/>\r\n                    {/*</Box>*/}\r\n                {/*</Card>*/}\r\n            </Grid>\r\n            </Grid>\r\n        </DragDropFile>)\r\n}\r\n\r\nexport default DataInput"],"names":["data","onSelectRow","onUpload","omit","columns","useMemo","head","Object","keys","filter","k","find","o","forEach","key","push","accessorKey","header","rowVirtualizerInstanceRef","useRef","useState","isLoading","sorting","setSorting","rowSelection","setRowSelection","useEffect","current","scrollToIndex","getSelectedRaw","useCallback","d","i","enableGlobalFilterModes","selectAllMode","muiTableContainerProps","sx","maxHeight","initialState","density","onSortingChange","state","enableRowSelection","onRowSelectionChange","muiTableBodyRowProps","row","onClick","original","cursor","enableColumnResizing","defaultColumn","minSize","maxSize","size","renderTopToolbarCustomActions","table","Box","display","gap","length","IconButton","Upload","renderToolbarInternalActions","positionToolbarAlertBanner","multiple","children","buttonRef","handleFile","React","dragActive","setDragActive","inputRef","handleDrag","e","preventDefault","stopPropagation","type","onclick","click","className","onDragEnter","onSubmit","style","margin","ref","onChange","target","files","htmlFor","onDragLeave","onDragOver","onDrop","dataTransfer","navigate","useNavigate","dispatch","useDispatch","fileList","setFileList","appprofileRegex","setAppProfileRegex","useTransition","startTransition","triggergetproperty","newregextext","newregexP","RegExp","replace","newregex","ProfileAppHolder","f","s","q","selected","name","Promise","resolve","reject","reader","FileReader","readAsText","Blob","onloadend","event","csvParse","result","console","log","map","join","all","Grid","container","spacing","gridSpacing","item","xs","Card","p","pl","direction","justifyContent","alignItems","Typography","variant","TextField","label","value","Button","setFilesLists"],"sourceRoot":""}